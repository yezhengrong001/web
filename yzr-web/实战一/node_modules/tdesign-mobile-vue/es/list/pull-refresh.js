/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import { ref, defineComponent, reactive, nextTick, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, withModifiers, toDisplayString, createCommentVNode, createVNode, renderSlot } from 'vue';
import config from '../config.js';
import _Loading from '../loading/index.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/defineProperty';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/spinner.js';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../loading/props.js';
import './style/css.js';
import '../loading/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-pull-refresh");
function useTouch() {
  var startY = ref(0);
  var deltaY = ref(0);
  var start = function start(event) {
    startY.value = event.touches[0].clientY;
    deltaY.value = 0;
  };
  var move = function move(event) {
    var touch = event.touches[0];
    deltaY.value = touch.clientY - startY.value;
  };
  return {
    startY: startY,
    deltaY: deltaY,
    start: start,
    move: move
  };
}
var PULL_DISTANCE = 50;
var ANIMATION_DURATION = 300;
var TEXT_MAP = {
  loading: "\u52A0\u8F7D\u4E2D",
  pulling: "\u4E0B\u62C9\u5373\u53EF\u5237\u65B0...",
  loosing: "\u91CA\u653E\u5373\u53EF\u5237\u65B0...",
  success: "\u5237\u65B0\u6210\u529F"
};
var SHOW_TEXT_LIST = ["pulling", "loosing", "success"];
var PullRefreshProps = {
  modelValue: Boolean
};
var easeDistance = function easeDistance(distance, pullDistance) {
  if (distance > pullDistance) {
    if (distance < pullDistance * 2) {
      distance = pullDistance + (distance - pullDistance) / 2;
    } else {
      distance = pullDistance * 1.5 + (distance - pullDistance * 2) / 4;
    }
  }
  return Math.round(distance);
};
function isElement(node) {
  var ELEMENT_NODE_TYPE = 1;
  return node.tagName !== "HTML" && node.tagName !== "BODY" && node.nodeType === ELEMENT_NODE_TYPE;
}
var getScrollParent = function getScrollParent(node) {
  var res = node;
  while (res && isElement(res)) {
    if (/auto|scroll/i.test(window.getComputedStyle(res).overflowY)) {
      return res;
    }
    res = res.parentNode;
  }
};
var script = defineComponent({
  name: name,
  components: {
    TLoading: _Loading
  },
  props: PullRefreshProps,
  emits: ["refresh", "update:modelValue"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var state = reactive({
      status: "normal",
      distance: 0,
      duration: 0
    });
    var setStatus = function setStatus(distance, isLoading) {
      state.distance = distance;
      if (isLoading) {
        state.status = "loading";
      } else if (distance === 0) {
        state.status = "normal";
      } else if (distance < PULL_DISTANCE) {
        state.status = "pulling";
      } else {
        state.status = "loosing";
      }
    };
    var touch = useTouch();
    var isTouchable = function isTouchable() {
      return state.status !== "loading" && state.status !== "success";
    };
    var isReachTop = function isReachTop(e) {
      var scrollParent = getScrollParent(e.target);
      return !scrollParent || !scrollParent.scrollTop;
    };
    var onTouchStart = function onTouchStart(e) {
      if (!isReachTop(e)) return;
      if (isTouchable()) {
        state.duration = 0;
        touch.start(e);
      }
    };
    var onTouchMove = function onTouchMove(e) {
      if (!isTouchable()) return;
      if (!isReachTop(e)) return;
      var deltaY = touch.deltaY;
      if (deltaY.value >= 0) {
        e.preventDefault();
        setStatus(easeDistance(deltaY.value, PULL_DISTANCE));
      }
      touch.move(e);
    };
    var onTouchEnd = function onTouchEnd() {
      state.duration = ANIMATION_DURATION;
      if (state.status === "loosing") {
        emit("update:modelValue", true);
        nextTick(function () {
          return emit("refresh");
        });
      } else {
        setStatus(0);
      }
    };
    var trackStyle = computed(function () {
      return {
        transitionDuration: "".concat(state.duration, "ms"),
        transform: state.distance ? "translate3d(0, ".concat(state.distance, "px, 0)") : ""
      };
    });
    watch(function () {
      return props.modelValue;
    }, function (value) {
      if (value) {
        setStatus(PULL_DISTANCE, true);
      } else {
        state.status = "success";
        setTimeout(function () {
          setStatus(0, false);
        }, ANIMATION_DURATION);
      }
    });
    return {
      name: name,
      state: state,
      trackStyle: trackStyle,
      TEXT_MAP: TEXT_MAP,
      SHOW_TEXT_LIST: SHOW_TEXT_LIST,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd
    };
  }
});

var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_loading = resolveComponent("t-loading");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.name)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__track")),
    style: normalizeStyle(_ctx.trackStyle),
    onTouchstart: _cache[0] || (_cache[0] = withModifiers(function () {
      return _ctx.onTouchStart && _ctx.onTouchStart.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchmove: _cache[1] || (_cache[1] = withModifiers(function () {
      return _ctx.onTouchMove && _ctx.onTouchMove.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchend: _cache[2] || (_cache[2] = withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchcancel: _cache[3] || (_cache[3] = withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"]))
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__head"))
  }, [_ctx.SHOW_TEXT_LIST.includes(_ctx.state.status) ? (openBlock(), createElementBlock("div", _hoisted_1, toDisplayString(_ctx.TEXT_MAP[_ctx.state.status]), 1)) : createCommentVNode("", true), _ctx.state.status === "loading" ? (openBlock(), createElementBlock("div", _hoisted_2, [createVNode(_component_t_loading, {
    text: "\u52A0\u8F7D\u4E2D..."
  })])) : createCommentVNode("", true)], 2), renderSlot(_ctx.$slots, "default")], 38)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=pull-refresh.js.map
