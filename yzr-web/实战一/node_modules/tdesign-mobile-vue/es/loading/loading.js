/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, ref, toRefs, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, Fragment, createBlock, createCommentVNode, createVNode } from 'vue';
import script$1 from './icon/gradient.js';
import script$2 from './icon/spinner.js';
import '../shared/index.js';
import ClASSNAMES from '../shared/constants.js';
import config from '../config.js';
import LoadingProps from './props.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode, renderContent } from '../shared/render.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

var prefix = config.prefix;
var name = "".concat(prefix, "-loading");
var toBarPerc = function toBarPerc(n) {
  if (!n || n <= 0) return -100;
  if (n > 1) return 0;
  return (-1 + n) * 100;
};
var script = defineComponent({
  name: name,
  components: {
    GradientIcon: script$1,
    SpinnerIcon: script$2,
    TNode: TNodeComponent
  },
  props: LoadingProps,
  setup: function setup(props) {
    var internalInstance = getCurrentInstance();
    var delayShowLoading = ref(false);
    var _toRefs = toRefs(props),
      pause = _toRefs.pause;
    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props.delay);
    };
    var realLoading = computed(function () {
      return (!props.delay || delayShowLoading.value) && props.loading;
    });
    watch(function () {
      return props.loading;
    }, function (value) {
      if (value) {
        props.delay && countDelay();
      }
    }, {
      immediate: true
    });
    var rootClass = computed(function () {
      return [name, _defineProperty({}, "".concat(name, "--vertical"), props.layout === "vertical"), _defineProperty({}, "".concat(name, "--bar"), props.theme === "bar"), props.size ? ClASSNAMES.SIZE[props.size] : ""];
    });
    var textClass = computed(function () {
      return ["".concat(name, "__text"), _defineProperty({}, "".concat(name, "__text--error"), props.theme === "error"), _defineProperty({}, "".concat(name, "__text--only"), !props.indicator || props.theme === "error")];
    });
    var textContent = computed(function () {
      if (props.theme === "error") {
        return "\u52A0\u8F7D\u5931\u8D25";
      }
      return renderTNode(internalInstance, "text");
    });
    var defaultContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var rootStyle = computed(function () {
      if (props.inheritColor) {
        return "color: inherit";
      }
      return "";
    });
    var barStyle = computed(function () {
      return {
        transform: "translate3d(".concat(toBarPerc(props.progress), "%, 0px, 0px)")
      };
    });
    var animationStyle = computed(function () {
      var ans = {};
      if (props.pause) {
        ans["animation-play-state"] = "paused";
      }
      if (props.reverse) {
        ans["animation-direction"] = "reverse";
      }
      if (props.duration) {
        ans["animation-duration"] = "".concat(props.duration, "ms");
      }
      return ans;
    });
    return {
      name: name,
      pause: pause,
      rootClass: rootClass,
      textClass: textClass,
      textContent: textContent,
      defaultContent: defaultContent,
      rootStyle: rootStyle,
      barStyle: barStyle,
      animationStyle: animationStyle,
      realLoading: realLoading
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_gradient_icon = resolveComponent("gradient-icon");
  var _component_spinner_icon = resolveComponent("spinner-icon");
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.rootClass),
    style: normalizeStyle(_ctx.rootStyle)
  }, [_ctx.theme === "bar" && _ctx.progress && ![0, 1].includes(_ctx.progress) ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__bar")),
    style: normalizeStyle(_ctx.barStyle)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__shadow"))
  }, null, 2)], 6)) : _ctx.theme !== "bar" ? (openBlock(), createElementBlock(Fragment, {
    key: 1
  }, [_ctx.indicator && _ctx.realLoading ? (openBlock(), createElementBlock(Fragment, {
    key: 0
  }, [_ctx.theme === "circular" ? (openBlock(), createBlock(_component_gradient_icon, {
    key: 0,
    style: normalizeStyle(_ctx.animationStyle)
  }, null, 8, ["style"])) : _ctx.theme === "spinner" ? (openBlock(), createBlock(_component_spinner_icon, {
    key: 1,
    style: normalizeStyle(_ctx.animationStyle)
  }, null, 8, ["style"])) : _ctx.theme === "dots" ? (openBlock(), createElementBlock("div", {
    key: 2,
    class: normalizeClass("".concat(_ctx.name, "__dots")),
    style: normalizeStyle(_ctx.animationStyle)
  }, null, 6)) : createCommentVNode("", true)], 64)) : createCommentVNode("", true), _ctx.textContent && _ctx.realLoading ? (openBlock(), createElementBlock("span", {
    key: 1,
    class: normalizeClass(_ctx.textClass)
  }, [createVNode(_component_t_node, {
    content: _ctx.textContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true), createVNode(_component_t_node, {
    content: _ctx.defaultContent
  }, null, 8, ["content"])], 64)) : createCommentVNode("", true)], 6);
}

script.render = render;

export { script as default };
//# sourceMappingURL=loading.js.map
