/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, ref, resolveComponent, openBlock, createBlock, mergeProps } from 'vue';
import config from '../config.js';
import PickerProps from './props.js';
import script$1 from './picker.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/slicedToArray';
import '../button/index.js';
import '../button/button.js';
import 'tdesign-icons-vue-next';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../button/props.js';
import './style/css.js';
import '../button/type.js';
import './picker-item.js';
import './picker.class.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-cascade");
var script = defineComponent({
  name: name,
  components: {
    Picker: script$1
  },
  props: PickerProps,
  setup: function setup(props, context) {
    var pickerProps = computed(function () {
      return _objectSpread({}, props);
    });
    var finalDepth = ref(1);
    var finalSubOptionsRecord = ref({});
    var generateCascadePickerColumns = function generateCascadePickerColumns(value, options, depth, subOptionsRecord) {
      var columns = [];
      columns.push(options.map(function (option) {
        return {
          label: option.label,
          value: option.value
        };
      }));
      for (var i = 0; i < depth - 1; i++) {
        var x = value[i];
        var subOptions = subOptionsRecord[x];
        if (!subOptions) {
          columns.push([]);
        } else {
          columns.push(subOptions.map(function (option) {
            return {
              label: option.label,
              value: option.value
            };
          }));
        }
      }
      return columns;
    };
    var initDepthAndRecord = function initDepthAndRecord(options) {
      var depth = 1;
      var subOptionsRecord = {};
      function traverse(option, currentDepth) {
        if (!option.children) {
          return;
        }
        subOptionsRecord[option.value] = option.children;
        var nextDepth = currentDepth + 1;
        if (nextDepth > depth) {
          depth = nextDepth;
        }
        option.children.forEach(function (option2) {
          traverse(option2, nextDepth);
        });
      }
      options.forEach(function (option) {
        traverse(option, 1);
      });
      finalDepth.value = depth;
      finalSubOptionsRecord.value = subOptionsRecord;
    };
    initDepthAndRecord(props.columns);
    return {
      name: name,
      finalDepth: finalDepth,
      finalSubOptionsRecord: finalSubOptionsRecord,
      pickerProps: pickerProps,
      generateCascadePickerColumns: generateCascadePickerColumns
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_picker = resolveComponent("picker");
  return openBlock(), createBlock(_component_picker, mergeProps(_ctx.pickerProps, {
    columns: function columns(selected) {
      return _ctx.generateCascadePickerColumns(selected, _ctx.columns, _ctx.finalDepth, _ctx.finalSubOptionsRecord);
    }
  }), null, 16, ["columns"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=cascade.js.map
