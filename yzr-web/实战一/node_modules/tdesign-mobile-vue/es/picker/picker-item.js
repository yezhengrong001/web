/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, computed, onMounted, toRefs, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, toDisplayString } from 'vue';
import config from '../config.js';
import Picker from './picker.class.js';
import '../shared/index.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-picker-item");
var script = defineComponent({
  name: name,
  props: {
    options: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    defaultValue: {
      type: [String, Number],
      default: void 0
    },
    renderLabel: {
      type: Function,
      default: void 0
    }
  },
  emits: ["pick"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var picker = null;
    var el = document.createElement("div");
    var root = ref(el);
    var getIndexByValue = function getIndexByValue(val) {
      var defaultIndex = 0;
      if (val !== void 0) {
        defaultIndex = props.options.findIndex(function (item) {
          return item.value === val;
        });
      }
      return defaultIndex < 0 ? 0 : defaultIndex;
    };
    var className = computed(function () {
      return "".concat(name);
    });
    var wrapperClassName = computed(function () {
      return ["".concat(name, "__wrapper")];
    });
    var itemClassName = computed(function () {
      return ["".concat(name, "__item")];
    });
    var setIndex = function setIndex(index) {
      if (picker) {
        picker.updateItems();
        picker.updateIndex(index, {
          isChange: false
        });
      }
    };
    var setValue = function setValue(value) {
      if (picker) {
        picker.updateItems();
        picker.updateIndex(getIndexByValue(value), {
          isChange: false
        });
      }
    };
    var setOptions = function setOptions() {
      picker && picker.update();
    };
    var setUpdateItems = function setUpdateItems() {
      picker && picker.updateItems();
    };
    context.expose({
      setIndex: setIndex,
      setValue: setValue,
      setOptions: setOptions,
      setUpdateItems: setUpdateItems
    });
    onMounted(function () {
      picker = new Picker({
        el: root.value,
        defaultIndex: getIndexByValue(props.defaultValue) || 0,
        onChange: function onChange(index) {
          var curItem = props.options[index];
          var changeValue = {
            value: curItem.value,
            index: index
          };
          emitEvent("pick", changeValue);
        }
      });
    });
    return _objectSpread({
      root: root,
      className: className,
      wrapperClassName: wrapperClassName,
      itemClassName: itemClassName
    }, toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    ref: "root",
    class: normalizeClass(_ctx.className)
  }, [createElementVNode("ul", {
    class: normalizeClass(_ctx.wrapperClassName)
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (option, index) {
    return openBlock(), createElementBlock("li", {
      key: index,
      class: normalizeClass(_ctx.itemClassName)
    }, toDisplayString(_ctx.renderLabel ? _ctx.renderLabel(option) : option.label), 3);
  }), 128))], 2)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=picker-item.js.map
