import { PropType } from 'vue';
import { ListItem } from './type';
declare const _default: import("vue").DefineComponent<{
    height: {
        type: NumberConstructor;
    };
    list: {
        type: PropType<ListItem[]>;
        default: () => ListItem[];
        required: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        default: boolean;
    };
    onSelect: PropType<((indexes: {
        groupIndex: string;
        childrenIndex: number;
    }) => void) | undefined>;
}, {
    indexesRoot: import("vue").Ref<HTMLElement | null>;
    indexesRootStyle: import("vue").ComputedRef<{
        height?: undefined;
    } | {
        height: string | number;
    }>;
    anchorGroup: import("vue").Ref<HTMLElement[]>;
    anchorStyle: string[];
    setAnchorGroupRefs: (index: number) => (el: any) => void;
    setAnchorRefs: (index: number) => (el: any) => void;
    handleSidebarItemClick: (index: string) => void;
    handleSidebarTouchmove: (event: TouchEvent) => void;
    handleSidebarTouchstart: (event: TouchEvent) => void;
    handleRootScroll: (event: UIEvent) => void;
    handleCellClick: (indexes: {
        groupIndex: string;
        childrenIndex: number;
    }) => void;
    componentName: import("vue").Ref<string>;
    list: import("vue").Ref<ListItem[]>;
    showSidebarTip: import("vue").Ref<boolean>;
    activeSidebar: import("vue").Ref<string>;
    activeIndex: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "select", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    height: {
        type: NumberConstructor;
    };
    list: {
        type: PropType<ListItem[]>;
        default: () => ListItem[];
        required: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        default: boolean;
    };
    onSelect: PropType<((indexes: {
        groupIndex: string;
        childrenIndex: number;
    }) => void) | undefined>;
}>>, {
    list: ListItem[];
    sticky: boolean;
}>;
export default _default;
