/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, reactive, computed, watchEffect, onMounted, onBeforeUnmount, toRefs, resolveComponent, openBlock, createElementBlock, normalizeStyle, normalizeClass, Fragment, renderList, withModifiers, createTextVNode, toDisplayString, createElementVNode, createCommentVNode, createVNode, withCtx, createBlock } from 'vue';
import config from '../config.js';
import IndexesProps from './props.js';
import '../shared/index.js';
import script$1 from './indexes-anchor.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var touch = {
  startX: 0,
  startY: 0,
  deltaX: 0,
  deltaY: 0,
  offsetX: 0,
  offsetY: 0
};
var componentName = "".concat(prefix, "-indexes");
var script = defineComponent({
  name: componentName,
  components: {
    indexesAnchor: script$1
  },
  props: IndexesProps,
  emits: ["select"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var timeOut;
    var indexesRoot = ref(null);
    var state = reactive({
      componentName: componentName,
      list: props.list,
      showSidebarTip: false,
      activeSidebar: "",
      activeIndex: -1
    });
    var anchorGroup = ref([]);
    var setAnchorGroupRefs = function setAnchorGroupRefs(index) {
      return function (el) {
        anchorGroup.value[index] = el;
      };
    };
    var anchor = ref([]);
    var anchorStyle = reactive([]);
    var setAnchorRefs = function setAnchorRefs(index) {
      return function (el) {
        anchor.value[index] = el;
      };
    };
    var indexesRootStyle = computed(function () {
      if (typeof props.height !== "number") {
        return {};
      }
      var height = Number(props.height);
      return {
        height: height === 0 ? 0 : "".concat(height, "px")
      };
    });
    var scrollToView = function scrollToView() {
      var _targets$;
      var children = anchorGroup.value;
      var targets = children.filter(function (ele) {
        var dataset = ele.dataset;
        return dataset && dataset.index === state.activeSidebar;
      });
      (_targets$ = targets[0]) === null || _targets$ === void 0 ? void 0 : _targets$.scrollIntoView();
    };
    var calcSticky = function calcSticky(indexesRootTop) {
      var children = anchorGroup.value;
      for (var i = 0; i < children.length; i++) {
        var _anchor$value, _anchor$value$$el$get;
        var _children$i$getBoundi = children[i].getBoundingClientRect(),
          childTop = _children$i$getBoundi.top,
          width = _children$i$getBoundi.width;
        anchorStyle[i] = "z-index: ".concat(i + 1, ";");
        if (childTop < indexesRootTop && i === state.activeIndex) {
          anchorStyle[i] += "position:fixed;top:".concat(indexesRootTop, "px;width: ").concat(width, "px;");
        } else {
          anchorStyle[i] += "";
        }
        var anchorHeight = (_anchor$value = anchor.value[i - 1]) === null || _anchor$value === void 0 ? void 0 : (_anchor$value$$el$get = _anchor$value.$el.getBoundingClientRect()) === null || _anchor$value$$el$get === void 0 ? void 0 : _anchor$value$$el$get.height;
        var diff = childTop - indexesRootTop - anchorHeight;
        if (i - 1 === state.activeIndex && diff < 0) {
          anchorStyle[i - 1] += "transform: translateY(".concat(diff, "px)");
        }
      }
    };
    var calcChildPosition = function calcChildPosition(scrollTop) {
      var _children$currentInde;
      var children = anchorGroup.value;
      var currentIndex = -1;
      for (var i = 0; i < children.length - 1; i++) {
        if (scrollTop < children[i + 1].offsetTop) {
          currentIndex = i;
          break;
        }
      }
      if (scrollTop >= children[children.length - 1].offsetTop) {
        currentIndex = children.length - 1;
      }
      state.activeIndex = currentIndex;
      state.activeSidebar = (_children$currentInde = children[currentIndex].dataset.index) !== null && _children$currentInde !== void 0 ? _children$currentInde : "";
    };
    var setActiveSidebarAndTip = function setActiveSidebarAndTip(index) {
      state.activeSidebar = index;
      state.showSidebarTip = true;
    };
    watchEffect(function () {
      if (state.showSidebarTip) {
        clearSidebarTip();
      }
    });
    var handleSidebarItemClick = function handleSidebarItemClick(index) {
      setActiveSidebarAndTip(index);
      scrollToView();
    };
    var handleSidebarTouchstart = function handleSidebarTouchstart(event) {
      event.stopPropagation();
      var touches = event.touches;
      touch.startX = touches[0].clientX;
      touch.startY = touches[0].clientX;
    };
    var handleSidebarTouchmove = function handleSidebarTouchmove(event) {
      event.preventDefault();
      var touches = event.touches;
      var _touches$ = touches[0],
        clientX = _touches$.clientX,
        clientY = _touches$.clientY;
      var target = document.elementFromPoint(clientX, clientY);
      if (target && target.className === "".concat(componentName, "__sidebar-item") && target instanceof HTMLElement) {
        var index = target.dataset.index;
        if (index !== void 0 && state.activeSidebar !== index) {
          setActiveSidebarAndTip(index);
          scrollToView();
        }
      }
    };
    var handleRootScroll = function handleRootScroll(event) {
      if (indexesRoot.value) {
        calcChildPosition(indexesRoot.value.scrollTop);
        if (props.sticky) {
          var _indexesRoot$value$ge, _indexesRoot$value, _indexesRoot$value$ge2;
          var indexesRootTop = (_indexesRoot$value$ge = (_indexesRoot$value = indexesRoot.value) === null || _indexesRoot$value === void 0 ? void 0 : (_indexesRoot$value$ge2 = _indexesRoot$value.getBoundingClientRect()) === null || _indexesRoot$value$ge2 === void 0 ? void 0 : _indexesRoot$value$ge2.top) !== null && _indexesRoot$value$ge !== void 0 ? _indexesRoot$value$ge : 0;
          calcSticky(indexesRootTop);
        }
      }
    };
    var clearSidebarTip = function clearSidebarTip() {
      if (state.showSidebarTip && state.activeSidebar) {
        timeOut && clearTimeout(timeOut);
        timeOut = window.setTimeout(function () {
          state.showSidebarTip = false;
        }, 1e3);
      }
    };
    var handleCellClick = function handleCellClick(indexes) {
      emitEvent("select", indexes);
    };
    onMounted(function () {
      var children = anchorGroup.value;
      if (children.length > 0) {
        var index = children[0].dataset.index;
        if (index !== void 0) {
          state.activeSidebar = index;
        }
      }
    });
    onBeforeUnmount(function () {
      timeOut && clearTimeout(timeOut);
    });
    return _objectSpread(_objectSpread({}, toRefs(state)), {}, {
      indexesRoot: indexesRoot,
      indexesRootStyle: indexesRootStyle,
      anchorGroup: anchorGroup,
      anchorStyle: anchorStyle,
      setAnchorGroupRefs: setAnchorGroupRefs,
      setAnchorRefs: setAnchorRefs,
      handleSidebarItemClick: handleSidebarItemClick,
      handleSidebarTouchmove: handleSidebarTouchmove,
      handleSidebarTouchstart: handleSidebarTouchstart,
      handleRootScroll: handleRootScroll,
      handleCellClick: handleCellClick
    });
  }
});

var _hoisted_1 = ["data-index", "onClick"];
var _hoisted_2 = ["data-index"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_indexes_anchor = resolveComponent("indexes-anchor");
  var _component_t_indexes_cell = resolveComponent("t-indexes-cell");
  return openBlock(), createElementBlock("div", {
    ref: "indexesRoot",
    style: normalizeStyle(_ctx.indexesRootStyle),
    class: normalizeClass(_ctx.componentName),
    onScroll: _cache[2] || (_cache[2] = function () {
      return _ctx.handleRootScroll && _ctx.handleRootScroll.apply(_ctx, arguments);
    })
  }, [_ctx.list.length > 0 ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.componentName, "__sidebar")),
    onTouchstart: _cache[0] || (_cache[0] = function () {
      return _ctx.handleSidebarTouchstart && _ctx.handleSidebarTouchstart.apply(_ctx, arguments);
    }),
    onTouchmove: _cache[1] || (_cache[1] = function () {
      return _ctx.handleSidebarTouchmove && _ctx.handleSidebarTouchmove.apply(_ctx, arguments);
    })
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.list, function (item) {
    return openBlock(), createElementBlock("div", {
      key: item.index,
      class: normalizeClass(["".concat(_ctx.componentName, "__sidebar-item"), _ctx.activeSidebar === item.index ? "".concat(_ctx.componentName, "__sidebar-item--active") : ""]),
      "data-index": item.index,
      onClick: withModifiers(function ($event) {
        return _ctx.handleSidebarItemClick(item.index);
      }, ["prevent"])
    }, [createTextVNode(toDisplayString(item.index) + " ", 1), _ctx.showSidebarTip && _ctx.activeSidebar === item.index ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass("".concat(_ctx.componentName, "__sidebar-tip"))
    }, [createElementVNode("span", {
      class: normalizeClass("".concat(_ctx.componentName, "__sidebar-tip-text"))
    }, toDisplayString(_ctx.activeSidebar), 3)], 2)) : createCommentVNode("", true)], 10, _hoisted_1);
  }), 128))], 34)) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.list, function (item, index) {
    return openBlock(), createElementBlock("div", {
      ref_for: true,
      ref: _ctx.setAnchorGroupRefs(index),
      key: item.index,
      "data-index": item.index
    }, [createVNode(_component_indexes_anchor, {
      ref_for: true,
      ref: _ctx.setAnchorRefs(index),
      "anchor-style": _ctx.anchorStyle[index]
    }, {
      default: withCtx(function () {
        var _item$title;
        return [createTextVNode(toDisplayString((_item$title = item.title) !== null && _item$title !== void 0 ? _item$title : item.index), 1)];
      }),
      _: 2
    }, 1032, ["anchor-style"]), createElementVNode("div", {
      class: normalizeClass(["".concat(_ctx.componentName, "__group")])
    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(item.children, function (child, childrenIndex) {
      return openBlock(), createBlock(_component_t_indexes_cell, {
        key: child.title,
        value: String(child.title),
        title: child.title,
        link: true,
        bordered: false,
        onClick: function onClick($event) {
          return _ctx.handleCellClick({
            groupIndex: item.index,
            childrenIndex: childrenIndex
          });
        }
      }, null, 8, ["value", "title", "onClick"]);
    }), 128))], 2)], 8, _hoisted_2);
  }), 128))], 38);
}

script.render = render;

export { script as default };
//# sourceMappingURL=indexes.js.map
