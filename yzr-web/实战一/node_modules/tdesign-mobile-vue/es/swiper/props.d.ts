import { TdSwiperProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    animation: {
        type: PropType<"slide" | undefined>;
        default: "slide" | undefined;
        validator(val: TdSwiperProps['animation']): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: undefined;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: PropType<"vertical" | "horizontal" | undefined>;
        default: "vertical" | "horizontal" | undefined;
        validator(val: TdSwiperProps['direction']): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation | undefined>;
    };
    paginationPosition: {
        type: PropType<"top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined>;
        default: "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
        validator(val: TdSwiperProps['paginationPosition']): boolean;
    };
    onChange: PropType<((current: number, context: {
        source: import("./type").SwiperChangeSource;
    }) => void) | undefined>;
};
export default _default;
