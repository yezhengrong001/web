/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, getCurrentInstance, computed, toRefs, watch, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createElementVNode, toDisplayString, createCommentVNode } from 'vue';
import { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue-next';
import messageProps from './props.js';
import config from '../config.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { renderTNode } from '../shared/render.js';
import { useVModel } from '../shared/useVModel/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

var prefix = config.prefix;
var name = "".concat(prefix, "-message");
var script = defineComponent({
  name: name,
  components: {
    CheckCircleFilledIcon: CheckCircleFilledIcon,
    ErrorCircleFilledIcon: ErrorCircleFilledIcon,
    CloseIcon: CloseIcon,
    TNode: TNodeComponent
  },
  props: messageProps,
  emits: ["visible-change", "open", "opened", "close", "closed"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var root = ref(null);
    var internalInstance = getCurrentInstance();
    var closeBtnContent = computed(function () {
      return renderTNode(internalInstance, "closeBtn");
    });
    var _toRefs = toRefs(props),
      visible = _toRefs.visible,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(visible, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      currentVisible = _useVModel2[0],
      setVisible = _useVModel2[1];
    var rootClasses = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, name, true), _defineProperty(_ref, "".concat(name, "--").concat(props.theme), true), _defineProperty(_ref, "".concat(name, "-align--").concat(props.align), !!props.align), _ref;
    });
    var rootStyles = computed(function () {
      return {
        zIndex: props.zIndex
      };
    });
    var onClose = function onClose() {
      emitEvent("close");
      setVisible(false);
    };
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      if (val === false) return;
      emitEvent("open");
      setVisible(true);
      if (props.duration > 0) {
        setTimeout(onClose, props.duration);
      }
    });
    return {
      name: ref(name),
      root: root,
      currentVisible: currentVisible,
      rootClasses: rootClasses,
      rootStyles: rootStyles,
      closeBtnContent: closeBtnContent,
      onClose: onClose,
      afterEnter: function afterEnter() {
        return emitEvent("opened");
      },
      afterLeave: function afterLeave() {
        return emitEvent("closed");
      }
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_check_circle_filled_icon = resolveComponent("check-circle-filled-icon");
  var _component_error_circle_filled_icon = resolveComponent("error-circle-filled-icon");
  var _component_close_icon = resolveComponent("close-icon");
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createBlock(Transition, {
    name: "message",
    onAfterLeave: _ctx.afterLeave,
    onAfterEnter: _ctx.afterEnter
  }, {
    default: withCtx(function () {
      return [_ctx.currentVisible ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref: "root",
        class: normalizeClass(_ctx.rootClasses),
        style: normalizeStyle(_ctx.rootStyles)
      }, [renderSlot(_ctx.$slots, "default", {}, function () {
        return [renderSlot(_ctx.$slots, "icon", {}, function () {
          return [_ctx.theme === "success" ? (openBlock(), createBlock(_component_check_circle_filled_icon, {
            key: 0
          })) : (openBlock(), createBlock(_component_error_circle_filled_icon, {
            key: 1
          }))];
        }), createElementVNode("span", {
          class: normalizeClass("".concat(_ctx.name, "--txt"))
        }, toDisplayString(_ctx.content), 3), _ctx.closeBtn === true ? (openBlock(), createBlock(_component_close_icon, {
          key: 0,
          onClick: _ctx.onClose
        }, null, 8, ["onClick"])) : (openBlock(), createBlock(_component_t_node, {
          key: 1,
          content: _ctx.closeBtnContent
        }, null, 8, ["content"]))];
      })], 6)) : createCommentVNode("", true)];
    }),
    _: 3
  }, 8, ["onAfterLeave", "onAfterEnter"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=message.js.map
