import dayjs from 'dayjs';
import { PickerColumn, PickerValue, PickerContext } from '../picker/type';
declare const _default: import("vue").DefineComponent<{
    cancelBtn: {
        type: StringConstructor;
        default: string;
    };
    confirmBtn: {
        type: StringConstructor;
        default: string;
    };
    end: {
        type: import("vue").PropType<string | number | undefined>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<import("./type").DateTimePickerMode | undefined>;
        default: string;
    };
    renderLabel: {
        type: import("vue").PropType<((type: string, value: number) => string) | undefined>;
    };
    showWeek: BooleanConstructor;
    start: {
        type: import("vue").PropType<string | number | undefined>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./type").DateValue | undefined>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue | undefined>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue | undefined>;
    };
    onCancel: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onChange: import("vue").PropType<((value: import("./type").DateValue) => void) | undefined>;
    onConfirm: import("vue").PropType<((value: import("./type").DateValue) => void) | undefined>;
    onPick: import("vue").PropType<((value: import("./type").DateValue) => void) | undefined>;
}, {
    pickeInstance: any;
    className: import("vue").ComputedRef<string[]>;
    confirmButtonText: import("vue").ComputedRef<any>;
    cancelButtonText: import("vue").ComputedRef<any>;
    title: import("vue").ComputedRef<any>;
    start: import("vue").ComputedRef<dayjs.Dayjs>;
    end: import("vue").ComputedRef<dayjs.Dayjs>;
    renderLabel: import("vue").ComputedRef<any>;
    pickerValue: import("vue").Ref<PickerValue[]>;
    currentPicker: PickerValue[];
    realDateValue: import("vue").Ref<any>;
    isChanged: import("vue").Ref<boolean>;
    generateDatePickerColumns: (selected: PickerValue[], min: any, max: any, renderLabel: (type: string, value: number) => string) => PickerColumn[];
    onConfirm: (value: Array<PickerValue>, context: {
        index: number[];
    }) => void;
    onCancel: (context: {
        e: MouseEvent;
    }) => void;
    onPick: (value: Array<PickerValue>, context: PickerContext) => void;
    onChange: (value: Array<PickerValue>, context: {
        columns: Array<PickerContext>;
        e: MouseEvent;
    }) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value" | "cancel" | "confirm" | "change" | "pick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: StringConstructor;
        default: string;
    };
    confirmBtn: {
        type: StringConstructor;
        default: string;
    };
    end: {
        type: import("vue").PropType<string | number | undefined>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<import("./type").DateTimePickerMode | undefined>;
        default: string;
    };
    renderLabel: {
        type: import("vue").PropType<((type: string, value: number) => string) | undefined>;
    };
    showWeek: BooleanConstructor;
    start: {
        type: import("vue").PropType<string | number | undefined>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./type").DateValue | undefined>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue | undefined>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue | undefined>;
    };
    onCancel: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onChange: import("vue").PropType<((value: import("./type").DateValue) => void) | undefined>;
    onConfirm: import("vue").PropType<((value: import("./type").DateValue) => void) | undefined>;
    onPick: import("vue").PropType<((value: import("./type").DateValue) => void) | undefined>;
}>>, {
    title: string;
    format: string;
    mode: import("./type").DateTimePickerMode | undefined;
    confirmBtn: string;
    cancelBtn: string;
    showWeek: boolean;
}>;
export default _default;
