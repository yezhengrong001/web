/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _typeof from '@babel/runtime/helpers/typeof';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, computed, toRefs, watch, nextTick, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode } from 'vue';
import dayjs from 'dayjs';
import { c as commonjsGlobal, a as customParseFormat } from '../_chunks/dep-b1f682a3.js';
import config from '../config.js';
import DateTimePickerProps from './props.js';
import '../shared/index.js';
import { Picker } from '../picker/index.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../picker/picker.js';
import '../picker/props.js';
import '../button/index.js';
import '../button/button.js';
import '@babel/runtime/helpers/defineProperty';
import 'tdesign-icons-vue-next';
import '../button/props.js';
import './style/css.js';
import '../button/type.js';
import '../picker/picker-item.js';
import '../picker/picker.class.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '../picker/cascade.js';
import '../picker/type.js';

var weekday$1 = {exports: {}};

(function (module, exports) {
  !function (e, t) {
    "object" == 'object' && "undefined" != 'object' ? module.exports = t() : "function" == typeof undefined && undefined.amd ? undefined(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_weekday = t();
  }(commonjsGlobal, function () {
    "use strict";

    return function (e, t) {
      t.prototype.weekday = function (e) {
        var t = this.$locale().weekStart || 0,
          i = this.$W,
          n = (i < t ? i + 7 : i) - t;
        return this.$utils().u(e) ? n : this.subtract(n, "day").add(e, "day");
      };
    };
  });
})(weekday$1, weekday$1.exports);
var weekday = weekday$1.exports;

dayjs.extend(weekday);
dayjs.extend(customParseFormat);
var prefix = config.prefix;
var name = "".concat(prefix, "-date-time-picker");
var precisionRankRecord = {
  year: 0,
  month: 1,
  date: 2,
  hour: 3,
  minute: 4,
  second: 5
};
var script = defineComponent({
  name: name,
  components: {
    TPicker: Picker
  },
  props: DateTimePickerProps,
  emits: ["change", "cancel", "confirm", "pick", "update:modelValue", "update:value"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var pickeInstance = ref(null);
    var isChanged = ref(false);
    var realDateValue = ref();
    var className = computed(function () {
      return ["".concat(name)];
    });
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      dateTimePickerValue = _useVModel2[0],
      setDateTimePickerValue = _useVModel2[1];
    var title = computed(function () {
      return props.title || "\u9009\u62E9\u65F6\u95F4";
    });
    var confirmButtonText = computed(function () {
      return props.confirmBtn || "\u786E\u5B9A";
    });
    var cancelButtonText = computed(function () {
      return props.cancelBtn || "\u53D6\u6D88";
    });
    var start = computed(function () {
      return props.start ? dayjs(props.start) : dayjs().subtract(10, "year");
    });
    var end = computed(function () {
      return props.end ? dayjs(props.end) : dayjs().add(10, "year");
    });
    var renderLabel = computed(function () {
      return props.renderLabel;
    });
    var isPrecision = function isPrecision(type) {
      if (!props.mode) {
        return false;
      }
      switch (type) {
        case "year":
          return typeof props.mode === "string" && precisionRankRecord[props.mode] >= 0 || _typeof(props.mode) === "object" && precisionRankRecord[props.mode[0]] >= 0;
        case "month":
          return typeof props.mode === "string" && precisionRankRecord[props.mode] >= 1 || _typeof(props.mode) === "object" && precisionRankRecord[props.mode[0]] >= 1;
        case "date":
          return typeof props.mode === "string" && precisionRankRecord[props.mode] >= 2 || _typeof(props.mode) === "object" && precisionRankRecord[props.mode[0]] >= 2;
        case "hour":
          return typeof props.mode === "string" && precisionRankRecord[props.mode] >= 3 || _typeof(props.mode) === "object" && precisionRankRecord[props.mode[1]] >= 3;
        case "minute":
          return typeof props.mode === "string" && precisionRankRecord[props.mode] >= 4 || _typeof(props.mode) === "object" && precisionRankRecord[props.mode[1]] >= 4;
        case "second":
          return typeof props.mode === "string" && precisionRankRecord[props.mode] >= 5 || _typeof(props.mode) === "object" && precisionRankRecord[props.mode[1]] >= 5;
        default:
          return true;
      }
    };
    var getPickerValueByDateTimePickerValue = function getPickerValueByDateTimePickerValue(value2) {
      var currentDate = dayjs(value2);
      var ret = [];
      Object.keys(precisionRankRecord).forEach(function (item) {
        if (isPrecision(item)) {
          ret.push("".concat(currentDate[item]()));
        }
      });
      return ret;
    };
    var pickerValue = ref(getPickerValueByDateTimePickerValue(dateTimePickerValue.value || start.value.valueOf()));
    var lastTimePicker = _toConsumableArray(pickerValue.value);
    var currentPicker = _toConsumableArray(pickerValue.value);
    var getDateTimePickerValueByPickerValue = function getDateTimePickerValueByPickerValue(value2) {
      var valueLength = 0;
      var date = dayjs();
      Object.keys(precisionRankRecord).forEach(function (item, index) {
        if (isPrecision(item)) {
          date = date[item](value2[valueLength]);
          valueLength++;
        }
      });
      return date;
    };
    var generateDatePickerColumns = function generateDatePickerColumns(selected, min, max, renderLabel2) {
      var ret = [];
      var minYear = min.year();
      var minMonth = min.month() + 1;
      var minDay = min.date();
      var minHour = min.hour();
      var minMinute = min.minute();
      var minSecond = min.second();
      var maxYear = max.year();
      var maxMonth = max.month() + 1;
      var maxDay = max.date();
      var maxHour = max.hour();
      var maxMinute = max.minute();
      var maxSecond = max.second();
      var selectedDate = {};
      var selectedLength = 0;
      Object.keys(precisionRankRecord).forEach(function (item) {
        var newKey = "selected".concat(item.substr(0, 1).toUpperCase()).concat(item.substr(1, item.length));
        if (isPrecision(item)) {
          selectedDate[newKey] = parseInt("".concat(selected[selectedLength]), 10);
          selectedLength++;
        } else {
          selectedDate[newKey] = void 0;
        }
      });
      var isInMinYear = selectedDate.selectedYear === minYear;
      var isInMaxYear = selectedDate.selectedYear === maxYear;
      var isInMinMonth = isInMinYear && selectedDate.selectedMonth + 1 === minMonth;
      var isInMaxMonth = isInMaxYear && selectedDate.selectedMonth + 1 === maxMonth;
      var isInMinDay = isInMinMonth && selectedDate.selectedDay === minDay;
      var isInMaxDay = isInMaxMonth && selectedDate.selectedDay === maxDay;
      var isInMinHour = isInMinDay && selectedDate.selectedHour === minHour;
      var isInMaxHour = isInMaxDay && selectedDate.selectedHour === maxHour;
      var isInMinMinute = isInMinHour && selectedDate.selectedMinute === minMinute;
      var isInMaxMinute = isInMaxHour && selectedDate.selectedMinute === maxMinute;
      var generateColumn = function generateColumn(start2, end2, type) {
        var arr = [];
        for (var i = start2; i <= end2; i++) {
          var value2 = i.toString();
          arr.push({
            label: renderLabel2 ? renderLabel2(type, i) : value2,
            value: type === "month" ? "".concat(+value2 - 1) : value2
          });
        }
        ret.push(arr);
      };
      if (isPrecision("year")) {
        generateColumn(minYear, maxYear, "year");
      }
      if (isPrecision("month")) {
        var lower = isInMinYear ? minMonth : 1;
        var upper = isInMaxYear ? maxMonth : 12;
        generateColumn(lower, upper, "month");
      }
      if (isPrecision("date")) {
        var _lower = isInMinMonth ? minDay : 1;
        var _upper = isInMaxMonth ? maxDay : dayjs("".concat(selected[0], "-").concat(+selected[1] + 1)).daysInMonth();
        generateColumn(_lower, _upper, "date");
      }
      if (isPrecision("hour")) {
        var _lower2 = isInMinDay ? minHour : 0;
        var _upper2 = isInMaxDay ? maxHour : 23;
        generateColumn(_lower2, _upper2, "hour");
      }
      if (isPrecision("minute")) {
        var _lower3 = isInMinHour ? minMinute : 0;
        var _upper3 = isInMaxHour ? maxMinute : 59;
        generateColumn(_lower3, _upper3, "minute");
      }
      if (isPrecision("second")) {
        var _lower4 = isInMinMinute ? minSecond : 0;
        var _upper4 = isInMaxMinute ? maxSecond : 59;
        generateColumn(_lower4, _upper4, "second");
      }
      return ret;
    };
    var onConfirm = function onConfirm(value2, context2) {
      lastTimePicker = _toConsumableArray(currentPicker);
      var currentDate = getDateTimePickerValueByPickerValue(value2);
      emitEvent("confirm", dayjs(currentDate).format(props.format));
    };
    var onCancel = function onCancel(context2) {
      currentPicker = _toConsumableArray(lastTimePicker);
      emitEvent("cancel", {
        e: context2.e
      });
    };
    var onChange = function onChange(value2, context2) {
      lastTimePicker = _toConsumableArray(currentPicker);
      var currentDate = getDateTimePickerValueByPickerValue(value2);
      realDateValue.value = dayjs(currentDate).format(props.format);
      isChanged.value = true;
    };
    var onPick = function onPick(value2, context2) {
      currentPicker = value2;
      var currentDate = getDateTimePickerValueByPickerValue(value2);
      emitEvent("pick", dayjs(currentDate).format(props.format));
    };
    watch(function () {
      return dateTimePickerValue;
    }, function (val) {
      nextTick(function () {
        if (isChanged.value) {
          isChanged.value = false;
        } else {
          var _pickeInstance$value;
          (_pickeInstance$value = pickeInstance.value) === null || _pickeInstance$value === void 0 ? void 0 : _pickeInstance$value.setValues(getPickerValueByDateTimePickerValue(val.value || start.value.valueOf()));
          currentPicker = _toConsumableArray(ref(getPickerValueByDateTimePickerValue(val.value || start.value.valueOf())).value);
          lastTimePicker = _toConsumableArray(currentPicker);
          isChanged.value = false;
        }
      });
    }, {
      immediate: true,
      deep: true
    });
    watch(function () {
      return isChanged;
    }, function (val) {
      if (val.value) {
        setDateTimePickerValue(realDateValue.value);
      }
    }, {
      immediate: true,
      deep: true
    });
    return {
      pickeInstance: pickeInstance,
      className: className,
      confirmButtonText: confirmButtonText,
      cancelButtonText: cancelButtonText,
      title: title,
      start: start,
      end: end,
      renderLabel: renderLabel,
      pickerValue: pickerValue,
      currentPicker: currentPicker,
      realDateValue: realDateValue,
      isChanged: isChanged,
      generateDatePickerColumns: generateDatePickerColumns,
      onConfirm: onConfirm,
      onCancel: onCancel,
      onPick: onPick,
      onChange: onChange
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_picker = resolveComponent("t-picker");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className)
  }, [createVNode(_component_t_picker, {
    ref: "pickeInstance",
    value: _ctx.currentPicker,
    title: _ctx.title,
    columns: function columns(selected) {
      return _ctx.generateDatePickerColumns(selected, _ctx.start, _ctx.end, _ctx.renderLabel);
    },
    onChange: _ctx.onChange,
    onConfirm: _ctx.onConfirm,
    onCancel: _ctx.onCancel,
    onPick: _ctx.onPick
  }, null, 8, ["value", "title", "columns", "onChange", "onConfirm", "onCancel", "onPick"])], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=date-time-picker.js.map
