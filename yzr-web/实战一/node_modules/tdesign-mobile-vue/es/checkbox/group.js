/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _typeof from '@babel/runtime/helpers/typeof';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, provide, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, renderList, createBlock } from 'vue';
import config from '../config.js';
import CheckboxProps from './checkbox-group-props.js';
import script$1 from './checkbox.js';
import '../shared/index.js';
import './hooks/index.js';
import { useDefault } from '../shared/useDefault/index.js';
import { getOptions } from './hooks/getOptions.js';
import { setCheckAllStatus } from './hooks/setCheckAllStatus.js';
import 'tdesign-icons-vue-next';
import './props.js';
import '../shared/constants.js';
import '../shared/render-tnode.js';
import '../shared/render.js';
import 'lodash/camelCase';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import 'lodash/intersection';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-checkbox-group");
var script = defineComponent({
  name: name,
  components: {
    Checkbox: script$1
  },
  props: CheckboxProps,
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var isArray = Array.isArray;
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerValue = _useDefault2[0],
      setinnerValue = _useDefault2[1];
    var optionList = getOptions(props, context.slots);
    var checkedSet = computed(function () {
      if (isArray(innerValue.value)) {
        return new Set(innerValue.value);
      }
      return /* @__PURE__ */new Set();
    });
    var checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);
    var maxExceeded = computed(function () {
      return props.max !== void 0 && innerValue.value.length === props.max;
    });
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (isArray(innerValue.value)) {
        if (currentValue === void 0) {
          return;
        }
        var val = _toConsumableArray(innerValue.value);
        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setinnerValue(val, {
          e: data.e,
          current: data.option.value,
          type: data.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof(innerValue.value)));
      }
    };
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.value === void 0) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray(val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context2) {
      var value = checked ? getAllCheckboxValue() : [];
      setinnerValue(value, {
        e: context2.e,
        type: checked ? "check" : "uncheck",
        current: void 0
      });
    };
    provide("checkboxGroup", _objectSpread(_objectSpread({}, toRefs(props)), {}, {
      innerValue: innerValue,
      checkAllStatus: checkAllStatus,
      checkedSet: checkedSet,
      onCheckedChange: onCheckedChange
    }));
    return {
      prefix: prefix,
      optionList: optionList
    };
  }
});

var _hoisted_1 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_checkbox = resolveComponent("checkbox");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass("".concat(_ctx.prefix, "-checkbox-group"))
  }, [!(_ctx.options && _ctx.options.length) ? renderSlot(_ctx.$slots, "default", {
    key: 0
  }) : (openBlock(), createElementBlock("span", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.optionList, function (item, idx) {
    return openBlock(), createBlock(_component_checkbox, {
      key: idx,
      name: item.name,
      label: item.label,
      value: item.value,
      "check-all": item.checkAll
    }, null, 8, ["name", "label", "value", "check-all"]);
  }), 128))]))], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=group.js.map
