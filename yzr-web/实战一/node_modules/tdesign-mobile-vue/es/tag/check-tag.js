/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { CloseIcon } from 'tdesign-icons-vue-next';
import { defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, createCommentVNode } from 'vue';
import config from '../config.js';
import CheckTagProps from './check-tag-props.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { renderContent, renderTNode } from '../shared/render.js';
import { useVModel } from '../shared/useVModel/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

var prefix = config.prefix;
var name = "".concat(prefix, "-check-tag");
var CheckTag = defineComponent({
  name: name,
  components: {
    CloseIcon: CloseIcon,
    TNode: TNodeComponent
  },
  props: CheckTagProps,
  emits: ["change", "click", "update:checked", "update:modelValue"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var internalInstance = getCurrentInstance();
    var tagContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var iconContent = computed(function () {
      return renderTNode(internalInstance, "icon");
    });
    var baseClass = "".concat(prefix, "-tag");
    var _toRefs = toRefs(props),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(checked, modelValue, props.defaultChecked, props.onChange, "checked"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var classes = computed(function () {
      var _ref;
      return ["".concat(baseClass), "".concat(baseClass, "--checkable"), "".concat(baseClass, "--shape-").concat(props.shape), "".concat(baseClass, "--size-").concat(props.size), (_ref = {}, _defineProperty(_ref, "".concat(prefix, "-is-closable ").concat(baseClass, "--closable"), props.closable), _defineProperty(_ref, "".concat(prefix, "-is-disabled ").concat(baseClass, "--disabled"), props.disabled), _defineProperty(_ref, "".concat(prefix, "-is-checked ").concat(baseClass, "--checked"), !props.disabled && innerChecked.value), _ref)];
    });
    var onClickClose = function onClickClose(e) {
      if (!props.disabled) {
        emitEvent("close", {
          e: e
        });
      }
    };
    var handleClick = function handleClick(e) {
      if (!props.disabled) {
        emitEvent("click", {
          e: e
        });
        setInnerChecked(!innerChecked.value);
      }
    };
    return {
      baseClass: baseClass,
      classes: classes,
      onClickClose: onClickClose,
      handleClick: handleClick,
      iconContent: iconContent,
      tagContent: tagContent,
      innerChecked: innerChecked
    };
  }
});

var _hoisted_1 = ["aria-disabled"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_close_icon = resolveComponent("close-icon");
  return openBlock(), createElementBlock("span", {
    class: normalizeClass(_ctx.classes),
    "aria-disabled": _ctx.disabled,
    role: "button",
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    })
  }, [createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.baseClass, "__icon"))
  }, [createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.baseClass, "__text"))
  }, [createVNode(_component_t_node, {
    content: _ctx.tagContent
  }, null, 8, ["content"])], 2), _ctx.closable && !_ctx.disabled ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: normalizeClass("".concat(_ctx.baseClass, "__icon-close")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClickClose && _ctx.onClickClose.apply(_ctx, arguments);
    })
  }, [createVNode(_component_close_icon)], 2)) : createCommentVNode("", true)], 10, _hoisted_1);
}

CheckTag.render = render;

export { CheckTag as default };
//# sourceMappingURL=check-tag.js.map
