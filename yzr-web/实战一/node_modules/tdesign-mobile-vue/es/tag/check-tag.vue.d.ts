declare const CheckTag: import("vue").DefineComponent<{
    checked: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: undefined;
    };
    closable: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    shape: {
        type: import("vue").PropType<"mark" | "round" | "square" | undefined>;
        default: "mark" | "round" | "square" | undefined;
        validator(val: "mark" | "round" | "square" | undefined): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum | undefined>;
        default: import("../common").SizeEnum | undefined;
        validator(val: import("../common").SizeEnum | undefined): boolean;
    };
    onChange: import("vue").PropType<((checked: boolean) => void) | undefined>;
    onClick: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
}, {
    baseClass: string;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean | undefined;
    })[]>;
    onClickClose: (e: MouseEvent) => void;
    handleClick: (e: MouseEvent) => void;
    iconContent: import("vue").ComputedRef<any>;
    tagContent: import("vue").ComputedRef<any>;
    innerChecked: import("vue").Ref<boolean | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "click" | "change" | "update:checked", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    checked: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: undefined;
    };
    closable: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    shape: {
        type: import("vue").PropType<"mark" | "round" | "square" | undefined>;
        default: "mark" | "round" | "square" | undefined;
        validator(val: "mark" | "round" | "square" | undefined): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum | undefined>;
        default: import("../common").SizeEnum | undefined;
        validator(val: import("../common").SizeEnum | undefined): boolean;
    };
    onChange: import("vue").PropType<((checked: boolean) => void) | undefined>;
    onClick: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
}>>, {
    modelValue: boolean;
    shape: "mark" | "round" | "square" | undefined;
    size: import("../common").SizeEnum | undefined;
    disabled: boolean;
    checked: boolean;
    defaultChecked: boolean;
    closable: boolean;
}>;
export default CheckTag;
