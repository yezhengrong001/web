{"version":3,"file":"skeleton.js","sources":["../../src/skeleton/skeleton.vue","../../src/skeleton/skeleton.vue?vue&type=template&id=66c8b101&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClasses\">\n    <template v-if=\"showContent\">\n      <t-node :content=\"skeletonContent\" />\n    </template>\n    <template v-else>\n      <div v-if=\"parsedRowcols.length\" :class=\"`${baseClass}__content`\">\n        <div v-for=\"(row, index) of parsedRowcols\" :key=\"`row-${index}`\" :class=\"`${baseClass}__row`\">\n          <div v-for=\"(col, idx) of row\" :key=\"`col-${idx}`\" :class=\"col.class\" :style=\"col.style\"></div>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, toRefs, watchEffect, ref, getCurrentInstance } from 'vue';\nimport { isNumber, renderContent, TNode } from '../shared';\nimport config from '../config';\nimport SkeletonProps from './props';\nimport { SkeletonRowColObj } from './type';\nimport { ClassName, Styles } from '../common';\n\nconst { prefix } = config;\nconst name = `${prefix}-skeleton`;\nconst ThemeMap = {\n  avatar: [{ type: 'circle', height: '64px', width: '64px' }],\n  image: [{ type: 'rect', height: '64px', width: '64px' }],\n  text: [\n    1,\n    [\n      { width: '24%', height: '16px', marginRight: '16px' },\n      { width: '76%', height: '16px' },\n    ],\n  ],\n  paragraph: [1, 1, 1, { width: '55%' }],\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: SkeletonProps,\n  setup(props) {\n    const { loading, animation } = toRefs(props);\n    const showContent = computed(() => !loading.value);\n\n    const internalInstance = getCurrentInstance();\n    const skeletonContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const baseClass = name;\n    const rootClasses = computed(() => [`${name}`]);\n\n    const rowCols = ref<any>([]);\n\n    watchEffect(() => {\n      if (props.rowCol?.length) {\n        rowCols.value = [...props.rowCol];\n      } else {\n        rowCols.value = [...ThemeMap[props.theme || 'text']];\n      }\n    });\n\n    const getColItemClass = (obj: SkeletonRowColObj): ClassName => [\n      `${name}__col`,\n      `${name}--type-${obj.type || 'text'}`,\n      { [`${name}--animation-${animation.value}`]: animation.value },\n    ];\n    const getColItemStyle = (obj: SkeletonRowColObj): Styles => {\n      const styleName = [\n        'width',\n        'height',\n        'marginRight',\n        'marginLeft',\n        'margin',\n        'size',\n        'background',\n        'backgroundColor',\n        'borderRadius',\n      ];\n      const style: Styles = {};\n      styleName.forEach((name) => {\n        if (name in obj) {\n          const px = isNumber(obj[name]) ? `${obj[name]}px` : obj[name];\n          if (name === 'size') {\n            [style.width, style.height] = [px, px];\n          } else {\n            style[name] = px;\n          }\n        }\n      });\n      return style;\n    };\n\n    const parsedRowcols = computed(() => {\n      return rowCols.value.map((item: any) => {\n        if (isNumber(item)) {\n          return [\n            {\n              class: getColItemClass({ type: 'text' }),\n              style: {},\n            },\n          ];\n        }\n        if (Array.isArray(item)) {\n          return item.map((col) => {\n            return {\n              ...col,\n              class: getColItemClass(col),\n              style: getColItemStyle(col),\n            };\n          });\n        }\n\n        const nItem = item as SkeletonRowColObj;\n        return [\n          {\n            ...nItem,\n            class: getColItemClass(nItem),\n            style: getColItemStyle(nItem),\n          },\n        ];\n      });\n    });\n\n    return {\n      baseClass,\n      rootClasses,\n      parsedRowcols,\n      showContent,\n      skeletonContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClasses\">\n    <template v-if=\"showContent\">\n      <t-node :content=\"skeletonContent\" />\n    </template>\n    <template v-else>\n      <div v-if=\"parsedRowcols.length\" :class=\"`${baseClass}__content`\">\n        <div v-for=\"(row, index) of parsedRowcols\" :key=\"`row-${index}`\" :class=\"`${baseClass}__row`\">\n          <div v-for=\"(col, idx) of row\" :key=\"`col-${idx}`\" :class=\"col.class\" :style=\"col.style\"></div>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, toRefs, watchEffect, ref, getCurrentInstance } from 'vue';\nimport { isNumber, renderContent, TNode } from '../shared';\nimport config from '../config';\nimport SkeletonProps from './props';\nimport { SkeletonRowColObj } from './type';\nimport { ClassName, Styles } from '../common';\n\nconst { prefix } = config;\nconst name = `${prefix}-skeleton`;\nconst ThemeMap = {\n  avatar: [{ type: 'circle', height: '64px', width: '64px' }],\n  image: [{ type: 'rect', height: '64px', width: '64px' }],\n  text: [\n    1,\n    [\n      { width: '24%', height: '16px', marginRight: '16px' },\n      { width: '76%', height: '16px' },\n    ],\n  ],\n  paragraph: [1, 1, 1, { width: '55%' }],\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: SkeletonProps,\n  setup(props) {\n    const { loading, animation } = toRefs(props);\n    const showContent = computed(() => !loading.value);\n\n    const internalInstance = getCurrentInstance();\n    const skeletonContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const baseClass = name;\n    const rootClasses = computed(() => [`${name}`]);\n\n    const rowCols = ref<any>([]);\n\n    watchEffect(() => {\n      if (props.rowCol?.length) {\n        rowCols.value = [...props.rowCol];\n      } else {\n        rowCols.value = [...ThemeMap[props.theme || 'text']];\n      }\n    });\n\n    const getColItemClass = (obj: SkeletonRowColObj): ClassName => [\n      `${name}__col`,\n      `${name}--type-${obj.type || 'text'}`,\n      { [`${name}--animation-${animation.value}`]: animation.value },\n    ];\n    const getColItemStyle = (obj: SkeletonRowColObj): Styles => {\n      const styleName = [\n        'width',\n        'height',\n        'marginRight',\n        'marginLeft',\n        'margin',\n        'size',\n        'background',\n        'backgroundColor',\n        'borderRadius',\n      ];\n      const style: Styles = {};\n      styleName.forEach((name) => {\n        if (name in obj) {\n          const px = isNumber(obj[name]) ? `${obj[name]}px` : obj[name];\n          if (name === 'size') {\n            [style.width, style.height] = [px, px];\n          } else {\n            style[name] = px;\n          }\n        }\n      });\n      return style;\n    };\n\n    const parsedRowcols = computed(() => {\n      return rowCols.value.map((item: any) => {\n        if (isNumber(item)) {\n          return [\n            {\n              class: getColItemClass({ type: 'text' }),\n              style: {},\n            },\n          ];\n        }\n        if (Array.isArray(item)) {\n          return item.map((col) => {\n            return {\n              ...col,\n              class: getColItemClass(col),\n              style: getColItemStyle(col),\n            };\n          });\n        }\n\n        const nItem = item as SkeletonRowColObj;\n        return [\n          {\n            ...nItem,\n            class: getColItemClass(nItem),\n            style: getColItemStyle(nItem),\n          },\n        ];\n      });\n    });\n\n    return {\n      baseClass,\n      rootClasses,\n      parsedRowcols,\n      showContent,\n      skeletonContent,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","ThemeMap","avatar","type","height","width","image","text","marginRight","paragraph","defineComponent","components","TNode","props","SkeletonProps","setup","toRefs","loading","animation","showContent","computed","value","internalInstance","getCurrentInstance","skeletonContent","renderContent","baseClass","rootClasses","rowCols","ref","watchEffect","rowCol","length","theme","getColItemClass","obj","getColItemStyle","styleName","style","forEach","px","isNumber","parsedRowcols","map","item","class","Array","isArray","col","nItem","_createElementBlock","_ctx","_createBlock","_component_t_node","content","_Fragment","key","_openBlock","_renderList","row","index","idx","_normalizeClass","_normalizeStyle"],"mappings":"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"}