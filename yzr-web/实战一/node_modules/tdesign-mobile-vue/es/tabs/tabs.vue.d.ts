declare const _default: import("vue").DefineComponent<{
    animation: {
        type: import("vue").PropType<import("./type").TabAnimation | undefined>;
    };
    list: {
        type: import("vue").PropType<import("./type").TdTabPanelProps[] | undefined>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | undefined>;
        default: "left" | "top" | undefined;
        validator(val: "left" | "top" | undefined): boolean;
    };
    showBottomLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large" | undefined>;
        default: "medium" | "large" | undefined;
        validator(val: "medium" | "large" | undefined): boolean;
    };
    stickyProps: {
        type: import("vue").PropType<import("../sticky").TdStickyProps | undefined>;
    };
    value: {
        type: import("vue").PropType<import("./type").TabValue | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TabValue | undefined>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TabValue | undefined>;
    };
    onChange: import("vue").PropType<((value: import("./type").TabValue) => void) | undefined>;
}, {
    name: string;
    prefix: string;
    classes: import("vue").ComputedRef<string[]>;
    navClasses: import("vue").Ref<string[]>;
    activeClass: string;
    disabledClass: string;
    currentValue: import("vue").Ref<import("./type").TabValue | undefined>;
    tabClick: (event: Event, item: Record<string, unknown>) => false | undefined;
    showBottomLine: import("vue").ComputedRef<boolean>;
    itemProps: import("vue").ComputedRef<any[]>;
    navScroll: import("vue").Ref<HTMLElement | null>;
    navWrap: import("vue").Ref<HTMLElement | null>;
    navLine: import("vue").Ref<HTMLElement | null>;
    lineStyle: import("vue").Ref<string>;
    moveToActiveTab: () => void;
    stickyProps: import("vue").ComputedRef<{
        container?: Element | undefined;
        disabled: boolean;
        offsetTop?: string | number | undefined;
        zIndex?: number | undefined;
        onScroll?: ((context: {
            scrollTop: number;
            isFixed: boolean;
        }) => void) | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<import("./type").TabAnimation | undefined>;
    };
    list: {
        type: import("vue").PropType<import("./type").TdTabPanelProps[] | undefined>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | undefined>;
        default: "left" | "top" | undefined;
        validator(val: "left" | "top" | undefined): boolean;
    };
    showBottomLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large" | undefined>;
        default: "medium" | "large" | undefined;
        validator(val: "medium" | "large" | undefined): boolean;
    };
    stickyProps: {
        type: import("vue").PropType<import("../sticky").TdStickyProps | undefined>;
    };
    value: {
        type: import("vue").PropType<import("./type").TabValue | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TabValue | undefined>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TabValue | undefined>;
    };
    onChange: import("vue").PropType<((value: import("./type").TabValue) => void) | undefined>;
}>>, {
    value: import("./type").TabValue | undefined;
    modelValue: import("./type").TabValue | undefined;
    placement: "left" | "top" | undefined;
    size: "medium" | "large" | undefined;
    showBottomLine: boolean;
}>;
export default _default;
