{"version":3,"file":"textarea.js","sources":["../../src/textarea/textarea.vue","../../src/textarea/textarea.vue?vue&type=template&id=67798370&lang.js"],"sourcesContent":["<template>\n  <div :class=\"componentName\">\n    <div v-if=\"labelContent\" :class=\"`${componentName}__name`\">\n      <t-node :content=\"labelContent\"></t-node>\n    </div>\n    <div :class=\"textareaClassNames\">\n      <textarea\n        ref=\"textareaRef\"\n        :value=\"innerValue\"\n        :style=\"textareaStyle\"\n        :name=\"name\"\n        :maxlength=\"maxlength || -1\"\n        :disabled=\"disabled\"\n        :placeholder=\"placeholder\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @input=\"handleInput\"\n        @compositionend=\"handleCompositionend\"\n      />\n      <div v-if=\"maxcharacter || maxlength\" :class=\"`${componentName}__count`\">\n        {{ `${textareaLength}/${maxcharacter || maxlength}` }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, ref, onMounted, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick } from 'vue';\nimport { useEmitEvent, renderTNode, TNode, getCharacterLength, useVModel } from '../shared';\nimport config from '../config';\nimport TextareaProps from './props';\nimport { TdTextareaProps, TextareaValue } from './type';\nimport calcTextareaHeight from '../_common/js/utils/calcTextareaHeight';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-textarea`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n  },\n  props: TextareaProps,\n  emits: ['update:value', 'update:modelValue', 'focus', 'blur', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const textareaRef = ref<null | HTMLElement>(null);\n    const textareaStyle = ref();\n    const textareaLength = ref(0);\n    const { value, modelValue } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const textareaClassNames = computed(() => [\n      `${componentName}__wrapper`,\n      {\n        [`${componentName}-is-disabled`]: props.disabled,\n      },\n    ]);\n    const internalInstance = getCurrentInstance();\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n\n    const setInputValue = (v: TextareaValue = '') => {\n      const input = textareaRef.value as HTMLTextAreaElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const adjustTextareaHeight = () => {\n      if (props.autosize === true) {\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement);\n      } else if (typeof props.autosize === 'object') {\n        const { minRows, maxRows } = props.autosize;\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement, minRows, maxRows);\n      } else if (context.attrs.rows) {\n        textareaStyle.value = { height: 'auto', minHeight: 'auto' };\n      }\n    };\n\n    const handleInput = (e: any) => {\n      if (e.isComposing || e.inputType === 'insertCompositionText') return;\n      textareaValueChangeHandle(e);\n    };\n\n    const textareaValueChangeHandle = (e: InputEvent) => {\n      const { target } = e;\n      const { value } = target as HTMLInputElement;\n      if (props.maxcharacter && props.maxcharacter > 0 && !Number.isNaN(props.maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, props.maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        setInnerValue(characters);\n        textareaLength.value = length;\n      } else {\n        setInnerValue(value);\n        textareaLength.value = String(innerValue.value).length;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n      adjustTextareaHeight();\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      textareaValueChangeHandle(e as InputEvent);\n    };\n\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    onMounted(() => {\n      if (props.autofocus) {\n        textareaRef.value?.focus();\n      }\n      adjustTextareaHeight();\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      labelContent,\n      innerValue,\n      textareaRef,\n      textareaStyle,\n      textareaClassNames,\n      textareaLength,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"componentName\">\n    <div v-if=\"labelContent\" :class=\"`${componentName}__name`\">\n      <t-node :content=\"labelContent\"></t-node>\n    </div>\n    <div :class=\"textareaClassNames\">\n      <textarea\n        ref=\"textareaRef\"\n        :value=\"innerValue\"\n        :style=\"textareaStyle\"\n        :name=\"name\"\n        :maxlength=\"maxlength || -1\"\n        :disabled=\"disabled\"\n        :placeholder=\"placeholder\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @input=\"handleInput\"\n        @compositionend=\"handleCompositionend\"\n      />\n      <div v-if=\"maxcharacter || maxlength\" :class=\"`${componentName}__count`\">\n        {{ `${textareaLength}/${maxcharacter || maxlength}` }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, ref, onMounted, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick } from 'vue';\nimport { useEmitEvent, renderTNode, TNode, getCharacterLength, useVModel } from '../shared';\nimport config from '../config';\nimport TextareaProps from './props';\nimport { TdTextareaProps, TextareaValue } from './type';\nimport calcTextareaHeight from '../_common/js/utils/calcTextareaHeight';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-textarea`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n  },\n  props: TextareaProps,\n  emits: ['update:value', 'update:modelValue', 'focus', 'blur', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const textareaRef = ref<null | HTMLElement>(null);\n    const textareaStyle = ref();\n    const textareaLength = ref(0);\n    const { value, modelValue } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const textareaClassNames = computed(() => [\n      `${componentName}__wrapper`,\n      {\n        [`${componentName}-is-disabled`]: props.disabled,\n      },\n    ]);\n    const internalInstance = getCurrentInstance();\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n\n    const setInputValue = (v: TextareaValue = '') => {\n      const input = textareaRef.value as HTMLTextAreaElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const adjustTextareaHeight = () => {\n      if (props.autosize === true) {\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement);\n      } else if (typeof props.autosize === 'object') {\n        const { minRows, maxRows } = props.autosize;\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement, minRows, maxRows);\n      } else if (context.attrs.rows) {\n        textareaStyle.value = { height: 'auto', minHeight: 'auto' };\n      }\n    };\n\n    const handleInput = (e: any) => {\n      if (e.isComposing || e.inputType === 'insertCompositionText') return;\n      textareaValueChangeHandle(e);\n    };\n\n    const textareaValueChangeHandle = (e: InputEvent) => {\n      const { target } = e;\n      const { value } = target as HTMLInputElement;\n      if (props.maxcharacter && props.maxcharacter > 0 && !Number.isNaN(props.maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, props.maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        setInnerValue(characters);\n        textareaLength.value = length;\n      } else {\n        setInnerValue(value);\n        textareaLength.value = String(innerValue.value).length;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n      adjustTextareaHeight();\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      textareaValueChangeHandle(e as InputEvent);\n    };\n\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    onMounted(() => {\n      if (props.autofocus) {\n        textareaRef.value?.focus();\n      }\n      adjustTextareaHeight();\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      labelContent,\n      innerValue,\n      textareaRef,\n      textareaStyle,\n      textareaClassNames,\n      textareaLength,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","componentName","defineComponent","name","components","TNode","props","TextareaProps","emits","setup","context","emitEvent","useEmitEvent","emit","textareaRef","ref","textareaStyle","textareaLength","toRefs","value","modelValue","useVModel","defaultValue","onChange","innerValue","setInnerValue","textareaClassNames","computed","disabled","internalInstance","getCurrentInstance","labelContent","renderTNode","setInputValue","v","input","sV","String","adjustTextareaHeight","autosize","calcTextareaHeight","minRows","maxRows","attrs","rows","height","minHeight","handleInput","e","isComposing","inputType","textareaValueChangeHandle","target","maxcharacter","Number","isNaN","getCharacterLength","length","characters","nextTick","handleCompositionend","handleFocus","handleBlur","onMounted","autofocus","focus","_createElementBlock","class","_ctx","_createVNode","_component_t_node","content","_createElementVNode","style","maxlength","placeholder","onFocus","onBlur","onInput","onCompositionend"],"mappings":"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"}