/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import { defineComponent, computed, getCurrentInstance, ref, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createVNode } from 'vue';
import { templateRef, useElementBounding } from '@vueuse/core';
import props from './props.js';
import config from '../config.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderContent } from '../shared/render.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

var name = "".concat(config.prefix, "-sticky");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: props,
  setup: function setup(props2, context) {
    var boxClasses = name;
    var stickyContent = computed(function () {
      return renderContent(getCurrentInstance(), "default", "");
    });
    var emitEvent = useEmitEvent(props2, context.emit);
    var boxRef = templateRef("boxRef");
    var _useElementBounding = useElementBounding(boxRef),
      boxTop = _useElementBounding.top;
    var contentRef = templateRef("contentRef");
    var _useElementBounding2 = useElementBounding(contentRef),
      contentTop = _useElementBounding2.top,
      height = _useElementBounding2.height;
    var boxStyles = computed(function () {
      return "height:".concat(height.value, "px;");
    });
    var container;
    var containerHeight = ref(0);
    var containerTop = ref(0);
    watch(boxTop, function () {
      if (props2.container) {
        container = document.querySelector(props2.container);
        var _container$getBoundin = container.getBoundingClientRect(),
          top = _container$getBoundin.top,
          height2 = _container$getBoundin.height;
        containerHeight.value = height2;
        containerTop.value = top;
      }
    });
    var contentStyles = computed(function () {
      var styleStr = "z-index:".concat(props2.zIndex, ";");
      var isFixed = false;
      if (props2.disabled) return styleStr;
      var offsetTop = Number(props2.offsetTop);
      if (container) {
        if (containerHeight.value + containerTop.value < offsetTop + height.value) {
          styleStr += "transform:translate3d(0, ".concat(containerHeight.value - height.value, "px, 0);");
        } else if (boxTop.value <= offsetTop) {
          styleStr += "position:fixed;top:".concat(offsetTop, "px;");
          isFixed = true;
        }
      } else if (boxTop.value <= offsetTop) {
        styleStr += "position:fixed;top:".concat(offsetTop, "px;");
        isFixed = true;
      }
      emitEvent("scroll", {
        scrollTop: contentTop.value,
        isFixed: isFixed
      });
      return styleStr;
    });
    return {
      boxClasses: boxClasses,
      boxStyles: boxStyles,
      contentStyles: contentStyles,
      stickyContent: stickyContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    ref: "boxRef",
    class: normalizeClass(_ctx.boxClasses),
    style: normalizeStyle(_ctx.boxStyles)
  }, [createElementVNode("div", {
    ref: "contentRef",
    class: normalizeClass("".concat(_ctx.boxClasses, "__content")),
    style: normalizeStyle(_ctx.contentStyles)
  }, [createVNode(_component_t_node, {
    content: _ctx.stickyContent
  }, null, 8, ["content"])], 6)], 6);
}

script.render = render;

export { script as default };
//# sourceMappingURL=sticky.js.map
