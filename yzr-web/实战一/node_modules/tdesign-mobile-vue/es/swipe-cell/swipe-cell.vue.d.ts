import { SwipeActionItem } from './type';
export interface SwipeInitData {
    moving: boolean;
    leftWidth: number;
    rightWidth: number;
    pos: number;
    status: 'open' | 'close';
}
declare const _default: import("vue").DefineComponent<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<"left" | "right" | undefined>;
        validator(val: "left" | "right" | undefined): boolean;
    };
    left: {
        type: import("vue").PropType<SwipeActionItem[] | undefined>;
    };
    right: {
        type: import("vue").PropType<SwipeActionItem[] | undefined>;
    };
    onChange: import("vue").PropType<((value: string) => void) | undefined>;
    onClick: import("vue").PropType<((context: import("./type").SwipeActionClickContext) => void) | undefined>;
}, {
    swipeContent: import("vue").ComputedRef<any>;
    swipeLeftMenu: import("vue").ComputedRef<any>;
    swipeRightMenu: import("vue").ComputedRef<any>;
    initData: SwipeInitData;
    classes: import("vue").ComputedRef<string[]>;
    swipeCell: import("vue").Ref<HTMLElement | undefined>;
    leftRef: import("vue").Ref<HTMLElement | undefined>;
    rightRef: import("vue").Ref<HTMLElement | undefined>;
    handleClickBtn: ({ action, source }: {
        action: SwipeActionItem;
        source: String;
    }) => void;
    end: () => void;
    content: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    default: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    left: import("vue").Ref<SwipeActionItem[] | undefined>;
    right: import("vue").Ref<SwipeActionItem[] | undefined>;
    disabled: import("vue").Ref<boolean>;
    expanded: import("vue").Ref<"left" | "right" | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "click" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<"left" | "right" | undefined>;
        validator(val: "left" | "right" | undefined): boolean;
    };
    left: {
        type: import("vue").PropType<SwipeActionItem[] | undefined>;
    };
    right: {
        type: import("vue").PropType<SwipeActionItem[] | undefined>;
    };
    onChange: import("vue").PropType<((value: string) => void) | undefined>;
    onClick: import("vue").PropType<((context: import("./type").SwipeActionClickContext) => void) | undefined>;
}>>, {
    disabled: boolean;
}>;
export default _default;
