{"version":3,"file":"swipe-cell.js","sources":["../../src/swipe-cell/swipe-cell.vue","../../src/swipe-cell/swipe-cell.vue?vue&type=template&id=ac4d8054&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\" @touchend=\"end\" @touchcancel=\"end\" @mouseup=\"end\">\n    <div\n      :class=\"{ [classes + '__wrapper']: true, moving: initData.moving }\"\n      :style=\"{ transform: `translate3d(${initData.pos}px,0,0)` }\"\n    >\n      <div\n        ref=\"leftRef\"\n        :class=\"classes + '__left'\"\n        :style=\"{ width: initData.leftWidth ? `${initData.leftWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeLeftMenu\"></t-node>\n        <template v-for=\"(btn, index) of left\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'left',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n      <div ref=\"swipeCell\" :class=\"classes + '__content'\">\n        <t-node :content=\"swipeContent\"></t-node>\n      </div>\n      <div\n        ref=\"rightRef\"\n        :class=\"classes + '__right'\"\n        :style=\"{ width: initData.rightWidth ? `${initData.rightWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeRightMenu\"></t-node>\n        <template v-for=\"(btn, index) of right\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'right',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { onClickOutside, useSwipe } from '@vueuse/core';\nimport {\n  ref,\n  watch,\n  toRefs,\n  reactive,\n  computed,\n  onMounted,\n  SetupContext,\n  defineComponent,\n  getCurrentInstance,\n} from 'vue';\nimport props from './props';\nimport config from '../config';\nimport TButton from '../button';\nimport { SwipeActionItem } from './type';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-swipe-cell`;\n\nexport interface SwipeInitData {\n  moving: boolean;\n  leftWidth: number;\n  rightWidth: number;\n  pos: number;\n  status: 'open' | 'close';\n}\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const swipeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const swipeLeftMenu = computed(() => renderTNode(internalInstance, 'left'));\n    const swipeRightMenu = computed(() => renderTNode(internalInstance, 'right'));\n    const leftRef = ref<HTMLElement>();\n    const rightRef = ref<HTMLElement>();\n    const swipeCell = ref<HTMLElement>();\n    const { lengthX } = useSwipe(swipeCell, {\n      threshold: 0,\n      onSwipeStart: (e: TouchEvent) => {\n        initData.moving = true;\n        initData.pos = 0;\n      },\n      onSwipe: (e: TouchEvent) => {\n        if (props.disabled) {\n          return;\n        }\n        if (initData.moving && initData.status === 'close') {\n          initData.moving = false;\n        }\n        let pos = 0;\n        if (lengthX.value < 0) {\n          if (initData.leftWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.min(Math.abs(lengthX.value), initData.leftWidth > 0 ? initData.leftWidth + spring : 0);\n        } else {\n          if (initData.rightWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.max(-lengthX.value, -(initData.rightWidth > 0 ? initData.rightWidth + spring : 0));\n        }\n        if (initData.status === 'close') {\n          initData.pos = pos;\n        }\n      },\n      onSwipeEnd: (e: TouchEvent) => {\n        end();\n      },\n    });\n    const distance = 0; // distance 滑动多少距离后开始显示菜\n    const autoBack = true; // autoBack 点击菜单后是否收回菜\n    const threshold = 0.5; // threshold 滑动宽度的百分之多少自动打开菜单，否则收回\n    const spring = 0; // 回弹距离\n    const initData: SwipeInitData = reactive({\n      moving: false,\n      leftWidth: 0, // 左边菜单的宽度\n      rightWidth: 0, // 右边菜单的宽度\n      pos: 0, // 移动的距离\n      status: 'close', // 菜单的状态，默认close\n    });\n    const classes = computed(() => [`${name}`]);\n    onMounted(() => {\n      const leftWidth = leftRef.value?.clientWidth as number;\n      const rightWidth = rightRef.value?.clientWidth as number;\n      initData.leftWidth = leftWidth > 0 ? leftWidth + distance : 0;\n      initData.rightWidth = rightWidth > 0 ? rightWidth + distance : 0;\n      renderMenuStatus();\n    });\n    watch(\n      () => props.expanded,\n      () => renderMenuStatus(),\n    );\n    onClickOutside(swipeCell, (event) => {\n      close();\n    });\n    const renderMenuStatus = () => {\n      if (props.expanded && props.expanded === 'left') {\n        if (initData.leftWidth) {\n          open('toRight');\n        }\n      }\n      if (props.expanded && props.expanded === 'right') {\n        if (initData.rightWidth) {\n          open('toLeft');\n        }\n      }\n    };\n    const end = () => {\n      if (props.disabled) {\n        return;\n      }\n      if (lengthX.value < 0 && initData.pos > initData.leftWidth * threshold) {\n        open('toRight');\n      } else if (lengthX.value > 0 && -initData.pos > initData.rightWidth * threshold) {\n        open('toLeft');\n      } else {\n        close('force');\n      }\n    };\n    const open = (direction: 'toRight' | 'toLeft') => {\n      if (initData.status === 'open') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'open';\n      if (direction === 'toLeft') {\n        initData.pos = -initData.rightWidth;\n        if (initData.rightWidth) {\n          emitEvent('change', 'right');\n        }\n      } else {\n        initData.pos = initData.leftWidth;\n        if (initData.leftWidth) {\n          emitEvent('change', 'left');\n        }\n      }\n    };\n    const close = (type?: string) => {\n      if (initData.status === 'close' && type !== 'force') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'close';\n      initData.pos = 0;\n      emitEvent('change', undefined);\n    };\n    const handleClickBtn = ({ action, source }: { action: SwipeActionItem; source: String }) => {\n      if (autoBack) {\n        close();\n      }\n      if (action.onClick) {\n        action.onClick();\n        return;\n      }\n      emitEvent('click', { action, source });\n    };\n    return {\n      ...toRefs(props),\n      swipeContent,\n      swipeLeftMenu,\n      swipeRightMenu,\n      initData,\n      classes,\n      swipeCell,\n      leftRef,\n      rightRef,\n      handleClickBtn,\n      end,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\" @touchend=\"end\" @touchcancel=\"end\" @mouseup=\"end\">\n    <div\n      :class=\"{ [classes + '__wrapper']: true, moving: initData.moving }\"\n      :style=\"{ transform: `translate3d(${initData.pos}px,0,0)` }\"\n    >\n      <div\n        ref=\"leftRef\"\n        :class=\"classes + '__left'\"\n        :style=\"{ width: initData.leftWidth ? `${initData.leftWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeLeftMenu\"></t-node>\n        <template v-for=\"(btn, index) of left\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'left',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n      <div ref=\"swipeCell\" :class=\"classes + '__content'\">\n        <t-node :content=\"swipeContent\"></t-node>\n      </div>\n      <div\n        ref=\"rightRef\"\n        :class=\"classes + '__right'\"\n        :style=\"{ width: initData.rightWidth ? `${initData.rightWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeRightMenu\"></t-node>\n        <template v-for=\"(btn, index) of right\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'right',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { onClickOutside, useSwipe } from '@vueuse/core';\nimport {\n  ref,\n  watch,\n  toRefs,\n  reactive,\n  computed,\n  onMounted,\n  SetupContext,\n  defineComponent,\n  getCurrentInstance,\n} from 'vue';\nimport props from './props';\nimport config from '../config';\nimport TButton from '../button';\nimport { SwipeActionItem } from './type';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-swipe-cell`;\n\nexport interface SwipeInitData {\n  moving: boolean;\n  leftWidth: number;\n  rightWidth: number;\n  pos: number;\n  status: 'open' | 'close';\n}\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const swipeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const swipeLeftMenu = computed(() => renderTNode(internalInstance, 'left'));\n    const swipeRightMenu = computed(() => renderTNode(internalInstance, 'right'));\n    const leftRef = ref<HTMLElement>();\n    const rightRef = ref<HTMLElement>();\n    const swipeCell = ref<HTMLElement>();\n    const { lengthX } = useSwipe(swipeCell, {\n      threshold: 0,\n      onSwipeStart: (e: TouchEvent) => {\n        initData.moving = true;\n        initData.pos = 0;\n      },\n      onSwipe: (e: TouchEvent) => {\n        if (props.disabled) {\n          return;\n        }\n        if (initData.moving && initData.status === 'close') {\n          initData.moving = false;\n        }\n        let pos = 0;\n        if (lengthX.value < 0) {\n          if (initData.leftWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.min(Math.abs(lengthX.value), initData.leftWidth > 0 ? initData.leftWidth + spring : 0);\n        } else {\n          if (initData.rightWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.max(-lengthX.value, -(initData.rightWidth > 0 ? initData.rightWidth + spring : 0));\n        }\n        if (initData.status === 'close') {\n          initData.pos = pos;\n        }\n      },\n      onSwipeEnd: (e: TouchEvent) => {\n        end();\n      },\n    });\n    const distance = 0; // distance 滑动多少距离后开始显示菜\n    const autoBack = true; // autoBack 点击菜单后是否收回菜\n    const threshold = 0.5; // threshold 滑动宽度的百分之多少自动打开菜单，否则收回\n    const spring = 0; // 回弹距离\n    const initData: SwipeInitData = reactive({\n      moving: false,\n      leftWidth: 0, // 左边菜单的宽度\n      rightWidth: 0, // 右边菜单的宽度\n      pos: 0, // 移动的距离\n      status: 'close', // 菜单的状态，默认close\n    });\n    const classes = computed(() => [`${name}`]);\n    onMounted(() => {\n      const leftWidth = leftRef.value?.clientWidth as number;\n      const rightWidth = rightRef.value?.clientWidth as number;\n      initData.leftWidth = leftWidth > 0 ? leftWidth + distance : 0;\n      initData.rightWidth = rightWidth > 0 ? rightWidth + distance : 0;\n      renderMenuStatus();\n    });\n    watch(\n      () => props.expanded,\n      () => renderMenuStatus(),\n    );\n    onClickOutside(swipeCell, (event) => {\n      close();\n    });\n    const renderMenuStatus = () => {\n      if (props.expanded && props.expanded === 'left') {\n        if (initData.leftWidth) {\n          open('toRight');\n        }\n      }\n      if (props.expanded && props.expanded === 'right') {\n        if (initData.rightWidth) {\n          open('toLeft');\n        }\n      }\n    };\n    const end = () => {\n      if (props.disabled) {\n        return;\n      }\n      if (lengthX.value < 0 && initData.pos > initData.leftWidth * threshold) {\n        open('toRight');\n      } else if (lengthX.value > 0 && -initData.pos > initData.rightWidth * threshold) {\n        open('toLeft');\n      } else {\n        close('force');\n      }\n    };\n    const open = (direction: 'toRight' | 'toLeft') => {\n      if (initData.status === 'open') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'open';\n      if (direction === 'toLeft') {\n        initData.pos = -initData.rightWidth;\n        if (initData.rightWidth) {\n          emitEvent('change', 'right');\n        }\n      } else {\n        initData.pos = initData.leftWidth;\n        if (initData.leftWidth) {\n          emitEvent('change', 'left');\n        }\n      }\n    };\n    const close = (type?: string) => {\n      if (initData.status === 'close' && type !== 'force') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'close';\n      initData.pos = 0;\n      emitEvent('change', undefined);\n    };\n    const handleClickBtn = ({ action, source }: { action: SwipeActionItem; source: String }) => {\n      if (autoBack) {\n        close();\n      }\n      if (action.onClick) {\n        action.onClick();\n        return;\n      }\n      emitEvent('click', { action, source });\n    };\n    return {\n      ...toRefs(props),\n      swipeContent,\n      swipeLeftMenu,\n      swipeRightMenu,\n      initData,\n      classes,\n      swipeCell,\n      leftRef,\n      rightRef,\n      handleClickBtn,\n      end,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TNode","TButton","props","emits","setup","context","emitEvent","useEmitEvent","emit","internalInstance","getCurrentInstance","swipeContent","computed","renderContent","swipeLeftMenu","renderTNode","swipeRightMenu","leftRef","ref","rightRef","swipeCell","useSwipe","threshold","onSwipeStart","e","initData","moving","pos","onSwipe","disabled","status","lengthX","value","leftWidth","Math","min","abs","spring","rightWidth","max","onSwipeEnd","end","distance","autoBack","reactive","classes","onMounted","clientWidth","renderMenuStatus","watch","expanded","onClickOutside","event","close","open","direction","type","handleClickBtn","action","source","onClick","toRefs","_createElementBlock","class","_ctx","onTouchend","onTouchcancel","onMouseup","_createElementVNode","_normalizeClass","style","_normalizeStyle","transform","_createVNode","_component_t_node","content","_openBlock","_Fragment","_renderList","left","btn","index","_createBlock","_component_t_button","className","$event","_createTextVNode","_toDisplayString","text","right"],"mappings":"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"}