/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createApp } from 'vue';
import script from './toast.js';
import './style/css.js';
import './type.js';
import 'tdesign-icons-vue-next';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../config.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import './props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var instance = null;
var app;
function Toast(props) {
  var root = document.createElement("div");
  document.body.appendChild(root);
  var propsObject = _objectSpread({
    duration: 2e3
  }, parseOptions(props));
  if (instance) {
    instance.clear();
  }
  instance = script;
  instance.clear = function () {
    clearTimeout(instance.timer);
    app.unmount();
    root.remove();
  };
  if (propsObject.duration && propsObject.duration > 0) {
    instance.timer = setTimeout(instance.clear, propsObject.duration);
  }
  app = createApp(instance, _objectSpread({}, propsObject));
  app.mount(root);
  return instance;
}
Toast.clear = function () {
  if (instance) {
    instance.clear();
  }
};
["loading", "success", "fail"].forEach(function (type) {
  if (!type) {
    return;
  }
  Toast[type] = function (options) {
    var props = {
      message: "",
      theme: type
    };
    if (typeof options === "string") {
      props.message = options;
    } else {
      props = _objectSpread(_objectSpread({}, props), options);
    }
    return Toast(props);
  };
});
function parseOptions(message) {
  if (typeof message === "string") {
    return {
      message: message
    };
  }
  return message;
}
Toast.install = function (app2) {
  app2.config.globalProperties.$toast = Toast;
};
var ToastPlugin = Toast;

export { ToastPlugin, ToastPlugin as default };
//# sourceMappingURL=index.js.map
