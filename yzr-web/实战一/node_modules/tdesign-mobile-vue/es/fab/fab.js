/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, getCurrentInstance, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createCommentVNode, createElementBlock, normalizeClass, toDisplayString } from 'vue';
import '../shared/index.js';
import props from './props.js';
import config from '../config.js';
import _Button from '../button/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '../button/button.js';
import 'tdesign-icons-vue-next';
import '../button/props.js';
import './style/css.js';
import '../button/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-fab");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent,
    TButton: _Button
  },
  props: props,
  emits: ["click"],
  setup: function setup(props2, context) {
    var emitEvent = useEmitEvent(props2, context.emit);
    var classes = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name), true), _defineProperty(_ref, "".concat(name, "--icononly"), props2.icon && !props2.text), _ref;
    });
    var onClick = function onClick(e) {
      return emitEvent("click", {
        e: e
      });
    };
    var baseButtonProps = {
      size: "middle",
      shape: "round",
      theme: "primary"
    };
    var customButtonProps = computed(function () {
      return _objectSpread(_objectSpread({}, baseButtonProps), props2.buttonProps);
    });
    var internalInstance = getCurrentInstance();
    var iconTNode = computed(function () {
      return renderTNode(internalInstance, "icon");
    });
    return {
      name: name,
      classes: classes,
      iconTNode: iconTNode,
      customButtonProps: customButtonProps,
      onClick: onClick
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_t_button = resolveComponent("t-button");
  return openBlock(), createBlock(_component_t_button, mergeProps(_ctx.customButtonProps, {
    class: _ctx.classes,
    style: _ctx.style,
    onClick: _ctx.onClick
  }), {
    default: withCtx(function () {
      return [_ctx.iconTNode ? (openBlock(), createBlock(_component_t_node, {
        key: 0,
        content: _ctx.iconTNode
      }, null, 8, ["content"])) : createCommentVNode("", true), _ctx.text ? (openBlock(), createElementBlock("span", {
        key: 1,
        class: normalizeClass("".concat(_ctx.name, "__text"))
      }, toDisplayString(_ctx.text), 3)) : createCommentVNode("", true)];
    }),
    _: 1
  }, 16, ["class", "style", "onClick"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=fab.js.map
