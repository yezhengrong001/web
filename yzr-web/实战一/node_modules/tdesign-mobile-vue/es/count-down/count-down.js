/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, computed, resolveComponent, openBlock, createElementBlock, Fragment, createBlock, createCommentVNode, createElementVNode, normalizeClass, renderList, toDisplayString } from 'vue';
import config from '../config.js';
import CountDownProps from './props.js';
import { useCountDown } from '../shared/useCountDown/index.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-countdown");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: _objectSpread({}, CountDownProps),
  setup: function setup(props) {
    var _ref, _ref$test;
    var _useCountDown = useCountDown(props),
      time = _useCountDown.time,
      showTimes = _useCountDown.showTimes;
    var internalInstance = getCurrentInstance();
    var hasChinese = (_ref = /.*[\u4e00-\u9fa5]+.*$/) === null || _ref === void 0 ? void 0 : (_ref$test = _ref.test) === null || _ref$test === void 0 ? void 0 : _ref$test.call(_ref, props === null || props === void 0 ? void 0 : props.format);
    var contentLayout = computed(function () {
      return renderTNode(internalInstance, "content");
    });
    return {
      name: name,
      time: time,
      showTimes: showTimes,
      hasChinese: hasChinese,
      contentLayout: contentLayout
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock(Fragment, null, [!_ctx.time ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.contentLayout
  }, null, 8, ["content"])) : createCommentVNode("", true), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, " ").concat(_ctx.name, "--").concat(_ctx.theme, " ").concat(_ctx.name, "--").concat(_ctx.size, " ").concat(!_ctx.hasChinese ? "" : "".concat(_ctx.name, "--split-with-unit")))
  }, [_ctx.time ? (openBlock(true), createElementBlock(Fragment, {
    key: 0
  }, renderList(_ctx.showTimes, function (item) {
    return openBlock(), createElementBlock(Fragment, {
      key: item.mark
    }, [createElementVNode("span", {
      class: normalizeClass("".concat(_ctx.name, "__digit"))
    }, toDisplayString(item.value), 3), item.mark ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: normalizeClass("".concat(_ctx.name, "__unit"))
    }, toDisplayString(item.mark), 3)) : createCommentVNode("", true)], 64);
  }), 128)) : createCommentVNode("", true)], 2)], 64);
}

script.render = render;

export { script as default };
//# sourceMappingURL=count-down.js.map
