export interface TouchData {
    startValue: number;
    newValue: number;
    startX: number;
    deltaX: number;
    offsetX: number;
}
declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start" | undefined;
        }) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks | undefined>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    showExtremeValue: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    value: {
        type: import("vue").PropType<import("./type").SliderValue | undefined>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SliderValue | undefined>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SliderValue | undefined>;
    };
    onChange: import("vue").PropType<((value: import("./type").SliderValue) => void) | undefined>;
    onDragend: import("vue").PropType<(() => void) | undefined>;
    onDragstart: import("vue").PropType<(() => void) | undefined>;
}, {
    max: import("vue").Ref<number>;
    min: import("vue").Ref<number>;
    name: import("vue").Ref<string>;
    marksData: import("vue").ComputedRef<any[][]>;
    rootRef: import("vue").Ref<HTMLElement | null>;
    barRef: import("vue").Ref<HTMLElement | null>;
    dots: import("vue").ComputedRef<import("./type").SliderValue | undefined>;
    value: import("vue").Ref<import("./type").SliderValue | undefined>;
    labelContent: import("vue").ComputedRef<any>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean | number[] | import("./type").SliderMarks | undefined;
    })[]>;
    handleClass: import("vue").ComputedRef<string[]>;
    trackStyle: import("vue").ComputedRef<{
        left: string;
        width: string;
    } | {
        width: string;
        left?: undefined;
    } | {
        left?: undefined;
        width?: undefined;
    }>;
    getPercentage: (value: number | undefined) => number;
    onTouchStart: (event: TouchEvent, value: number) => void;
    onTouchMove: (event: TouchEvent, index: number) => void;
    onTouchEnd: (event: TouchEvent, index: number) => void;
    onClick: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "change" | "drag-start" | "drag-end", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start" | undefined;
        }) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks | undefined>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    showExtremeValue: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    value: {
        type: import("vue").PropType<import("./type").SliderValue | undefined>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SliderValue | undefined>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SliderValue | undefined>;
    };
    onChange: import("vue").PropType<((value: import("./type").SliderValue) => void) | undefined>;
    onDragend: import("vue").PropType<(() => void) | undefined>;
    onDragstart: import("vue").PropType<(() => void) | undefined>;
}>>, {
    label: string | boolean | ((h: typeof import("vue").h, props: {
        value: import("./type").SliderValue;
        position?: "end" | "start" | undefined;
    }) => import("../common").SlotReturnValue) | undefined;
    disabled: boolean;
    max: number;
    range: boolean;
    min: number;
    showExtremeValue: boolean;
    step: number;
}>;
export default _default;
