import { TdUploadProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: PropType<((file: File | import("./type").UploadFile) => boolean | Promise<boolean>) | undefined>;
    };
    data: {
        type: PropType<Record<string, any> | ((file: File) => Record<string, any>) | undefined>;
    };
    deleteBtn: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    fileListDisplay: {
        type: PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    files: {
        type: PropType<import("./type").UploadFile[] | undefined>;
    };
    defaultFiles: {
        type: PropType<import("./type").UploadFile[] | undefined>;
    };
    format: {
        type: PropType<((file: File) => import("./type").UploadFile) | undefined>;
    };
    formatResponse: {
        type: PropType<((response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType) | undefined>;
    };
    gridConfig: {
        type: PropType<{
            column?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
        } | undefined>;
    };
    headers: {
        type: PropType<{
            [key: string]: string;
        } | undefined>;
    };
    imageProps: {
        type: PropType<import("../image").TdImageProps | undefined>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: PropType<"option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined>;
        default: "option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined;
        validator(val: TdUploadProps['method']): boolean;
    };
    multiple: BooleanConstructor;
    requestMethod: {
        type: PropType<((files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>) | undefined>;
    };
    sizeLimit: {
        type: PropType<number | import("./type").SizeLimitObj | undefined>;
    };
    trigger: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue) | undefined>;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: PropType<(() => void) | undefined>;
    onChange: PropType<((value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void) | undefined>;
    onFail: PropType<((options: {
        e: ProgressEvent<EventTarget>;
        file: import("./type").UploadFile;
    }) => void) | undefined>;
    onPreview: PropType<((options: {
        file: import("./type").UploadFile;
        e: MouseEvent;
    }) => void) | undefined>;
    onProgress: PropType<((options: import("./type").ProgressContext) => void) | undefined>;
    onRemove: PropType<((context: import("./type").UploadRemoveContext) => void) | undefined>;
    onSelectChange: PropType<((files: import("./type").UploadFile[]) => void) | undefined>;
    onSuccess: PropType<((context: import("./type").SuccessContext) => void) | undefined>;
};
export default _default;
