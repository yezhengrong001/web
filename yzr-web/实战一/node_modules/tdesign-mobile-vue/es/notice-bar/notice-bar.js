/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { h, defineComponent, getCurrentInstance, reactive, computed, ref, watchEffect, toRefs, onMounted, nextTick, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, createCommentVNode, normalizeStyle, createBlock, createTextVNode, toDisplayString, withModifiers } from 'vue';
import { InfoCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-vue-next';
import NoticeBarProps from './props.js';
import config from '../config.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { renderTNode } from '../shared/render.js';
import { useVModel } from '../shared/useVModel/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-notice-bar");
var iconDefault = {
  info: h(InfoCircleFilledIcon),
  success: h(CheckCircleFilledIcon),
  warning: h(InfoCircleFilledIcon),
  error: h(CloseCircleFilledIcon)
};
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: NoticeBarProps,
  emits: ["click", "change"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var internalInstance = getCurrentInstance();
    var state = reactive({
      duration: 0,
      offset: 0,
      listWidth: 0,
      itemWidth: 0,
      timer: null,
      nextTimer: null,
      scroll: {
        marquee: false,
        speed: 50,
        loop: -1,
        delay: 0
      }
    });
    var rootClasses = computed(function () {
      return ["".concat(name), "".concat(name, "--").concat(props.theme)];
    });
    var computedPrefixIcon = ref();
    watchEffect(function () {
      if (!props.prefixIcon && !context.slots.prefixIcon) {
        var key = props.theme;
        computedPrefixIcon.value = (iconDefault === null || iconDefault === void 0 ? void 0 : iconDefault[key]) || "";
      } else {
        computedPrefixIcon.value = renderTNode(internalInstance, "prefixIcon");
      }
    });
    var computedSuffixIcon = computed(function () {
      return renderTNode(internalInstance, "suffixIcon");
    });
    var showExtraText = computed(function () {
      return renderTNode(internalInstance, "extra");
    });
    var showContent = computed(function () {
      return renderTNode(internalInstance, "content");
    });
    function handleClick(trigger) {
      emitEvent("click", trigger);
    }
    var animateStyle = computed(function () {
      return {
        transform: state.offset ? "translateX(".concat(state.offset, "px)") : "",
        transitionDuration: "".concat(state.duration, "s"),
        transitionTimingFunction: "linear"
      };
    });
    var listDOM = ref();
    var itemDOM = ref();
    var _toRefs = toRefs(props),
      visible = _toRefs.visible,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(visible, modelValue, props.defaultVisible, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      isShow = _useVModel2[0],
      setStatusValue = _useVModel2[1];
    function handleScrolling() {
      var _props$marquee, _marquee$speed, _marquee$delay;
      if (!(props !== null && props !== void 0 && props.marquee) || (props === null || props === void 0 ? void 0 : (_props$marquee = props.marquee) === null || _props$marquee === void 0 ? void 0 : _props$marquee.loop) === 0) {
        return;
      }
      if (typeof props.marquee === "boolean") {
        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {
          marquee: props.marquee
        });
      }
      var marquee = props.marquee;
      state.scroll = {
        marquee: true,
        loop: typeof (marquee === null || marquee === void 0 ? void 0 : marquee.loop) === "undefined" ? state.scroll.loop : marquee.loop,
        speed: (_marquee$speed = marquee.speed) !== null && _marquee$speed !== void 0 ? _marquee$speed : state.scroll.speed,
        delay: (_marquee$delay = marquee.delay) !== null && _marquee$delay !== void 0 ? _marquee$delay : state.scroll.delay
      };
      setTimeout(function () {
        var _listDOM$value, _itemDOM$value;
        var listDOMWidth = (_listDOM$value = listDOM.value) === null || _listDOM$value === void 0 ? void 0 : _listDOM$value.getBoundingClientRect().width;
        var itemDOMWidth = (_itemDOM$value = itemDOM.value) === null || _itemDOM$value === void 0 ? void 0 : _itemDOM$value.getBoundingClientRect().width;
        if (itemDOMWidth > listDOMWidth) {
          state.offset = -itemDOMWidth;
          state.duration = itemDOMWidth / state.scroll.speed;
          state.listWidth = listDOMWidth;
          state.itemWidth = itemDOMWidth;
        }
      }, state.scroll.delay);
    }
    function handleTransitionend() {
      state.scroll.loop = --state.scroll.loop;
      if (state.scroll.loop === 0) {
        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {
          marquee: false
        });
        return;
      }
      state.offset = state.listWidth;
      state.duration = 0;
      setTimeout(function () {
        state.offset = -state.itemWidth;
        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;
      }, 0);
    }
    onMounted(function () {
      nextTick(function () {
        if (isShow.value) {
          handleScrolling();
        }
      });
    });
    watch(function () {
      return isShow.value;
    }, function () {
      emitEvent("change", isShow.value);
      nextTick(function () {
        if (isShow.value) {
          state.offset = state.listWidth;
          state.duration = 0;
          handleScrolling();
        }
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({
      name: name
    }, toRefs(props)), toRefs(state)), {}, {
      rootClasses: rootClasses,
      computedPrefixIcon: computedPrefixIcon,
      computedSuffixIcon: computedSuffixIcon,
      showExtraText: showExtraText,
      showContent: showContent,
      isShow: isShow,
      handleClick: handleClick,
      listDOM: listDOM,
      itemDOM: itemDOM,
      animateStyle: animateStyle,
      handleScrolling: handleScrolling,
      handleTransitionend: handleTransitionend
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return _ctx.isShow ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass(_ctx.rootClasses)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__inner"))
  }, [_ctx.computedPrefixIcon ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__hd")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick("prefix-icon");
    })
  }, [createVNode(_component_t_node, {
    content: _ctx.computedPrefixIcon
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__bd"))
  }, [createElementVNode("div", {
    ref: "listDOM",
    class: normalizeClass("".concat(_ctx.name, "__list ").concat(_ctx.scroll.marquee ? "".concat(_ctx.name, "__list--scrolling") : ""))
  }, [createElementVNode("div", {
    ref: "itemDOM",
    class: normalizeClass("".concat(_ctx.name, "__item ").concat(_ctx.showExtraText ? "".concat(_ctx.name, "__item-detail") : "")),
    style: normalizeStyle(_ctx.scroll.marquee ? _ctx.animateStyle : ""),
    onTransitionend: _cache[3] || (_cache[3] = function ($event) {
      return _ctx.handleTransitionend();
    })
  }, [createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__text")),
    onClick: _cache[2] || (_cache[2] = function () {
      return _ctx.handleClick("content");
    })
  }, [_ctx.showContent ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.showContent
  }, null, 8, ["content"])) : createCommentVNode("", true), createTextVNode(" " + toDisplayString(_ctx.content) + " ", 1), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__text-detail")),
    onClick: _cache[1] || (_cache[1] = withModifiers(function () {
      return _ctx.handleClick("extra");
    }, ["stop"]))
  }, [_ctx.showExtraText ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.showExtraText
  }, null, 8, ["content"])) : createCommentVNode("", true), createTextVNode(" " + toDisplayString(_ctx.extra), 1)], 2)], 2)], 38)], 2)], 2), _ctx.computedSuffixIcon !== void 0 ? (openBlock(), createElementBlock("div", {
    key: 1,
    class: normalizeClass("".concat(_ctx.name, "__ft")),
    onClick: _cache[4] || (_cache[4] = function () {
      return _ctx.handleClick("suffix-icon");
    })
  }, [createVNode(_component_t_node, {
    content: _ctx.computedSuffixIcon
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 2)], 2)) : createCommentVNode("", true);
}

script.render = render;

export { script as default };
//# sourceMappingURL=notice-bar.js.map
