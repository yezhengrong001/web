import { DrawerItem } from './type';
declare const _default: import("vue").DefineComponent<{
    items: {
        type: import("vue").PropType<DrawerItem[] | undefined>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right" | "top" | "bottom" | undefined>;
        default: "left" | "right" | "top" | "bottom" | undefined;
        validator(val: "left" | "right" | "top" | "bottom" | undefined): boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: import("vue").PropType<((context: import("./type").DrawerCloseContext) => void) | undefined>;
    onItemClick: import("vue").PropType<((index: number, item: DrawerItem, context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onOverlayClick: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
}, {
    items: import("vue").Ref<DrawerItem[] | undefined>;
    placement: import("vue").Ref<"left" | "right" | "top" | "bottom" | undefined>;
    showOverlay: import("vue").Ref<boolean>;
    zIndex: import("vue").Ref<number | undefined>;
    closeOnOverlayClick: import("vue").Ref<boolean>;
    open: import("vue").Ref<boolean>;
    dSideBarClassName: import("vue").ComputedRef<string>;
    dSideBarItemClassName: import("vue").ComputedRef<string>;
    dSideBarItemIconClassName: import("vue").ComputedRef<string>;
    dSideBarItemTitleClassName: import("vue").ComputedRef<string>;
    onItemClick: (index: number, item: DrawerItem, context: {
        e: MouseEvent;
    }) => void;
    onVisibleChange: (visible: boolean) => void;
    onClose: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:visible" | "itemClick" | "overlayClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: import("vue").PropType<DrawerItem[] | undefined>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right" | "top" | "bottom" | undefined>;
        default: "left" | "right" | "top" | "bottom" | undefined;
        validator(val: "left" | "right" | "top" | "bottom" | undefined): boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: import("vue").PropType<((context: import("./type").DrawerCloseContext) => void) | undefined>;
    onItemClick: import("vue").PropType<((index: number, item: DrawerItem, context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onOverlayClick: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
}>>, {
    placement: "left" | "right" | "top" | "bottom" | undefined;
    showOverlay: boolean;
    visible: boolean;
    closeOnOverlayClick: boolean;
}>;
export default _default;
