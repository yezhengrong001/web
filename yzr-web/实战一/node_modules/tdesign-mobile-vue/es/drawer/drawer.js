/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import { defineComponent, toRefs, ref, computed, watch, resolveComponent, openBlock, createBlock, withCtx, createElementVNode, normalizeClass, createElementBlock, Fragment, renderList, resolveDynamicComponent, createCommentVNode, toDisplayString } from 'vue';
import _Popup from '../popup/index.js';
import config from '../config.js';
import '../shared/index.js';
import DrawerProps from './props.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/defineProperty';
import '@babel/runtime/helpers/slicedToArray';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import './style/css.js';
import '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../popup/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-drawer");
var script = defineComponent({
  name: name,
  components: {
    TPopup: _Popup
  },
  props: DrawerProps,
  emits: ["update:visible", "itemClick", "overlayClick"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var _toRefs = toRefs(props),
      visible = _toRefs.visible,
      items = _toRefs.items,
      placement = _toRefs.placement,
      showOverlay = _toRefs.showOverlay,
      zIndex = _toRefs.zIndex,
      closeOnOverlayClick = _toRefs.closeOnOverlayClick;
    var open = ref(visible.value || false);
    var dSideBarClassName = computed(function () {
      return "".concat(name, "__sidebar");
    });
    var dSideBarItemClassName = computed(function () {
      return "".concat(name, "__sidebar-item");
    });
    var dSideBarItemIconClassName = computed(function () {
      return "".concat(name, "__sidebar-item-icon");
    });
    var dSideBarItemTitleClassName = computed(function () {
      return "".concat(name, "__sidebar-item-title");
    });
    watch(open, function () {
      emitEvent("update:visible", open.value);
    });
    watch(visible, function () {
      open.value = visible.value;
    });
    var onItemClick = function onItemClick(index, item, context2) {
      emitEvent("itemClick", index, item, context2);
    };
    var onVisibleChange = function onVisibleChange(visible2) {
      if (showOverlay.value) {
        emitEvent("overlayClick", {
          visible: visible2
        });
      }
    };
    var onClose = function onClose() {
      emitEvent("close", {
        trigger: "overlay"
      });
    };
    return {
      items: items,
      placement: placement,
      showOverlay: showOverlay,
      zIndex: zIndex,
      closeOnOverlayClick: closeOnOverlayClick,
      open: open,
      dSideBarClassName: dSideBarClassName,
      dSideBarItemClassName: dSideBarItemClassName,
      dSideBarItemIconClassName: dSideBarItemIconClassName,
      dSideBarItemTitleClassName: dSideBarItemTitleClassName,
      onItemClick: onItemClick,
      onVisibleChange: onVisibleChange,
      onClose: onClose
    };
  }
});

var _hoisted_1 = ["onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_popup = resolveComponent("t-popup");
  return openBlock(), createBlock(_component_t_popup, {
    modelValue: _ctx.open,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function ($event) {
      return _ctx.open = $event;
    }),
    placement: _ctx.placement,
    "show-overlay": _ctx.showOverlay,
    "z-index": _ctx.zIndex,
    "close-on-overlay-click": _ctx.closeOnOverlayClick,
    onVisibleChange: _ctx.onVisibleChange,
    onClose: _ctx.onClose
  }, {
    default: withCtx(function () {
      return [createElementVNode("div", {
        class: normalizeClass(_ctx.dSideBarClassName)
      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, function (item, index) {
        return openBlock(), createElementBlock("div", {
          key: item.title,
          class: normalizeClass(_ctx.dSideBarItemClassName),
          onClick: function onClick($event) {
            return _ctx.onItemClick(index, item, {
              e: $event
            });
          }
        }, [!!item.icon ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(_ctx.dSideBarItemIconClassName)
        }, [(openBlock(), createBlock(resolveDynamicComponent(item.icon)))], 2)) : createCommentVNode("", true), createElementVNode("div", {
          class: normalizeClass(_ctx.dSideBarItemTitleClassName)
        }, toDisplayString(item.title), 3)], 10, _hoisted_1);
      }), 128))], 2)];
    }),
    _: 1
  }, 8, ["modelValue", "placement", "show-overlay", "z-index", "close-on-overlay-click", "onVisibleChange", "onClose"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=drawer.js.map
