/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, provide, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createCommentVNode, renderSlot } from 'vue';
import '../shared/index.js';
import RadioGroupProps from '../radio/radio-group-props.js';
import script$1 from '../radio/radio.js';
import config from '../config.js';
import { useDefault } from '../shared/useDefault/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import 'tdesign-icons-vue-next';
import '../radio/props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var componentName = "".concat(prefix, "-radio-group");
var script = defineComponent({
  name: componentName,
  components: {
    Radio: script$1
  },
  props: RadioGroupProps,
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      groupValue = _useDefault2[0],
      setGroupValue = _useDefault2[1];
    var groupOptions = computed(function () {
      var _props$options;
      return (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.map(function (option) {
        var opt = option;
        if (typeof option === "string" || typeof option === "number") {
          opt = {
            value: option,
            label: option.toString()
          };
        }
        return opt;
      });
    });
    var handleRadioChange = function handleRadioChange(val, e) {
      setGroupValue(val, {
        e: e
      });
    };
    provide("rootGroupProps", props);
    provide("rootGroupValue", groupValue);
    provide("rootGroupChange", handleRadioChange);
    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {
      componentName: componentName,
      groupOptions: groupOptions
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_radio = resolveComponent("radio");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.componentName),
    role: "radiogroup"
  }, [_ctx.options ? (openBlock(true), createElementBlock(Fragment, {
    key: 0
  }, renderList(_ctx.groupOptions, function (opt, idx) {
    return openBlock(), createBlock(_component_radio, {
      key: "radio-group-options-".concat(idx, "-").concat(Math.random()),
      name: _ctx.name,
      checked: _ctx.value === opt.value,
      disabled: "disabled" in opt ? opt.disabled : _ctx.disabled,
      value: opt.value,
      label: opt.label
    }, null, 8, ["name", "checked", "disabled", "value", "label"]);
  }), 128)) : createCommentVNode("", true), !_ctx.options ? renderSlot(_ctx.$slots, "default", {
    key: 1
  }) : createCommentVNode("", true)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=radio-group.js.map
