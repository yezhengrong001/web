declare const _default: import("vue").DefineComponent<{
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: import("vue").PropType<string | number | undefined>;
        default: number;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: NumberConstructor;
    };
}, {
    refBar: import("vue").Ref<null>;
    state: {
        activeId: number | null;
        barRect: any;
        childCount: number;
    };
    styleBar: import("vue").ComputedRef<(string | {
        [x: string]: number | null;
    })[]>;
    styleBarItem: import("vue").ComputedRef<(item: any, idx: number) => (string | {
        [x: string]: any;
    })[]>;
    menuItems: any;
    menuTitles: import("vue").ComputedRef<any>;
    expandMenu: (item: any, idx: number) => void;
    duration: import("vue").Ref<string | number | undefined>;
    overlay: import("vue").Ref<boolean>;
    zIndex: import("vue").Ref<number | undefined>;
    activeColor: import("vue").Ref<string>;
    closeOnClickOverlay: import("vue").Ref<boolean>;
    name: import("vue").Ref<string>;
    classes: import("vue").ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: import("vue").PropType<string | number | undefined>;
        default: number;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: NumberConstructor;
    };
}>>, {
    duration: string | number | undefined;
    overlay: boolean;
    activeColor: string;
    closeOnClickOverlay: boolean;
}>;
export default _default;
