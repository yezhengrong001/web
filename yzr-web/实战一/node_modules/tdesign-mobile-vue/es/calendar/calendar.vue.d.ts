import { TDate } from './type';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "single" | "multiple" | "range" | undefined;
            visible: boolean;
            confirmBtn: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined;
            firstDayOfWeek: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            confirmBtn: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined>;
                default: string;
            };
            firstDayOfWeek: {
                type: NumberConstructor;
                default: number;
            };
            format: {
                type: import("vue").PropType<((day: TDate) => TDate) | undefined>;
            };
            maxDate: {
                type: import("vue").PropType<number | Date | undefined>;
            };
            minDate: {
                type: import("vue").PropType<number | Date | undefined>;
            };
            title: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
            };
            type: {
                type: import("vue").PropType<"single" | "multiple" | "range" | undefined>;
                default: "single" | "multiple" | "range" | undefined;
                validator(val: "single" | "multiple" | "range" | undefined): boolean;
            };
            value: {
                type: import("vue").PropType<number | Date | import("./type").TCalendarValue[] | undefined>;
            };
            visible: BooleanConstructor;
            onConfirm: import("vue").PropType<((value: Date) => void) | undefined>;
            onSelect: import("vue").PropType<((value: Date) => void) | undefined>;
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            onConfirm?: ((...args: any[]) => any) | undefined;
            "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "visible" | "confirmBtn" | "firstDayOfWeek">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "update:value" | "update:visible" | "select" | "confirm", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            confirmBtn: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined>;
                default: string;
            };
            firstDayOfWeek: {
                type: NumberConstructor;
                default: number;
            };
            format: {
                type: import("vue").PropType<((day: TDate) => TDate) | undefined>;
            };
            maxDate: {
                type: import("vue").PropType<number | Date | undefined>;
            };
            minDate: {
                type: import("vue").PropType<number | Date | undefined>;
            };
            title: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
            };
            type: {
                type: import("vue").PropType<"single" | "multiple" | "range" | undefined>;
                default: "single" | "multiple" | "range" | undefined;
                validator(val: "single" | "multiple" | "range" | undefined): boolean;
            };
            value: {
                type: import("vue").PropType<number | Date | import("./type").TCalendarValue[] | undefined>;
            };
            visible: BooleanConstructor;
            onConfirm: import("vue").PropType<((value: Date) => void) | undefined>;
            onSelect: import("vue").PropType<((value: Date) => void) | undefined>;
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            onConfirm?: ((...args: any[]) => any) | undefined;
            "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "update:visible" | "select" | "confirm")[], string, {
            type: "single" | "multiple" | "range" | undefined;
            visible: boolean;
            confirmBtn: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined;
            firstDayOfWeek: number;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        confirmBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined>;
            default: string;
        };
        firstDayOfWeek: {
            type: NumberConstructor;
            default: number;
        };
        format: {
            type: import("vue").PropType<((day: TDate) => TDate) | undefined>;
        };
        maxDate: {
            type: import("vue").PropType<number | Date | undefined>;
        };
        minDate: {
            type: import("vue").PropType<number | Date | undefined>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        };
        type: {
            type: import("vue").PropType<"single" | "multiple" | "range" | undefined>;
            default: "single" | "multiple" | "range" | undefined;
            validator(val: "single" | "multiple" | "range" | undefined): boolean;
        };
        value: {
            type: import("vue").PropType<number | Date | import("./type").TCalendarValue[] | undefined>;
        };
        visible: BooleanConstructor;
        onConfirm: import("vue").PropType<((value: Date) => void) | undefined>;
        onSelect: import("vue").PropType<((value: Date) => void) | undefined>;
    }>> & {
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        onConfirm?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined>;
        default: string;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    format: {
        type: import("vue").PropType<((day: TDate) => TDate) | undefined>;
    };
    maxDate: {
        type: import("vue").PropType<number | Date | undefined>;
    };
    minDate: {
        type: import("vue").PropType<number | Date | undefined>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    type: {
        type: import("vue").PropType<"single" | "multiple" | "range" | undefined>;
        default: "single" | "multiple" | "range" | undefined;
        validator(val: "single" | "multiple" | "range" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[] | undefined>;
    };
    visible: BooleanConstructor;
    onConfirm: import("vue").PropType<((value: Date) => void) | undefined>;
    onSelect: import("vue").PropType<((value: Date) => void) | undefined>;
}>> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "update:visible" | "select" | "confirm")[], "select" | "update:modelValue" | "update:value" | "update:visible" | "confirm", {
    type: "single" | "multiple" | "range" | undefined;
    visible: boolean;
    confirmBtn: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps | null | undefined;
    firstDayOfWeek: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        title: (_: {}) => any;
        cell: (_: {
            item: TDate;
        }) => any;
        confirmBtn: (_: {}) => any;
    };
});
export default _default;
