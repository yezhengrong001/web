/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var collapse_props = require('./props.js');
var config = require('../config.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-collapse");
var script = vue.defineComponent({
  name: name,
  props: collapse_props["default"],
  emits: ["update:value", "change"],
  setup: function setup(props2) {
    var _toRefs = vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      activeValue = _useVModel2[0],
      setActiveValue = _useVModel2[1];
    var calcActiveValues = function calcActiveValues(activeValues, panelValue, expandMutex) {
      var hit = activeValues.indexOf(panelValue);
      if (hit > -1) {
        return activeValues.filter(function (item) {
          return item !== panelValue;
        });
      }
      return expandMutex ? [panelValue] : activeValues.concat(panelValue);
    };
    var onPanelChange = function onPanelChange(value2) {
      if (Array.isArray(activeValue.value)) {
        var val = calcActiveValues(activeValue.value, value2, props2.expandMutex);
        setActiveValue(val);
      }
    };
    var disabled = vue.computed(function () {
      return props2.disabled;
    });
    var expandIcon = vue.computed(function () {
      return props2.expandIcon;
    });
    vue.provide("collapse", {
      activeValue: activeValue,
      disabled: disabled,
      expandIcon: expandIcon,
      onPanelChange: onPanelChange,
      defaultExpandAll: props2.defaultExpandAll
    });
    return {
      prefix: prefix,
      classPrefix: name,
      activeValue: activeValue
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.classPrefix)
  }, [vue.renderSlot(_ctx.$slots, "default")], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=collapse.js.map
