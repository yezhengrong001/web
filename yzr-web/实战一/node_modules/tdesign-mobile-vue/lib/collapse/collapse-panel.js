/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var collapse_collapsePanelProps = require('./collapse-panel-props.js');
var config = require('../config.js');
var collapse_util = require('./util.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-collapse-panel");
var script = vue.defineComponent({
  name: name,
  components: {
    ChevronDownIcon: tdesignIconsVueNext.ChevronDownIcon,
    ChevronUpIcon: tdesignIconsVueNext.ChevronUpIcon,
    TNode: shared_renderTnode["default"]
  },
  props: collapse_collapsePanelProps["default"],
  setup: function setup(props2, context) {
    var internalInstance = vue.getCurrentInstance();
    var parent = vue.inject("collapse");
    var isTrue = function isTrue(val) {
      return typeof val === "boolean" && val;
    };
    var rightIcon = vue.computed(function () {
      if (props2.expandIcon === false) return;
      if (isTrue(props2.expandIcon) || isTrue(parent === null || parent === void 0 ? void 0 : parent.expandIcon.value)) {
        console.log(isTrue(parent === null || parent === void 0 ? void 0 : parent.expandIcon.value));
        return isActive.value ? tdesignIconsVueNext.ChevronDownIcon : tdesignIconsVueNext.ChevronUpIcon;
      }
      return shared_render.renderTNode(internalInstance, "expand-icon")[0];
    });
    var disabled = vue.computed(function () {
      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;
    });
    var className = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name), true), _defineProperty__default["default"](_ref, "".concat(name, "--active"), isActive.value), _defineProperty__default["default"](_ref, "".concat(name, "--disabled"), disabled.value), _ref;
    });
    var isActive = vue.computed(function () {
      return collapse_util.findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;
    });
    var updatePanelValue = function updatePanelValue() {
      if (props2.value != null) {
        parent === null || parent === void 0 ? void 0 : parent.onPanelChange(props2.value);
      }
    };
    var handleClick = function handleClick(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      if (disabled.value) {
        return;
      }
      updatePanelValue();
    };
    var panelContent = shared_render.renderContent(internalInstance, "default", "content");
    var $body = vue.ref();
    var $wrap = vue.ref();
    var $head = vue.ref();
    var updatePanelState = function updatePanelState() {
      if (!$wrap.value) {
        return;
      }
      var _$head$value$getBound = $head.value.getBoundingClientRect(),
        headHeight = _$head$value$getBound.height;
      if (!isActive.value) {
        $wrap.value.style.height = "".concat(headHeight, "px");
        return;
      }
      var _$body$value$getBound = $body.value.getBoundingClientRect(),
        bodyHeight = _$body$value$getBound.height;
      var height = headHeight + bodyHeight;
      $wrap.value.style.height = "".concat(height, "px");
    };
    vue.watch(isActive, function () {
      vue.nextTick(function () {
        updatePanelState();
      });
    });
    vue.onMounted(function () {
      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {
        updatePanelValue();
      }
      updatePanelState();
    });
    return {
      classPrefix: name,
      rightIcon: rightIcon,
      $head: $head,
      $body: $body,
      $wrap: $wrap,
      className: className,
      handleClick: handleClick,
      panelContent: panelContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    ref: "$wrap",
    class: vue.normalizeClass(_ctx.className)
  }, [vue.createElementVNode("div", {
    ref: "$head",
    class: vue.normalizeClass("".concat(_ctx.classPrefix, "__header")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.classPrefix, "__title"))
  }, [vue.renderSlot(_ctx.$slots, "header", {}, function () {
    return [vue.createTextVNode(vue.toDisplayString(_ctx.header), 1)];
  })], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.classPrefix, "__header-right"))
  }, [_ctx.headerRightContent || _ctx.$slots.headerRightContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.classPrefix, "__header-extra"))
  }, [vue.renderSlot(_ctx.$slots, "headerRightContent", {}, function () {
    return [vue.createTextVNode(vue.toDisplayString(_ctx.headerRightContent), 1)];
  })], 2)) : vue.createCommentVNode("", true), (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.rightIcon), {
    class: vue.normalizeClass("".concat(_ctx.classPrefix, "__header-icon"))
  }, null, 8, ["class"]))], 2)], 2), vue.createElementVNode("div", {
    ref: "$body",
    class: vue.normalizeClass("".concat(_ctx.classPrefix, "__body"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.panelContent
  }, null, 8, ["content"])], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=collapse-panel.js.map
