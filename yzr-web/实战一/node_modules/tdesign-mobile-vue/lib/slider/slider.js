/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _typeof = require('@babel/runtime/helpers/typeof');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var config = require('../config.js');
var slider_props = require('./props.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-slider");
var isArray = Array.isArray;
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: slider_props["default"],
  emits: ["drag-start", "drag-end", "update:modelValue", "change"],
  setup: function setup(props2, context) {
    var rootRef = vue.ref(null);
    var barRef = vue.ref(null);
    var defaultValue = props2.defaultValue || props2.min;
    var _toRefs = vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      max = _toRefs.max,
      min = _toRefs.min;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var internalInstance = vue.getCurrentInstance();
    var labelContent = vue.computed(function () {
      return !props2.range && props2.label && (_typeof__default["default"](shared_render.renderTNode(internalInstance, "label")) === "object" ? shared_render.renderTNode(internalInstance, "label") : "".concat(innerValue.value));
    });
    var isRange = vue.computed(function () {
      return props2.range && isArray(innerValue.value) && innerValue.value.length === 2;
    });
    var dots = vue.computed(function () {
      if (isRange.value) return innerValue.value;
      if (typeof innerValue.value === "number") return [innerValue.value];
      return [];
    });
    var classes = vue.computed(function () {
      var _ref;
      return ["".concat(name, "-wrap"), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(prefix, "-is-disabled"), props2.disabled), _defineProperty__default["default"](_ref, "".concat(prefix, "-is-mark"), props2.marks), _defineProperty__default["default"](_ref, "".concat(prefix, "-is-value"), props2.showExtremeValue), _ref)];
    });
    var handleClass = vue.computed(function () {
      return ["".concat(name, "__handle")];
    });
    var marksData = vue.computed(function () {
      var sorter = function sorter(a, b) {
        return a[0] - b[0];
      };
      if (!props2.range && props2.marks) {
        if (isArray(props2.marks)) {
          return props2.marks.map(function (val) {
            return [val, val];
          }).sort(sorter);
        }
        return Object.entries(props2.marks).map(function (_ref2) {
          var _ref3 = _slicedToArray__default["default"](_ref2, 2),
            key = _ref3[0],
            value2 = _ref3[1];
          return [parseInt(key, 10), value2];
        }).sort(sorter);
      }
      return [];
    });
    var dragStatus = vue.ref("");
    var touchData = vue.reactive({
      startValue: 0,
      newValue: 0,
      startX: 0,
      deltaX: 0,
      offsetX: 0
    });
    function onTouchStart(event, value2) {
      if (props2.disabled) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      touchData.deltaX = 0;
      touchData.offsetX = 0;
      touchData.startX = event.touches[0].clientX;
      touchData.startValue = format(value2);
      dragStatus.value = "start";
    }
    function onTouchMove(event, index) {
      if (props2.disabled) return;
      if (!barRef.value) return;
      event.stopPropagation();
      event.preventDefault();
      if (dragStatus.value === "start") {
        context.emit("drag-start");
      }
      var touch = event.touches[0];
      touchData.deltaX = touch.clientX - touchData.startX;
      touchData.offsetX = Math.abs(touchData.deltaX);
      dragStatus.value = "dragging";
      var rect = barRef.value.getBoundingClientRect();
      var delta = touchData.deltaX;
      var total = rect.width;
      var diff = delta / total * (props2.max - props2.min);
      touchData.newValue = touchData.startValue + diff;
      updateValue(touchData.newValue, index);
    }
    function onTouchEnd(event, index) {
      if (props2.disabled) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      if (dragStatus.value === "dragging") {
        updateValue(touchData.newValue, index, true);
        context.emit("drag-end");
      }
      dragStatus.value = "";
    }
    function onClick(event) {
      var _innerValue$value;
      event.stopPropagation();
      if (props2.disabled) return;
      if (!barRef.value) return;
      var rect = barRef.value.getBoundingClientRect();
      var delta = event.clientX - rect.left;
      var total = rect.width;
      var current = +props2.min + delta / total * (props2.max - props2.min);
      var index = 0;
      if (props2.range && innerValue.value) {
        if (Math.abs(current - innerValue.value[0]) > Math.abs(current - innerValue.value[1])) {
          index = 1;
        }
      }
      touchData.startValue = (_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value[index];
      updateValue(current, index, true);
    }
    function format(value2) {
      var current = value2;
      if (!props2.range && props2.marks) {
        var _marksData$value;
        if (marksData !== null && marksData !== void 0 && (_marksData$value = marksData.value) !== null && _marksData$value !== void 0 && _marksData$value.length) {
          var _marksData$value$ = _slicedToArray__default["default"](marksData.value[0], 1),
            min2 = _marksData$value$[0];
          marksData.value.forEach(function (_ref4) {
            var _ref5 = _slicedToArray__default["default"](_ref4, 1),
              marksDataItemValue = _ref5[0];
            if (Math.abs(marksDataItemValue - value2) < Math.abs(min2 - value2)) {
              min2 = marksDataItemValue;
            }
          });
          current = min2;
        }
      }
      return Math.round(Math.max(props2.min, Math.min(current, props2.max)) / props2.step) * props2.step;
    }
    function updateValue(newValue, index) {
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var formatValue = format(newValue);
      if (props2.range && Array.isArray(innerValue.value)) {
        var tmpValue = _toConsumableArray__default["default"](innerValue.value);
        tmpValue[index] = formatValue;
        if (end && formatValue !== touchData.startValue) {
          tmpValue.sort(function (a, b) {
            return a - b;
          });
          setInnerValue(tmpValue);
        } else if (formatValue !== touchData.startValue) {
          setInnerValue(tmpValue);
        }
      } else if (formatValue !== touchData.startValue) {
        setInnerValue(formatValue);
      }
    }
    var getPercentage = function getPercentage(value2) {
      return (value2 ? value2 - props2.min : 0) / (props2.max - props2.min) * 100;
    };
    var trackStyle = vue.computed(function () {
      if (props2.range && isArray(innerValue.value)) {
        return {
          left: "".concat(getPercentage(Math.min(innerValue.value[0], innerValue.value[1])), "%"),
          width: "".concat(getPercentage(Math.abs(innerValue.value[1] - innerValue.value[0])), "%")
        };
      }
      if (!isArray(innerValue.value)) {
        return {
          width: "".concat(getPercentage(innerValue.value), "%")
        };
      }
      return {};
    });
    return {
      max: max,
      min: min,
      name: vue.ref(name),
      marksData: marksData,
      rootRef: rootRef,
      barRef: barRef,
      dots: dots,
      value: innerValue,
      labelContent: labelContent,
      classes: classes,
      handleClass: handleClass,
      trackStyle: trackStyle,
      getPercentage: getPercentage,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd,
      onClick: onClick
    };
  }
});

var _hoisted_1 = ["onTouchstart", "onTouchmove", "onTouchend"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    ref: "rootRef",
    class: vue.normalizeClass(_ctx.classes)
  }, [_ctx.showExtremeValue ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "-wrap__value--left"))
  }, vue.toDisplayString(_ctx.min), 3)) : vue.createCommentVNode("", true), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name)),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("div", {
    ref: "barRef",
    class: vue.normalizeClass("".concat(_ctx.name, "__bar"))
  }, null, 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__track")),
    style: vue.normalizeStyle(_ctx.trackStyle)
  }, null, 6), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.dots, function (item, index) {
    return vue.openBlock(), vue.createElementBlock("div", {
      key: index + 1,
      class: vue.normalizeClass(_ctx.handleClass),
      style: vue.normalizeStyle("left:".concat(_ctx.getPercentage(item), "%")),
      onTouchstart: function onTouchstart($event) {
        return _ctx.onTouchStart($event, item);
      },
      onTouchmove: function onTouchmove($event) {
        return _ctx.onTouchMove($event, index);
      },
      onTouchend: function onTouchend($event) {
        return _ctx.onTouchEnd($event, index);
      }
    }, null, 46, _hoisted_1);
  }), 128)), _ctx.marksData ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__mark"))
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.marksData, function (v, k) {
    return vue.openBlock(), vue.createElementBlock("div", {
      key: k,
      class: vue.normalizeClass("".concat(_ctx.name, "__mark-text t-is-").concat(_ctx.value && _ctx.value > v[0] ? "active" : "")),
      style: vue.normalizeStyle("left: ".concat(_ctx.getPercentage(v[0]), "%"))
    }, vue.toDisplayString(typeof v[1] === "function" ? v[1](v[0]) : v[1]), 7);
  }), 128))], 2)) : vue.createCommentVNode("", true)], 2), _ctx.labelContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "-wrap__value"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.labelContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), _ctx.showExtremeValue ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 2,
    class: vue.normalizeClass("".concat(_ctx.name, "-wrap__value"))
  }, vue.toDisplayString(_ctx.max), 3)) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=slider.js.map
