/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var steps_props = require('./props.js');
var steps_stepItem = require('./step-item.js');
var config = require('../config.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('tdesign-icons-vue-next');
require('./step-item-props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-steps");
var script = vue.defineComponent({
  name: name,
  components: {
    TStepItem: steps_stepItem["default"]
  },
  props: steps_props["default"],
  emits: ["update:current", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var baseClass = vue.computed(function () {
      return [name, "".concat(name, "--").concat(props.layout), _defineProperty__default["default"]({}, "".concat(name, "--readonly"), props.readonly), "".concat(name, "--").concat(props.theme, "-anchor")];
    });
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "current", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      current = _useDefault2[0],
      setCurrent = _useDefault2[1];
    var state = vue.reactive({
      children: []
    });
    var relation = function relation(child) {
      child && state.children.push(child);
    };
    var onClickItem = function onClickItem(cur, prev, e) {
      setCurrent(cur, prev, {
        e: e
      });
    };
    vue.provide("stepsProvide", _objectSpread(_objectSpread({}, props), {}, {
      state: state,
      current: current,
      relation: relation,
      onClickItem: onClickItem
    }));
    return _objectSpread({
      baseClass: baseClass,
      onClickItem: onClickItem
    }, vue.toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_step_item = vue.resolveComponent("t-step-item");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.baseClass)
  }, [vue.renderSlot(_ctx.$slots, "default", {}, function () {
    return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.options, function (item, index) {
      return vue.openBlock(), vue.createBlock(_component_t_step_item, {
        key: index,
        title: item.title,
        content: item.content,
        icon: item.icon,
        status: item.status
      }, null, 8, ["title", "content", "icon", "status"]);
    }), 128))];
  })], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=steps.js.map
