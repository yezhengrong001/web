/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var steps_stepItemProps = require('./step-item-props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-step");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: steps_stepItemProps["default"],
  setup: function setup(props) {
    var internalInstance = vue.getCurrentInstance();
    var proxy = internalInstance.proxy;
    var stepsProvide = vue.inject("stepsProvide", void 0);
    stepsProvide.relation(proxy);
    var index = vue.computed(function () {
      return stepsProvide.state.children.indexOf(proxy);
    });
    var theme = vue.computed(function () {
      return stepsProvide.theme;
    });
    var dot = vue.computed(function () {
      return theme.value === "dot" && stepsProvide.layout === "vertical";
    });
    var iconNode = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "icon");
    });
    var iconContent = vue.computed(function () {
      if (dot.value) {
        return "";
      }
      if (props.status === "error") {
        return vue.h(tdesignIconsVueNext.CloseIcon);
      }
      if (index.value < current.value && readonly.value) {
        return vue.h(tdesignIconsVueNext.CheckIcon);
      }
      if (typeof iconNode.value === "boolean") {
        return iconNode.value ? index.value + 1 : "";
      }
      return iconNode.value;
    });
    var titleContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "title");
    });
    var descContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "content");
    });
    var extraContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "extra");
    });
    var current = vue.computed(function () {
      return stepsProvide.current.value || stepsProvide.defaultCurrent || 0;
    });
    var stepsStatus = vue.computed(function () {
      return stepsProvide.status;
    });
    var readonly = vue.computed(function () {
      return stepsProvide.readonly;
    });
    var rootClassName = vue.computed(function () {
      return [name, _defineProperty__default["default"]({}, "".concat(name, "--default"), !readonly.value), _defineProperty__default["default"]({}, "".concat(name, "--").concat(currentStatus.value), currentStatus.value)];
    });
    var innerClassName = vue.computed(function () {
      if (typeof iconNode.value === "boolean") {
        return ["".concat(name, "__inner")];
      }
      return ["".concat(name, "__inner"), "".concat(name, "__inner__icon")];
    });
    var iconClassName = vue.computed(function () {
      return ["".concat(name, "-icon__number"), _defineProperty__default["default"]({}, "".concat(name, "-icon__dot"), dot.value)];
    });
    var currentStatus = vue.computed(function () {
      var status = props.status;
      if (status !== "default") return status;
      if (index.value < current.value) return "finish";
      if (index.value === current.value) return "process";
      return "";
    });
    var onClickIcon = function onClickIcon(e) {
      if (!readonly.value && !dot.value) {
        stepsProvide.onClickItem(index.value, current.value, e);
      }
    };
    return {
      dot: dot,
      name: name,
      theme: theme,
      index: index,
      current: current,
      readonly: readonly,
      iconNode: iconNode,
      stepsStatus: stepsStatus,
      descContent: descContent,
      iconContent: iconContent,
      onClickIcon: onClickIcon,
      titleContent: titleContent,
      extraContent: extraContent,
      rootClassName: rootClassName,
      currentStatus: currentStatus,
      iconClassName: iconClassName,
      innerClassName: innerClassName
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.rootClassName)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass(_ctx.innerClassName),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClickIcon && _ctx.onClickIcon.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-icon"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass(_ctx.iconClassName)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2)], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-content"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-title"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.titleContent
  }, null, 8, ["content"])], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-description"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.descContent
  }, null, 8, ["content"])], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-extra"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.extraContent
  }, null, 8, ["content"])], 2)], 2)], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=step-item.js.map
