/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var config = require('../config.js');
var switch_props = require('./props.js');
var shared_constants = require('../shared/constants.js');
var shared_useToggle_index = require('../shared/useToggle/index.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-switch");
var script = vue.defineComponent({
  name: name,
  props: switch_props["default"],
  emits: ["change", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var switchValues = props.customValue || [true, false];
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      innerValue = _useDefault2[0];
    var _useToggle = shared_useToggle_index.useToggle(switchValues, innerValue.value),
      state = _useToggle.state,
      toggle = _useToggle.toggle;
    var classes = vue.computed(function () {
      var _ref;
      return ["".concat(name), (_ref = {}, _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.checked, innerValue.value === switchValues[0]), _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.disabled, props.disabled), _ref)];
    });
    var backgroundColor = vue.computed(function () {
      if (!props.disabled && props.colors) {
        return "background-color: ".concat(innerValue.value === switchValues[0] ? props.colors[0] : props.colors[1]);
      }
      return "";
    });
    function handleToggle(event) {
      event.preventDefault();
      if (props.disabled) {
        return;
      }
      toggle();
      innerValue.value = state.value;
    }
    return _objectSpread(_objectSpread({
      name: name,
      classes: classes,
      backgroundColor: backgroundColor
    }, vue.toRefs(props)), {}, {
      handleToggle: handleToggle
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return vue.openBlock(), vue.createElementBlock("span", {
    class: vue.normalizeClass(_ctx.classes)
  }, [_ctx.label ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__text"))
  }, vue.toDisplayString(_ctx.label), 3)) : vue.createCommentVNode("", true), vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.name, "__node")),
    style: vue.normalizeStyle(_ctx.backgroundColor),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleToggle && _ctx.handleToggle.apply(_ctx, arguments);
    })
  }, null, 6)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=switch.js.map
