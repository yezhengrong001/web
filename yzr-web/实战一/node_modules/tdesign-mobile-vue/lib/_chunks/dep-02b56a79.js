/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var calendar_props = require('../calendar/props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _hoisted_1 = ["onClick"];
var _hoisted_2 = {
  class: "t-calendar__footer"
};
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-calendar");
var __default__ = {
  name: name
};
var script = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {
  props: calendar_props["default"],
  emits: ["select", "confirm", "update:modelValue", "update:value", "update:visible"],
  setup: function setup(__props, _ref) {
    var emit = _ref.emit;
    var props = __props;
    var getYearMonthDay = function getYearMonthDay(date) {
      return {
        year: date.getFullYear(),
        month: date.getMonth(),
        date: date.getDate()
      };
    };
    var popup = vue.ref(props.visible);
    var valueRef = vue.ref(props.value);
    var selectedDate = vue.ref();
    var firstDayOfWeek = vue.computed(function () {
      return props.firstDayOfWeek;
    });
    var type = vue.computed(function () {
      return props.type;
    });
    var days = vue.computed(function () {
      var raw = "\u65E5\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D";
      var ans = [];
      var i = firstDayOfWeek.value % 7;
      while (ans.length < 7) {
        ans.push(raw[i]);
        i = (i + 1) % 7;
      }
      return ans;
    });
    var today = new Date();
    var minDate = props.minDate ? new Date(props.minDate) : today;
    var maxDate = props.maxDate ? new Date(props.maxDate) : new Date(today.getFullYear(), today.getMonth() + 6, today.getDate());
    var getDate = function getDate(year, month, day) {
      return new Date(year, month, day);
    };
    var handleSelect = function handleSelect(year, month, date, dateItem) {
      var _props$onSelect;
      if (dateItem.type === "disabled") return;
      var selected = new Date(year, month, date);
      if (type.value === "range" && Array.isArray(selectedDate.value)) {
        if (selectedDate.value.length === 1) {
          if (selectedDate.value[0] > selected) {
            selectedDate.value = [selected];
          } else {
            selectedDate.value = [selectedDate.value[0], selected];
          }
        } else {
          selectedDate.value = [selected];
        }
      } else if (props.type === "multiple") {
        var newVal = _toConsumableArray__default["default"](selectedDate.value);
        var index = selectedDate.value.findIndex(function (item) {
          return isSameDate(item, selected);
        });
        if (index > -1) {
          newVal.splice(index, 1);
        } else {
          newVal.push(selected);
        }
        selectedDate.value = newVal;
      } else {
        selectedDate.value = selected;
      }
      (_props$onSelect = props.onSelect) === null || _props$onSelect === void 0 ? void 0 : _props$onSelect.call(props, vue.toRaw(selectedDate.value));
    };
    var handleConfirm = function handleConfirm() {
      var _props$onConfirm;
      popup.value = false;
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, vue.toRaw(selectedDate.value));
    };
    var getMonthDates = function getMonthDates(date) {
      var _getYearMonthDay = getYearMonthDay(date),
        year = _getYearMonthDay.year,
        month = _getYearMonthDay.month;
      var firstDay = getDate(year, month, 1);
      var weekdayOfFirstDay = firstDay.getDay();
      var lastDate = new Date(+getDate(year, month + 1, 1) - 24 * 3600 * 1e3).getDate();
      return {
        year: year,
        month: month,
        weekdayOfFirstDay: weekdayOfFirstDay,
        lastDate: lastDate
      };
    };
    var isSameDate = function isSameDate(date1, date2) {
      if (date1 instanceof Date) date1 = getYearMonthDay(date1);
      if (date2 instanceof Date) date2 = getYearMonthDay(date2);
      var keys = ["year", "month", "date"];
      return keys.every(function (key) {
        return date1[key] === date2[key];
      });
    };
    var months = vue.computed(function () {
      var ans = [];
      var _getYearMonthDay2 = getYearMonthDay(minDate),
        minYear = _getYearMonthDay2.year,
        minMonth = _getYearMonthDay2.month;
      var _getYearMonthDay3 = getYearMonthDay(maxDate),
        maxYear = _getYearMonthDay3.year,
        maxMonth = _getYearMonthDay3.month;
      var calcType = function calcType(year, month, date) {
        var curDate = new Date(year, month, date, 23, 59, 59);
        if (type.value === "single") {
          if (isSameDate({
            year: year,
            month: month,
            date: date
          }, selectedDate.value)) return "selected";
        }
        if (type.value === "multiple") {
          var hit = selectedDate.value.some(function (item) {
            return isSameDate({
              year: year,
              month: month,
              date: date
            }, item);
          });
          if (hit) {
            return "selected";
          }
        }
        if (type.value === "range") {
          if (Array.isArray(selectedDate.value)) {
            var _selectedDate$value = _slicedToArray__default["default"](selectedDate.value, 2),
              startDate = _selectedDate$value[0],
              endDate = _selectedDate$value[1];
            if (startDate && isSameDate({
              year: year,
              month: month,
              date: date
            }, startDate)) return "start";
            if (endDate && isSameDate({
              year: year,
              month: month,
              date: date
            }, endDate)) return "end";
            if (startDate && endDate && curDate.getTime() > startDate.getTime() && curDate.getTime() < endDate.getTime()) return "centre";
          }
        }
        var minCurDate = new Date(year, month, date, 0, 0, 0);
        if (curDate.getTime() < minDate.getTime() || minCurDate.getTime() > maxDate.getTime()) {
          return "disabled";
        }
        return "";
      };
      while (minYear < maxYear || minYear === maxYear && minMonth <= maxMonth) {
        var target = getMonthDates(getDate(minYear, minMonth, 1));
        var months2 = [];
        for (var i = 1; i <= 31; i++) {
          if (i > target.lastDate) break;
          var dateObj = {
            date: getDate(minYear, minMonth, i),
            day: i,
            type: calcType(minYear, minMonth, i)
          };
          months2.push(props.format ? props.format(dateObj) : dateObj);
        }
        ans.push({
          year: minYear,
          month: minMonth,
          months: months2,
          weekdayOfFirstDay: target.weekdayOfFirstDay
        });
        var curDate = getYearMonthDay(getDate(minYear, minMonth + 1, 1));
        minYear = curDate.year;
        minMonth = curDate.month;
      }
      return ans;
    });
    var confirmBtn = vue.computed(function () {
      if (props.confirmBtn === "string" || props.confirmBtn === "") return {
        content: props.confirmBtn || "\u786E\u8BA4"
      };
      return props.confirmBtn;
    });
    vue.watch(function () {
      return props.visible;
    }, function (val) {
      popup.value = val;
    });
    vue.watch(function () {
      return popup.value;
    }, function (val) {
      emit("update:visible", val);
    });
    vue.watch(valueRef, function () {
      if (Array.isArray(valueRef.value)) {
        selectedDate.value = valueRef.value.map(function (item) {
          return new Date(item);
        });
      } else if (valueRef.value) {
        selectedDate.value = new Date(valueRef.value);
      } else {
        selectedDate.value = props.type === "multiple" ? [new Date()] : new Date();
      }
    }, {
      immediate: true
    });
    return function (_ctx, _cache) {
      var _component_t_button = vue.resolveComponent("t-button");
      var _component_t_popup = vue.resolveComponent("t-popup");
      return vue.openBlock(), vue.createElementBlock("div", null, [vue.createVNode(_component_t_popup, {
        modelValue: popup.value,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
          return popup.value = $event;
        }),
        placement: "bottom"
      }, {
        default: vue.withCtx(function () {
          return [vue.createElementVNode("div", {
            class: vue.normalizeClass(name)
          }, [vue.createElementVNode("div", {
            class: vue.normalizeClass("".concat(name, "__title"))
          }, [vue.renderSlot(_ctx.$slots, "title", {}, function () {
            return [vue.createTextVNode(vue.toDisplayString(_ctx.title || "\u8BF7\u9009\u62E9\u65E5\u671F"), 1)];
          })], 2), vue.createVNode(vue.unref(tdesignIconsVueNext.CloseIcon), {
            class: vue.normalizeClass("".concat(name, "__close-btn")),
            size: "24",
            onClick: _cache[0] || (_cache[0] = function ($event) {
              return popup.value = false;
            })
          }, null, 8, ["class"]), vue.createElementVNode("div", {
            class: vue.normalizeClass("".concat(name, "__days"))
          }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(days), function (item, index) {
            return vue.openBlock(), vue.createElementBlock("div", {
              key: index,
              class: vue.normalizeClass("".concat(name, "__days-item"))
            }, vue.toDisplayString(item), 3);
          }), 128))], 2), vue.createElementVNode("div", {
            class: vue.normalizeClass("".concat(name, "__months"))
          }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(months), function (item, index) {
            return vue.openBlock(), vue.createElementBlock(vue.Fragment, {
              key: index
            }, [vue.createElementVNode("div", {
              class: vue.normalizeClass("".concat(name, "__month"))
            }, vue.toDisplayString(item.year) + " \u5E74 " + vue.toDisplayString(item.month + 1) + " \u6708", 3), vue.createElementVNode("div", {
              class: vue.normalizeClass("".concat(name, "__dates"))
            }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(item.months, function (dateItem, dateIndex) {
              var _dateItem$className, _normalizeClass2;
              return vue.openBlock(), vue.createElementBlock("div", {
                key: dateIndex,
                class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, "".concat(name, "__dates-item"), true), _defineProperty__default["default"](_normalizeClass2, "".concat(name, "__dates-item--").concat(dateItem.type), !!dateItem.type), _defineProperty__default["default"](_normalizeClass2, "".concat((_dateItem$className = dateItem.className) !== null && _dateItem$className !== void 0 ? _dateItem$className : ""), true), _normalizeClass2)),
                style: vue.normalizeStyle({
                  marginLeft: dateIndex === 0 ? "".concat(49 * ((item.weekdayOfFirstDay - vue.unref(firstDayOfWeek) + 7) % 7), "px") : 0
                }),
                onClick: function onClick($event) {
                  return handleSelect(item.year, item.month, dateItem.day, dateItem);
                }
              }, [vue.renderSlot(_ctx.$slots, "cell", {
                item: dateItem
              }, function () {
                var _normalizeClass3;
                return [dateItem.prefix ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 0,
                  class: vue.normalizeClass("".concat(name, "__dates-item-prefix"))
                }, vue.toDisplayString(dateItem.prefix), 3)) : vue.createCommentVNode("", true), vue.createTextVNode(" " + vue.toDisplayString(dateItem.day) + " ", 1), dateItem.suffix ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 1,
                  class: vue.normalizeClass((_normalizeClass3 = {}, _defineProperty__default["default"](_normalizeClass3, "".concat(name, "__dates-item-suffix"), true), _defineProperty__default["default"](_normalizeClass3, "".concat(name, "__dates-item-suffix--").concat(dateItem.type), !!dateItem.type), _normalizeClass3))
                }, vue.toDisplayString(dateItem.suffix), 3)) : vue.createCommentVNode("", true)];
              })], 14, _hoisted_1);
            }), 128))], 2)], 64);
          }), 128))], 2), vue.createElementVNode("div", _hoisted_2, [vue.renderSlot(_ctx.$slots, "confirmBtn", {}, function () {
            return [vue.unref(confirmBtn) ? (vue.openBlock(), vue.createBlock(_component_t_button, vue.mergeProps({
              key: 0,
              block: "",
              theme: "primary"
            }, vue.unref(confirmBtn), {
              onClick: handleConfirm
            }), null, 16)) : vue.createCommentVNode("", true)];
          })])])];
        }),
        _: 3
      }, 8, ["modelValue"])]);
    };
  }
}));

exports.script = script;
//# sourceMappingURL=dep-02b56a79.js.map
