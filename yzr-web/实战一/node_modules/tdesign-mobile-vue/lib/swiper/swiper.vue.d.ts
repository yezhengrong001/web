import { ComponentPublicInstance } from 'vue';
declare const _default: import("vue").DefineComponent<{
    animation: {
        type: import("vue").PropType<"slide" | undefined>;
        default: "slide" | undefined;
        validator(val: "slide" | undefined): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: undefined;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"vertical" | "horizontal" | undefined>;
        default: "vertical" | "horizontal" | undefined;
        validator(val: "vertical" | "horizontal" | undefined): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation | undefined>;
    };
    paginationPosition: {
        type: import("vue").PropType<"top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined>;
        default: "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
        validator(val: "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined): boolean;
    };
    onChange: import("vue").PropType<((current: number, context: {
        source: import("./type").SwiperChangeSource;
    }) => void) | undefined>;
}, {
    swiperContainer: import("vue").Ref<HTMLElement | null>;
    name: string;
    computedNavigation: import("vue").ComputedRef<any>;
    onTouchMove: (event: TouchEvent) => void;
    onTouchEnd: () => void;
    handleAnimationEnd: () => void;
    state: {
        showNavigation: boolean;
        activeIndex: number;
        itemLength: number;
        itemWidth: number;
        isControl: boolean;
        btnDisabled: boolean;
        children: ComponentPublicInstance[];
    };
    paginationList: import("vue").ComputedRef<any[]>;
    showPageNum: import("vue").ComputedRef<number>;
    prev: (step?: number) => false | undefined;
    next: (step?: number) => false | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "change" | "update:current", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<"slide" | undefined>;
        default: "slide" | undefined;
        validator(val: "slide" | undefined): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: undefined;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"vertical" | "horizontal" | undefined>;
        default: "vertical" | "horizontal" | undefined;
        validator(val: "vertical" | "horizontal" | undefined): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation | undefined>;
    };
    paginationPosition: {
        type: import("vue").PropType<"top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined>;
        default: "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
        validator(val: "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined): boolean;
    };
    onChange: import("vue").PropType<((current: number, context: {
        source: import("./type").SwiperChangeSource;
    }) => void) | undefined>;
}>>, {
    modelValue: number;
    direction: "vertical" | "horizontal" | undefined;
    duration: number;
    animation: "slide" | undefined;
    autoplay: boolean;
    paginationPosition: "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
    current: number;
    defaultCurrent: number;
    interval: number;
    loop: boolean;
}>;
export default _default;
