/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var core = require('@vueuse/core');
var swiper_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_render = require('../shared/render.js');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-swiper");
var setOffset = function setOffset(element, offset) {
  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "X";
  element.style.transform = "translate".concat(direction, "(").concat(offset, "px)");
};
var script = vue.defineComponent({
  name: name,
  components: {
    ChevronLeftIcon: tdesignIconsVueNext.ChevronLeftIcon,
    ChevronRightIcon: tdesignIconsVueNext.ChevronRightIcon,
    TNode: shared_renderTnode["default"]
  },
  props: swiper_props["default"],
  emits: ["change", "update:current", "update:modelValue"],
  setup: function setup(props, context) {
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "current", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2);
      _useDefault2[0];
      var setSwiperValue = _useDefault2[1];
    var self = vue.getCurrentInstance();
    var swiperContainer = vue.ref(null);
    var computedNavigation = vue.computed(function () {
      return shared_render.renderTNode(self, "navigation");
    });
    var height = props.height || 180;
    var state = vue.reactive({
      showNavigation: true,
      activeIndex: 0,
      itemLength: 0,
      itemWidth: 0,
      isControl: false,
      btnDisabled: false,
      children: []
    });
    var paginationList = vue.computed(function () {
      return new Array(state.itemLength).fill(1);
    });
    var showPageNum = vue.computed(function () {
      var activeIndex = state.activeIndex,
        itemLength = state.itemLength;
      if (activeIndex > itemLength - 1) return itemLength;
      if (activeIndex < 0) return 1;
      return activeIndex + 1;
    });
    vue.computed(function () {
      return state.children.length;
    });
    var getContainer = function getContainer() {
      var _self$proxy;
      return self === null || self === void 0 ? void 0 : (_self$proxy = self.proxy) === null || _self$proxy === void 0 ? void 0 : _self$proxy.$el.querySelector(".".concat(name, "__container"));
    };
    var initSwiper = function initSwiper() {
      var _swiperContainer$chil, _swiperContainer$quer;
      var _swiperContainer = getContainer();
      _swiperContainer.querySelectorAll(".copy-item").forEach(function (ele) {
        _swiperContainer.removeChild(ele);
      });
      var items = _swiperContainer.querySelectorAll(".".concat(name, "-item"));
      state.itemLength = ((_swiperContainer$chil = _swiperContainer.children) === null || _swiperContainer$chil === void 0 ? void 0 : _swiperContainer$chil.length) || 0;
      var itemWidth = ((_swiperContainer$quer = _swiperContainer.querySelector(".".concat(name, "-item"))) === null || _swiperContainer$quer === void 0 ? void 0 : _swiperContainer$quer.getBoundingClientRect().width) || 0;
      state.itemWidth = itemWidth;
      if (items.length <= 0) return false;
      if (computedNavigation.value && "minShowNum" in computedNavigation.value && items.length < computedNavigation.value.minShowNum) {
        state.showNavigation = false;
      }
      if (props !== null && props !== void 0 && props.loop) {
        var first = items[0].cloneNode(true);
        first.classList.add("copy-item");
        var last = items[items.length - 1].cloneNode(true);
        last.classList.add("copy-item");
        _swiperContainer.appendChild(first);
        _swiperContainer.insertBefore(last, items[0]);
      }
      move(0);
      startAutoplay();
      if (typeof props.current === "number") {
        state.isControl = true;
        next(props.current);
      }
    };
    vue.onMounted(function () {
      vue.nextTick(function () {
        console.info("swiper mounted");
        initSwiper();
      });
    });
    vue.watch(function () {
      return state.children.length;
    }, function () {
      vue.nextTick(function () {
        console.info("swiper mounted");
        initSwiper();
      });
    });
    var autoplayTimer = null;
    var actionIsTrust = true;
    var move = function move(targetIndex) {
      var isTrust = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var _swiperContainer = getContainer();
      var moveDirection = (props === null || props === void 0 ? void 0 : props.direction) === "horizontal" ? "X" : "Y";
      var moveLength = (props === null || props === void 0 ? void 0 : props.direction) === "vertical" ? height : state.itemWidth;
      actionIsTrust = isTrust;
      _swiperContainer.dataset.isTrust = "".concat(isTrust);
      var toIndex = props !== null && props !== void 0 && props.loop ? targetIndex + 1 : targetIndex;
      _swiperContainer.style.transform = "translate".concat(moveDirection, "(-").concat(moveLength * toIndex, "px)");
    };
    var addAnimation = function addAnimation() {
      var _swiperContainer = getContainer();
      _swiperContainer.style.transition = "transform ".concat(props === null || props === void 0 ? void 0 : props.duration, "ms");
    };
    var removeAnimation = function removeAnimation() {
      var _swiperContainer = getContainer();
      _swiperContainer.style.transition = "none";
    };
    var handleAnimationEnd = function handleAnimationEnd() {
      state.btnDisabled = false;
      removeAnimation();
      if (state.activeIndex >= state.itemLength) {
        state.activeIndex = 0;
        move(0);
      }
      if (state.activeIndex <= -1) {
        state.activeIndex = state.itemLength - 1;
        move(state.itemLength - 1);
      }
      setTimeout(function () {
        actionIsTrust && emitCurrentChange(state.activeIndex);
      }, 0);
    };
    var stopAutoplay = function stopAutoplay() {
      if (!autoplayTimer) return;
      clearInterval(autoplayTimer);
      autoplayTimer = null;
    };
    var startAutoplay = function startAutoplay() {
      if (typeof props.current === "number") return false;
      if (!(props !== null && props !== void 0 && props.autoplay) || autoplayTimer !== null) return false;
      autoplayTimer = setInterval(function () {
        state.activeIndex += 1;
        if (!(props !== null && props !== void 0 && props.loop) && state.activeIndex >= state.children.length - 1) {
          state.activeIndex = 0;
        }
        if (!(props !== null && props !== void 0 && props.loop) && state.activeIndex <= 0) {
          state.activeIndex = state.children.length - 1;
        }
        addAnimation();
        move(state.activeIndex);
      }, props === null || props === void 0 ? void 0 : props.interval);
    };
    var emitCurrentChange = function emitCurrentChange(index) {
      var resultIndex = index;
      if (index >= state.itemLength) resultIndex = 0;
      if (index < 0) resultIndex = state.itemLength - 1;
      setSwiperValue(resultIndex);
    };
    var prev = function prev() {
      var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var cannotMovePrev = !(props !== null && props !== void 0 && props.loop) && state.activeIndex === 0;
      if (state.btnDisabled || cannotMovePrev) {
        move(state.activeIndex);
        return false;
      }
      stopAutoplay();
      state.activeIndex -= step;
      addAnimation();
      move(state.activeIndex);
      startAutoplay();
      state.btnDisabled = true;
    };
    var next = function next() {
      var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var cannotMoveLast = !(props !== null && props !== void 0 && props.loop) && state.activeIndex === state.itemLength - 1;
      if (state.btnDisabled || cannotMoveLast) {
        move(state.activeIndex);
        return false;
      }
      stopAutoplay();
      state.activeIndex += step;
      addAnimation();
      move(state.activeIndex);
      startAutoplay();
      state.btnDisabled = true;
    };
    var _useSwipe = core.useSwipe(swiperContainer, {
        passive: false,
        onSwipeStart: function onSwipeStart(e) {
          if (state.btnDisabled) return false;
          stopAutoplay();
        },
        onSwipe: function onSwipe(e) {
          if (state.btnDisabled) return false;
          onTouchMove(e);
        },
        onSwipeEnd: function onSwipeEnd() {
          onTouchEnd();
        }
      }),
      lengthX = _useSwipe.lengthX,
      lengthY = _useSwipe.lengthY;
    var onTouchMove = function onTouchMove(event) {
      event.preventDefault();
      var activeIndex = state.activeIndex,
        itemWidth = state.itemWidth;
      var distanceX = lengthX.value;
      var distanceY = lengthY.value;
      var _container = getContainer();
      removeAnimation();
      var toIndex = props !== null && props !== void 0 && props.loop ? activeIndex + 1 : activeIndex;
      if ((props === null || props === void 0 ? void 0 : props.direction) === "horizontal") {
        setOffset(_container, -(toIndex * itemWidth + distanceX));
      } else {
        var _props$height = props.height,
          height2 = _props$height === void 0 ? 180 : _props$height;
        setOffset(_container, -(toIndex * height2 + distanceY), "Y");
      }
    };
    var onTouchEnd = function onTouchEnd() {
      var distanceX = lengthX.value;
      var distanceY = lengthY.value;
      addAnimation();
      if ((props === null || props === void 0 ? void 0 : props.direction) === "horizontal" && distanceX < -100 || (props === null || props === void 0 ? void 0 : props.direction) === "vertical" && distanceY < -100) {
        prev(1);
      } else if ((props === null || props === void 0 ? void 0 : props.direction) === "horizontal" && distanceX > 100 || (props === null || props === void 0 ? void 0 : props.direction) === "vertical" && distanceY > 100) {
        next(1);
      } else {
        move(state.activeIndex);
      }
      startAutoplay();
    };
    var relation = function relation(child) {
      if (child.proxy) {
        state.children.push(child.proxy);
      }
    };
    vue.provide("parent", {
      props: props,
      relation: relation
    });
    vue.watch(function () {
      return props.current;
    }, function (newPage, oldPage) {
      if (state.isControl) {
        state.activeIndex = newPage || 0;
        addAnimation();
        move(state.activeIndex, false);
      }
    });
    return {
      swiperContainer: swiperContainer,
      name: name,
      computedNavigation: computedNavigation,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd,
      handleAnimationEnd: handleAnimationEnd,
      state: state,
      paginationList: paginationList,
      showPageNum: showPageNum,
      prev: prev,
      next: next
    };
  }
});

var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_chevron_left_icon = vue.resolveComponent("chevron-left-icon");
  var _component_chevron_right_icon = vue.resolveComponent("chevron-right-icon");
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    style: vue.normalizeStyle({
      height: "".concat(_ctx.height, "px"),
      overflow: "hidden"
    }),
    class: vue.normalizeClass("".concat(_ctx.name))
  }, [vue.createElementVNode("div", {
    ref: "swiperContainer",
    class: vue.normalizeClass("".concat(_ctx.name, "__container")),
    style: vue.normalizeStyle({
      height: "".concat(_ctx.height, "px"),
      flexDirection: _ctx.direction === "horizontal" ? "row" : "column"
    }),
    onTransitionend: _cache[0] || (_cache[0] = function () {
      return _ctx.handleAnimationEnd && _ctx.handleAnimationEnd.apply(_ctx, arguments);
    })
  }, [vue.renderSlot(_ctx.$slots, "default")], 38), _ctx.navigation && _ctx.state.showNavigation ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
    key: 0
  }, [_ctx.direction === "horizontal" && "showSlideBtn" in _ctx.navigation && _ctx.navigation.showSlideBtn ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_1, [vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.name, "__btn btn-prev")),
    onClick: _cache[1] || (_cache[1] = function ($event) {
      return _ctx.prev(1);
    })
  }, [vue.createVNode(_component_chevron_left_icon, {
    size: "20px"
  })], 2), vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.name, "__btn btn-next")),
    onClick: _cache[2] || (_cache[2] = function ($event) {
      return _ctx.next(1);
    })
  }, [vue.createVNode(_component_chevron_right_icon, {
    size: "20px"
  })], 2)])) : vue.createCommentVNode("", true), "type" in _ctx.navigation ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__pagination ").concat(_ctx.name, "__pagination-").concat(_ctx.navigation.type || "", " ").concat(_ctx.name, "__pagination-").concat(_ctx.paginationPosition))
  }, [["dots", "dots-bar"].includes(_ctx.navigation.type || "") ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {
    key: 0
  }, vue.renderList(_ctx.state.children.length, function (item, index) {
    var _normalizeClass2;
    return vue.openBlock(), vue.createElementBlock("span", {
      key: "page" + index,
      class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.name, "-dot"), true), _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.name, "-dot--active"), index === _ctx.state.activeIndex), _normalizeClass2))
    }, null, 2);
  }), 128)) : vue.createCommentVNode("", true), _ctx.navigation.type && _ctx.navigation.type === "fraction" ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2, vue.toDisplayString(_ctx.showPageNum + "/" + _ctx.state.children.length), 1)) : vue.createCommentVNode("", true)], 2)) : vue.createCommentVNode("", true)], 64)) : _ctx.computedNavigation !== void 0 ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 1,
    content: _ctx.computedNavigation,
    style: {}
  }, null, 8, ["content"])) : vue.createCommentVNode("", true)], 6);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=swiper.js.map
