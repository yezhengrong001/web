/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var imageViewer_props = require('./props.js');
var swiper_index = require('../swiper/index.js');
var overlay_index = require('../overlay/index.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useTouch_index = require('../shared/useTouch/index.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_render = require('../shared/render.js');
require('../swiper/swiper.js');
require('@vueuse/core');
require('../swiper/props.js');
require('../swiper/swiper-item.js');
require('../shared/component.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');
require('../overlay/overlay.js');
require('../overlay/props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-image-viewer");
var getDistance = function getDistance(touches) {
  return Math.sqrt(Math.pow(touches[0].clientX - touches[1].clientX, 2) + Math.pow(touches[0].clientY - touches[1].clientY, 2));
};
var script = vue.defineComponent({
  name: name,
  components: {
    CloseCircleFilledIcon: tdesignIconsVueNext.CloseCircleFilledIcon,
    TSwiper: swiper_index.Swiper,
    TSwiperItem: swiper_index.SwiperItem,
    TOverlay: overlay_index["default"],
    TNode: shared_renderTnode["default"]
  },
  props: imageViewer_props["default"],
  emits: ["close", "index-change", "update:visible", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var state = vue.reactive({
      zooming: false,
      scale: 1
    });
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "visible", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      visible = _useDefault2[0],
      setVisible = _useDefault2[1];
    var lazyVisible = vue.ref(visible.value);
    var touch = shared_useTouch_index.useTouch();
    var internalInstance = vue.getCurrentInstance();
    var closeBtnTNode = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "closeBtn");
    });
    var navigation = vue.computed(function () {
      if (props.showIndex) {
        return {
          type: "fraction"
        };
      }
      return {
        type: "dots",
        showSlideBtn: false
      };
    });
    var imageStyle = vue.computed(function () {
      var scale = state.scale,
        zooming = state.zooming;
      var style = {
        transitionDuration: zooming ? "0s" : ".3s"
      };
      if (scale !== 1) {
        style.transform = "scale(".concat(scale, ", ").concat(scale, ")");
      }
      return style;
    });
    var handleClose = function handleClose(e, trigger) {
      setVisible(false);
      emitEvent("close", {
        trigger: trigger,
        e: e
      });
    };
    var onSwiperChange = function onSwiperChange(index, context2) {
      emitEvent("index-change", index);
    };
    var fingerNum;
    var startScale;
    var startDistance;
    var doubleTapTimer;
    var touchStartTime;
    var onTouchStart = function onTouchStart(event) {
      event.preventDefault();
      event.stopPropagation();
      var touches = event.touches;
      touch.start(event);
      fingerNum = touches.length;
      touchStartTime = Date.now();
      state.zooming = fingerNum === 2;
      if (state.zooming) {
        startScale = state.scale;
        startDistance = getDistance(event.touches);
      }
    };
    var onTouchMove = function onTouchMove(event) {
      var touches = event.touches;
      touch.move(event);
      event.preventDefault();
      event.stopPropagation();
      if (state.zooming) {
        event.preventDefault();
        event.stopPropagation();
      }
      if (state.zooming && touches.length === 2) {
        var distance = getDistance(touches);
        var scale = startScale * distance / startDistance;
        setScale(scale);
      }
    };
    var setScale = function setScale(scale) {
      scale = Math.min(scale, +props.maxZoom + 1);
      if (scale !== state.scale) {
        state.scale = scale;
      }
    };
    var resetScale = function resetScale() {
      setScale(1);
    };
    var toggleScale = function toggleScale() {
      var scale = state.scale > 1 ? 1 : 2;
      setScale(scale);
    };
    var checkTap = function checkTap(event) {
      if (fingerNum > 1) {
        return;
      }
      var offsetX = touch.offsetX,
        offsetY = touch.offsetY;
      var deltaTime = Date.now() - touchStartTime;
      var TAP_TIME = 250;
      var TAP_OFFSET = 5;
      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET && deltaTime < TAP_TIME) {
        if (doubleTapTimer) {
          clearTimeout(doubleTapTimer);
          doubleTapTimer = null;
          toggleScale();
        } else {
          doubleTapTimer = window.setTimeout(function () {
            handleClose(event, "overlay");
            doubleTapTimer = null;
          }, TAP_TIME);
        }
      }
    };
    var onTouchEnd = function onTouchEnd(event) {
      event.preventDefault();
      if (state.zooming) {
        event.stopPropagation();
        if (!event.touches.length) {
          if (state.zooming) {
            state.zooming = false;
          }
          startScale = 1;
          if (state.scale < 1) {
            resetScale();
          }
          if (state.scale > props.maxZoom) {
            state.scale = +props.maxZoom;
          }
        }
      }
      checkTap(event);
      touch.reset();
    };
    vue.watch(function () {
      return visible.value;
    }, function (value) {
      if (!value) {
        resetScale();
      }
      setTimeout(function () {
        lazyVisible.value = value;
      }, 300);
    });
    return _objectSpread(_objectSpread({
      name: name,
      prefix: prefix,
      closeBtnTNode: closeBtnTNode,
      navigation: navigation,
      imageStyle: imageStyle,
      lazyVisible: lazyVisible
    }, vue.toRefs(props)), {}, {
      visible: visible,
      handleClose: handleClose,
      onSwiperChange: onSwiperChange,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd
    });
  }
});

var _hoisted_1 = ["src"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_close_circle_filled_icon = vue.resolveComponent("close-circle-filled-icon");
  var _component_t_swiper_item = vue.resolveComponent("t-swiper-item");
  var _component_t_swiper = vue.resolveComponent("t-swiper");
  var _component_t_overlay = vue.resolveComponent("t-overlay");
  return vue.openBlock(), vue.createBlock(_component_t_overlay, {
    class: vue.normalizeClass("".concat(_ctx.prefix, "-image-viewer")),
    visible: _ctx.visible
  }, {
    default: vue.withCtx(function () {
      return [_ctx.lazyVisible ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
        key: 0
      }, [vue.createElementVNode("div", {
        class: vue.normalizeClass("".concat(_ctx.name, "__close-icon")),
        onClick: _cache[0] || (_cache[0] = function ($event) {
          return _ctx.handleClose($event, "close-btn");
        })
      }, [!(typeof _ctx.closeBtnTNode === "boolean") ? (vue.openBlock(), vue.createBlock(_component_t_node, {
        key: 0,
        content: _ctx.closeBtnTNode
      }, null, 8, ["content"])) : typeof _ctx.closeBtn === "boolean" && _ctx.closeBtn ? (vue.openBlock(), vue.createBlock(_component_close_circle_filled_icon, {
        key: 1
      })) : vue.createCommentVNode("", true)], 2), vue.createVNode(_component_t_swiper, {
        autoplay: false,
        class: vue.normalizeClass("".concat(_ctx.name, "__swipe")),
        "default-current": _ctx.initialIndex,
        navigation: _ctx.navigation,
        "on-change": _ctx.onSwiperChange
      }, {
        default: vue.withCtx(function () {
          return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.images, function (image, index) {
            return vue.openBlock(), vue.createBlock(_component_t_swiper_item, {
              key: image + index,
              class: vue.normalizeClass("".concat(_ctx.name, "__swipe-item")),
              onTouchstart: _ctx.onTouchStart,
              onTouchmove: _ctx.onTouchMove,
              onTouchend: _ctx.onTouchEnd
            }, {
              default: vue.withCtx(function () {
                return [vue.createElementVNode("img", {
                  src: image,
                  style: vue.normalizeStyle(_ctx.imageStyle),
                  class: vue.normalizeClass("".concat(_ctx.name, "__image"))
                }, null, 14, _hoisted_1)];
              }),
              _: 2
            }, 1032, ["class", "onTouchstart", "onTouchmove", "onTouchend"]);
          }), 128))];
        }),
        _: 1
      }, 8, ["class", "default-current", "navigation", "on-change"])], 64)) : vue.createCommentVNode("", true)];
    }),
    _: 1
  }, 8, ["class", "visible"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=image-viewer.js.map
