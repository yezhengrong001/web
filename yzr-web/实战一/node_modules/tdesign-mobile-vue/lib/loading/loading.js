/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var loading_icon_gradient = require('./icon/gradient.js');
var loading_icon_spinner = require('./icon/spinner.js');
var shared_constants = require('../shared/constants.js');
var config = require('../config.js');
var loading_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-loading");
var toBarPerc = function toBarPerc(n) {
  if (!n || n <= 0) return -100;
  if (n > 1) return 0;
  return (-1 + n) * 100;
};
var script = vue.defineComponent({
  name: name,
  components: {
    GradientIcon: loading_icon_gradient["default"],
    SpinnerIcon: loading_icon_spinner["default"],
    TNode: shared_renderTnode["default"]
  },
  props: loading_props["default"],
  setup: function setup(props) {
    var internalInstance = vue.getCurrentInstance();
    var delayShowLoading = vue.ref(false);
    var _toRefs = vue.toRefs(props),
      pause = _toRefs.pause;
    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props.delay);
    };
    var realLoading = vue.computed(function () {
      return (!props.delay || delayShowLoading.value) && props.loading;
    });
    vue.watch(function () {
      return props.loading;
    }, function (value) {
      if (value) {
        props.delay && countDelay();
      }
    }, {
      immediate: true
    });
    var rootClass = vue.computed(function () {
      return [name, _defineProperty__default["default"]({}, "".concat(name, "--vertical"), props.layout === "vertical"), _defineProperty__default["default"]({}, "".concat(name, "--bar"), props.theme === "bar"), props.size ? shared_constants["default"].SIZE[props.size] : ""];
    });
    var textClass = vue.computed(function () {
      return ["".concat(name, "__text"), _defineProperty__default["default"]({}, "".concat(name, "__text--error"), props.theme === "error"), _defineProperty__default["default"]({}, "".concat(name, "__text--only"), !props.indicator || props.theme === "error")];
    });
    var textContent = vue.computed(function () {
      if (props.theme === "error") {
        return "\u52A0\u8F7D\u5931\u8D25";
      }
      return shared_render.renderTNode(internalInstance, "text");
    });
    var defaultContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var rootStyle = vue.computed(function () {
      if (props.inheritColor) {
        return "color: inherit";
      }
      return "";
    });
    var barStyle = vue.computed(function () {
      return {
        transform: "translate3d(".concat(toBarPerc(props.progress), "%, 0px, 0px)")
      };
    });
    var animationStyle = vue.computed(function () {
      var ans = {};
      if (props.pause) {
        ans["animation-play-state"] = "paused";
      }
      if (props.reverse) {
        ans["animation-direction"] = "reverse";
      }
      if (props.duration) {
        ans["animation-duration"] = "".concat(props.duration, "ms");
      }
      return ans;
    });
    return {
      name: name,
      pause: pause,
      rootClass: rootClass,
      textClass: textClass,
      textContent: textContent,
      defaultContent: defaultContent,
      rootStyle: rootStyle,
      barStyle: barStyle,
      animationStyle: animationStyle,
      realLoading: realLoading
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_gradient_icon = vue.resolveComponent("gradient-icon");
  var _component_spinner_icon = vue.resolveComponent("spinner-icon");
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.rootClass),
    style: vue.normalizeStyle(_ctx.rootStyle)
  }, [_ctx.theme === "bar" && _ctx.progress && ![0, 1].includes(_ctx.progress) ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__bar")),
    style: vue.normalizeStyle(_ctx.barStyle)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__shadow"))
  }, null, 2)], 6)) : _ctx.theme !== "bar" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
    key: 1
  }, [_ctx.indicator && _ctx.realLoading ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
    key: 0
  }, [_ctx.theme === "circular" ? (vue.openBlock(), vue.createBlock(_component_gradient_icon, {
    key: 0,
    style: vue.normalizeStyle(_ctx.animationStyle)
  }, null, 8, ["style"])) : _ctx.theme === "spinner" ? (vue.openBlock(), vue.createBlock(_component_spinner_icon, {
    key: 1,
    style: vue.normalizeStyle(_ctx.animationStyle)
  }, null, 8, ["style"])) : _ctx.theme === "dots" ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 2,
    class: vue.normalizeClass("".concat(_ctx.name, "__dots")),
    style: vue.normalizeStyle(_ctx.animationStyle)
  }, null, 6)) : vue.createCommentVNode("", true)], 64)) : vue.createCommentVNode("", true), _ctx.textContent && _ctx.realLoading ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass(_ctx.textClass)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.textContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), vue.createVNode(_component_t_node, {
    content: _ctx.defaultContent
  }, null, 8, ["content"])], 64)) : vue.createCommentVNode("", true)], 6);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=loading.js.map
