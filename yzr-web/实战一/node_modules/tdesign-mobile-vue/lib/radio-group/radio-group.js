/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var radio_radioGroupProps = require('../radio/radio-group-props.js');
var radio_radio = require('../radio/radio.js');
var config = require('../config.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('tdesign-icons-vue-next');
require('../shared/constants.js');
require('../radio/props.js');
require('../shared/render-tnode.js');
require('../shared/functions.js');
require('../shared/useVModel/index.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var componentName = "".concat(prefix, "-radio-group");
var script = vue.defineComponent({
  name: componentName,
  components: {
    Radio: radio_radio["default"]
  },
  props: radio_radioGroupProps["default"],
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      groupValue = _useDefault2[0],
      setGroupValue = _useDefault2[1];
    var groupOptions = vue.computed(function () {
      var _props$options;
      return (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.map(function (option) {
        var opt = option;
        if (typeof option === "string" || typeof option === "number") {
          opt = {
            value: option,
            label: option.toString()
          };
        }
        return opt;
      });
    });
    var handleRadioChange = function handleRadioChange(val, e) {
      setGroupValue(val, {
        e: e
      });
    };
    vue.provide("rootGroupProps", props);
    vue.provide("rootGroupValue", groupValue);
    vue.provide("rootGroupChange", handleRadioChange);
    return _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      componentName: componentName,
      groupOptions: groupOptions
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_radio = vue.resolveComponent("radio");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.componentName),
    role: "radiogroup"
  }, [_ctx.options ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {
    key: 0
  }, vue.renderList(_ctx.groupOptions, function (opt, idx) {
    return vue.openBlock(), vue.createBlock(_component_radio, {
      key: "radio-group-options-".concat(idx, "-").concat(Math.random()),
      name: _ctx.name,
      checked: _ctx.value === opt.value,
      disabled: "disabled" in opt ? opt.disabled : _ctx.disabled,
      value: opt.value,
      label: opt.label
    }, null, 8, ["name", "checked", "disabled", "value", "label"]);
  }), 128)) : vue.createCommentVNode("", true), !_ctx.options ? vue.renderSlot(_ctx.$slots, "default", {
    key: 1
  }) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=radio-group.js.map
