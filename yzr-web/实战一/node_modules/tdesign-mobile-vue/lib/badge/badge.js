/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var badge_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config["default"].prefix, "-badge");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: badge_props["default"],
  setup: function setup(props) {
    var internalInstance = vue.getCurrentInstance();
    var badgeContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var countContent = vue.computed(function () {
      if (props.dot) {
        return "";
      }
      if (typeof props.count === "function") {
        return shared_render.renderTNode(internalInstance, "count");
      }
      var count = Number(props.count);
      if (isNaN(count)) {
        return props.count;
      }
      return count > props.maxCount ? "".concat(props.maxCount, "+") : count;
    });
    var isIndependent = vue.computed(function () {
      return badgeContent.value === void 0;
    });
    var showDot = vue.computed(function () {
      return props.dot || props.count !== 0 || props.showZero;
    });
    var badgeClasses = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name), true), _defineProperty__default["default"](_ref, "".concat(name, "__ribbon--outer"), props.shape === "ribbon"), _ref;
    });
    var badgeInnerClasses = vue.computed(function () {
      var _ref2;
      return _ref2 = {}, _defineProperty__default["default"](_ref2, "".concat(name, "__inner"), true), _defineProperty__default["default"](_ref2, "".concat(name, "--has-children"), !isIndependent.value), _defineProperty__default["default"](_ref2, "".concat(name, "--").concat(props.size), props.size), _defineProperty__default["default"](_ref2, "".concat(name, "--").concat(props.shape), props.shape && !props.dot), _defineProperty__default["default"](_ref2, "".concat(name, "--dot"), props.dot), _ref2;
    });
    var badgeStyles = vue.computed(function () {
      if (!props.offset) {
        return {
          background: props.color
        };
      }
      var _props$offset = _slicedToArray__default["default"](props.offset, 2),
        xOffset = _props$offset[0],
        yOffset = _props$offset[1];
      xOffset = isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
      yOffset = isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
      return {
        background: props.color,
        right: xOffset,
        top: yOffset
      };
    });
    return _objectSpread(_objectSpread({
      badgeContent: badgeContent,
      showDot: showDot,
      badgeStyles: badgeStyles,
      badgeClasses: badgeClasses,
      badgeInnerClasses: badgeInnerClasses
    }, vue.toRefs(props)), {}, {
      countContent: countContent
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.badgeClasses)
  }, [_ctx.showDot ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass(_ctx.badgeInnerClasses),
    style: vue.normalizeStyle(_ctx.badgeStyles)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.countContent
  }, null, 8, ["content"])], 6)) : vue.createCommentVNode("", true), vue.createVNode(_component_t_node, {
    content: _ctx.badgeContent
  }, null, 8, ["content"])], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=badge.js.map
