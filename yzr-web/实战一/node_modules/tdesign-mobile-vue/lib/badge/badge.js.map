{"version":3,"file":"badge.js","sources":["../../src/badge/badge.vue","../../src/badge/badge.vue?vue&type=template&id=12fcd826&lang.js"],"sourcesContent":["<template>\n  <div :class=\"badgeClasses\">\n    <div v-if=\"showDot\" :class=\"badgeInnerClasses\" :style=\"badgeStyles\">\n      <t-node :content=\"countContent\"></t-node>\n    </div>\n    <t-node :content=\"badgeContent\"></t-node>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, toRefs } from 'vue';\nimport { renderContent, renderTNode, TNode } from '../shared';\nimport BadgeProps from './props';\nimport config from '../config';\n\nconst name = `${config.prefix}-badge`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: BadgeProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const badgeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const countContent = computed(() => {\n      if (props.dot) {\n        return '';\n      }\n      if (typeof props.count === 'function') {\n        return renderTNode(internalInstance, 'count');\n      }\n      const count = Number(props.count);\n      if (isNaN(count)) {\n        return props.count;\n      }\n      return count > props.maxCount ? `${props.maxCount}+` : count;\n    });\n    // 是否独立使用\n    const isIndependent = computed(() => badgeContent.value === undefined);\n\n    // 是否展示红点角标\n    const showDot = computed(() => props.dot || props.count !== 0 || props.showZero);\n\n    // 徽标外层样式类\n    const badgeClasses = computed(() => ({\n      [`${name}`]: true,\n      [`${name}__ribbon--outer`]: props.shape === 'ribbon',\n    }));\n\n    // 徽标内层样式类\n    const badgeInnerClasses = computed(() => ({\n      [`${name}__inner`]: true,\n      [`${name}--has-children`]: !isIndependent.value,\n      [`${name}--${props.size}`]: props.size,\n      [`${name}--${props.shape}`]: props.shape && !props.dot,\n      [`${name}--dot`]: props.dot,\n    }));\n\n    // 徽标自定义样式\n    const badgeStyles = computed(() => {\n      if (!props.offset) {\n        return { background: props.color };\n      }\n      let [xOffset, yOffset]: Array<string | number> = props.offset;\n      xOffset = isNaN(Number(xOffset)) ? xOffset : `${xOffset}px`;\n      yOffset = isNaN(Number(yOffset)) ? yOffset : `${yOffset}px`;\n      return {\n        background: props.color,\n        right: xOffset,\n        top: yOffset,\n      };\n    });\n\n    return {\n      badgeContent,\n      showDot,\n      badgeStyles,\n      badgeClasses,\n      badgeInnerClasses,\n      ...toRefs(props),\n      countContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"badgeClasses\">\n    <div v-if=\"showDot\" :class=\"badgeInnerClasses\" :style=\"badgeStyles\">\n      <t-node :content=\"countContent\"></t-node>\n    </div>\n    <t-node :content=\"badgeContent\"></t-node>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, toRefs } from 'vue';\nimport { renderContent, renderTNode, TNode } from '../shared';\nimport BadgeProps from './props';\nimport config from '../config';\n\nconst name = `${config.prefix}-badge`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: BadgeProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const badgeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const countContent = computed(() => {\n      if (props.dot) {\n        return '';\n      }\n      if (typeof props.count === 'function') {\n        return renderTNode(internalInstance, 'count');\n      }\n      const count = Number(props.count);\n      if (isNaN(count)) {\n        return props.count;\n      }\n      return count > props.maxCount ? `${props.maxCount}+` : count;\n    });\n    // 是否独立使用\n    const isIndependent = computed(() => badgeContent.value === undefined);\n\n    // 是否展示红点角标\n    const showDot = computed(() => props.dot || props.count !== 0 || props.showZero);\n\n    // 徽标外层样式类\n    const badgeClasses = computed(() => ({\n      [`${name}`]: true,\n      [`${name}__ribbon--outer`]: props.shape === 'ribbon',\n    }));\n\n    // 徽标内层样式类\n    const badgeInnerClasses = computed(() => ({\n      [`${name}__inner`]: true,\n      [`${name}--has-children`]: !isIndependent.value,\n      [`${name}--${props.size}`]: props.size,\n      [`${name}--${props.shape}`]: props.shape && !props.dot,\n      [`${name}--dot`]: props.dot,\n    }));\n\n    // 徽标自定义样式\n    const badgeStyles = computed(() => {\n      if (!props.offset) {\n        return { background: props.color };\n      }\n      let [xOffset, yOffset]: Array<string | number> = props.offset;\n      xOffset = isNaN(Number(xOffset)) ? xOffset : `${xOffset}px`;\n      yOffset = isNaN(Number(yOffset)) ? yOffset : `${yOffset}px`;\n      return {\n        background: props.color,\n        right: xOffset,\n        top: yOffset,\n      };\n    });\n\n    return {\n      badgeContent,\n      showDot,\n      badgeStyles,\n      badgeClasses,\n      badgeInnerClasses,\n      ...toRefs(props),\n      countContent,\n    };\n  },\n});\n</script>\n"],"names":["name","config","prefix","defineComponent","components","TNode","props","BadgeProps","setup","internalInstance","getCurrentInstance","badgeContent","computed","renderContent","countContent","dot","count","renderTNode","Number","isNaN","maxCount","isIndependent","value","showDot","showZero","badgeClasses","shape","badgeInnerClasses","_defineProperty","size","badgeStyles","offset","background","color","xOffset","yOffset","right","top","toRefs","_createElementBlock","class","_ctx","style","_createVNode","_component_t_node","content"],"mappings":"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"}