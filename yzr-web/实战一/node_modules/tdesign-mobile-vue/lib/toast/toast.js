/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var vue = require('vue');
var overlay_index = require('../overlay/index.js');
var toast_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../shared/component.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-toast");
var script = vue.defineComponent({
  name: name,
  components: {
    TOverlay: overlay_index["default"],
    TNode: shared_renderTnode["default"]
  },
  props: toast_props["default"],
  setup: function setup(props) {
    var toastTypeIcon = {
      loading: tdesignIconsVueNext.LoadingIcon,
      success: tdesignIconsVueNext.CheckCircleIcon,
      fail: tdesignIconsVueNext.ErrorCircleIcon
    };
    var internalInstance = vue.getCurrentInstance();
    var messageContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "message");
    });
    var iconContent = vue.computed(function () {
      var iconNode = shared_render.renderTNode(internalInstance, "icon");
      if (iconNode === void 0 && props.theme) {
        iconNode = vue.h(toastTypeIcon[props.theme]);
      }
      return iconNode;
    });
    var classes = vue.computed(function () {
      var _ref;
      return ["".concat(name), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--").concat(props.direction), props.direction), _defineProperty__default["default"](_ref, "".concat(name, "--text"), !iconContent.value), _defineProperty__default["default"](_ref, "".concat(name, "--icononly"), !messageContent.value && iconContent.value), _defineProperty__default["default"](_ref, "".concat(name, "--top"), props.placement === "top"), _defineProperty__default["default"](_ref, "".concat(name, "--middle"), props.placement === "middle"), _defineProperty__default["default"](_ref, "".concat(name, "--bottom"), props.placement === "bottom"), _ref)];
    });
    var customOverlayProps = vue.computed(function () {
      var toastOverlayProps = {
        preventScrollThrough: props.preventScrollThrough,
        visible: props.showOverlay
      };
      return _objectSpread(_objectSpread({}, props.overlayProps), toastOverlayProps);
    });
    return _objectSpread({
      name: vue.ref(name),
      classes: classes,
      iconContent: iconContent,
      messageContent: messageContent,
      customOverlayProps: customOverlayProps
    }, vue.toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = vue.resolveComponent("t-overlay");
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", null, [vue.createVNode(_component_t_overlay, vue.normalizeProps(vue.guardReactiveProps(_ctx.customOverlayProps)), null, 16), vue.createElementVNode("div", {
    class: vue.normalizeClass(_ctx.classes)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"]), _ctx.messageContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__text"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.messageContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2)]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=toast.js.map
