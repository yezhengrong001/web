{"version":3,"file":"toast.js","sources":["../../src/toast/toast.vue","../../src/toast/toast.vue?vue&type=template&id=0bd1ff37&lang.js"],"sourcesContent":["<template>\n  <div>\n    <t-overlay v-bind=\"customOverlayProps\" />\n    <div :class=\"classes\">\n      <t-node :content=\"iconContent\"></t-node>\n      <div v-if=\"messageContent\" :class=\"`${name}__text`\">\n        <t-node :content=\"messageContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { LoadingIcon, CheckCircleIcon, ErrorCircleIcon } from 'tdesign-icons-vue-next';\nimport { computed, toRefs, ref, defineComponent, getCurrentInstance, h } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport TOverlay from '../overlay';\nimport ToastProps from './props';\nimport config from '../config';\n\nconst { prefix } = config;\nconst name = `${prefix}-toast`;\n\nexport default defineComponent({\n  name,\n  components: { TOverlay, TNode },\n  props: ToastProps,\n  setup(props) {\n    const toastTypeIcon = {\n      loading: LoadingIcon,\n      success: CheckCircleIcon,\n      fail: ErrorCircleIcon,\n    };\n    const internalInstance = getCurrentInstance();\n    const messageContent = computed(() => renderTNode(internalInstance, 'message'));\n    const iconContent = computed(() => {\n      let iconNode = renderTNode(internalInstance, 'icon');\n      if (iconNode === undefined && props.theme) {\n        iconNode = h(toastTypeIcon[props.theme]);\n      }\n      return iconNode;\n    });\n\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${name}--${props.direction}`]: props.direction,\n        [`${name}--text`]: !iconContent.value,\n        [`${name}--icononly`]: !messageContent.value && iconContent.value,\n        [`${name}--top`]: props.placement === 'top',\n        [`${name}--middle`]: props.placement === 'middle',\n        [`${name}--bottom`]: props.placement === 'bottom',\n      },\n    ]);\n\n    const customOverlayProps = computed(() => {\n      const toastOverlayProps = {\n        preventScrollThrough: props.preventScrollThrough,\n        visible: props.showOverlay,\n      };\n\n      return {\n        ...props.overlayProps,\n        ...toastOverlayProps,\n      };\n    });\n\n    return {\n      name: ref(name),\n      classes,\n      iconContent,\n      messageContent,\n      customOverlayProps,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <t-overlay v-bind=\"customOverlayProps\" />\n    <div :class=\"classes\">\n      <t-node :content=\"iconContent\"></t-node>\n      <div v-if=\"messageContent\" :class=\"`${name}__text`\">\n        <t-node :content=\"messageContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { LoadingIcon, CheckCircleIcon, ErrorCircleIcon } from 'tdesign-icons-vue-next';\nimport { computed, toRefs, ref, defineComponent, getCurrentInstance, h } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport TOverlay from '../overlay';\nimport ToastProps from './props';\nimport config from '../config';\n\nconst { prefix } = config;\nconst name = `${prefix}-toast`;\n\nexport default defineComponent({\n  name,\n  components: { TOverlay, TNode },\n  props: ToastProps,\n  setup(props) {\n    const toastTypeIcon = {\n      loading: LoadingIcon,\n      success: CheckCircleIcon,\n      fail: ErrorCircleIcon,\n    };\n    const internalInstance = getCurrentInstance();\n    const messageContent = computed(() => renderTNode(internalInstance, 'message'));\n    const iconContent = computed(() => {\n      let iconNode = renderTNode(internalInstance, 'icon');\n      if (iconNode === undefined && props.theme) {\n        iconNode = h(toastTypeIcon[props.theme]);\n      }\n      return iconNode;\n    });\n\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${name}--${props.direction}`]: props.direction,\n        [`${name}--text`]: !iconContent.value,\n        [`${name}--icononly`]: !messageContent.value && iconContent.value,\n        [`${name}--top`]: props.placement === 'top',\n        [`${name}--middle`]: props.placement === 'middle',\n        [`${name}--bottom`]: props.placement === 'bottom',\n      },\n    ]);\n\n    const customOverlayProps = computed(() => {\n      const toastOverlayProps = {\n        preventScrollThrough: props.preventScrollThrough,\n        visible: props.showOverlay,\n      };\n\n      return {\n        ...props.overlayProps,\n        ...toastOverlayProps,\n      };\n    });\n\n    return {\n      name: ref(name),\n      classes,\n      iconContent,\n      messageContent,\n      customOverlayProps,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TOverlay","TNode","props","ToastProps","setup","toastTypeIcon","loading","LoadingIcon","success","CheckCircleIcon","fail","ErrorCircleIcon","internalInstance","getCurrentInstance","messageContent","computed","renderTNode","iconContent","iconNode","theme","h","classes","_defineProperty","direction","value","placement","customOverlayProps","toastOverlayProps","preventScrollThrough","visible","showOverlay","overlayProps","ref","toRefs","_createElementBlock","_createVNode","_component_t_overlay","_ctx","_createElementVNode","class","_component_t_node","content"],"mappings":"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"}