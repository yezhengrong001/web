/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var core = require('@vueuse/core');
var pullDownRefresh_props = require('./props.js');
var config = require('../config.js');
var loading_index = require('../loading/index.js');
var pullDownRefresh_useTouch = require('./useTouch.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../loading/icon/spinner.js');
require('../shared/constants.js');
require('../loading/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-pull-down-refresh");
var ANIMATION_DURATION = 300;
var statusName = ["pulling", "loosing", "loading", "success", "initial"];
var script = vue.defineComponent({
  name: name,
  components: {
    TLoading: loading_index["default"]
  },
  props: pullDownRefresh_props["default"],
  emits: ["refresh", "timeout", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var _props$loadingTexts;
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var trackStyle = vue.computed(function () {
      return {
        transitionDuration: "".concat(ANIMATION_DURATION, "ms"),
        transform: "translate3d(0, ".concat(distance.value, "px, 0)")
      };
    });
    var loadingBarStyles = vue.computed(function () {
      return {
        height: typeof props.loadingBarHeight === "number" ? "".concat(props.loadingBarHeight, "px") : props.loadingBarHeight
      };
    });
    var maxBarStyles = vue.computed(function () {
      return {
        height: typeof props.maxBarHeight === "number" ? "".concat(props.maxBarHeight, "px") : props.maxBarHeight
      };
    });
    var loadingIconProps = vue.computed(function () {
      return _objectSpread({}, props.loadingProps);
    });
    var isLoading = vue.ref(false);
    var distance = vue.ref(0);
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      statusValue = _useVModel2[0],
      setStatusValue = _useVModel2[1];
    var status = vue.computed(function () {
      if (!statusValue.value && isLoading.value) {
        return "success";
      }
      if (!statusValue.value || distance.value === 0) {
        return "initial";
      }
      if (distance.value < loadingBarHeight.value) {
        return "pulling";
      }
      if (isLoading.value) {
        return "loading";
      }
      return "loosing";
    });
    vue.watch(status, function (newVal) {
      if (newVal === "success" || newVal === "initial") {
        setTimeout(function () {
          distance.value = 0;
          isLoading.value = false;
        }, 300);
      }
    });
    var loadingTexts = vue.ref((_props$loadingTexts = props.loadingTexts) !== null && _props$loadingTexts !== void 0 && _props$loadingTexts.length ? props.loadingTexts : ["\u4E0B\u62C9\u5237\u65B0", "\u677E\u624B\u5237\u65B0", "\u6B63\u5728\u5237\u65B0", "\u5237\u65B0\u5B8C\u6210"]);
    var loadingText = vue.computed(function () {
      var index = statusName.indexOf(status.value);
      return index >= 0 ? loadingTexts.value[index] : "";
    });
    var touch = pullDownRefresh_useTouch.useTouch();
    var loadingBar = vue.ref(null);
    var maxBar = vue.ref(null);
    var _useElementSize = core.useElementSize(loadingBar),
      loadingBarHeight = _useElementSize.height;
    var _useElementSize2 = core.useElementSize(maxBar),
      maxBarHeight = _useElementSize2.height;
    var onTouchStart = function onTouchStart(e) {
      if (!pullDownRefresh_useTouch.isReachTop(e) || isLoading.value) return;
      setStatusValue(true);
      distance.value = 0;
      touch.start(e);
    };
    var onTouchMove = function onTouchMove(e) {
      if (!pullDownRefresh_useTouch.isReachTop(e) || isLoading.value) return;
      var deltaY = touch.deltaY;
      var nextDistance = pullDownRefresh_useTouch.easeDistance(deltaY.value, loadingBarHeight.value);
      if (deltaY.value > 0) {
        e.preventDefault();
      }
      if (nextDistance >= 0 && nextDistance < maxBarHeight.value) {
        distance.value = nextDistance;
      }
      touch.move(e);
    };
    var timer = null;
    var onTouchEnd = function onTouchEnd(e) {
      if (!pullDownRefresh_useTouch.isReachTop(e) || isLoading.value) return;
      if (status.value === "loosing") {
        distance.value = loadingBarHeight.value;
        isLoading.value = true;
        emitEvent("refresh");
        timer = setTimeout(function () {
          if (isLoading.value) {
            emitEvent("timeout");
            setStatusValue(false);
          }
        }, props.refreshTimeout);
      } else {
        setStatusValue(false);
      }
    };
    vue.onUnmounted(function () {
      clearTimeout(timer);
    });
    return {
      name: name,
      status: status,
      trackStyle: trackStyle,
      loadingText: loadingText,
      maxBarStyles: maxBarStyles,
      loadingBarStyles: loadingBarStyles,
      loadingIconProps: loadingIconProps,
      loadingBar: loadingBar,
      maxBar: maxBar,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd
    };
  }
});

var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_loading = vue.resolveComponent("t-loading");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.name)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__track")),
    style: vue.normalizeStyle(_ctx.trackStyle),
    onTouchstart: _cache[0] || (_cache[0] = vue.withModifiers(function () {
      return _ctx.onTouchStart && _ctx.onTouchStart.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(function () {
      return _ctx.onTouchMove && _ctx.onTouchMove.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchend: _cache[2] || (_cache[2] = vue.withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchcancel: _cache[3] || (_cache[3] = vue.withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"]))
  }, [vue.createElementVNode("div", {
    ref: "maxBar",
    class: vue.normalizeClass("".concat(_ctx.name, "__max")),
    style: vue.normalizeStyle(_ctx.maxBarStyles)
  }, [vue.createElementVNode("div", {
    ref: "loadingBar",
    class: vue.normalizeClass("".concat(_ctx.name, "__loading")),
    style: vue.normalizeStyle(_ctx.loadingBarStyles)
  }, [_ctx.status === "loading" ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [vue.createVNode(_component_t_loading, vue.mergeProps({
    text: _ctx.loadingText,
    class: "".concat(_ctx.name, "__loading-icon")
  }, _ctx.loadingIconProps), null, 16, ["text", "class"])])) : (vue.openBlock(), vue.createElementBlock("div", _hoisted_2, vue.toDisplayString(_ctx.loadingText), 1))], 6)], 6), vue.renderSlot(_ctx.$slots, "default")], 38)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=pull-down-refresh.js.map
