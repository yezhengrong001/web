/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var badge_index = require('../badge/index.js');
var config = require('../config.js');
var tabBar_useTabBar = require('./useTabBar.js');
var tabBar_tabBarItemProps = require('./tab-bar-item-props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('../badge/badge.js');
require('@babel/runtime/helpers/slicedToArray');
require('../badge/props.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var componentName = "".concat(prefix, "-tab-bar-item");
var script = vue.defineComponent({
  name: componentName,
  components: {
    TNode: shared_renderTnode["default"],
    TBadge: badge_index["default"]
  },
  props: tabBar_tabBarItemProps["default"],
  setup: function setup(props) {
    var _inject = vue.inject("tab-bar"),
      defaultIndex = _inject.defaultIndex,
      activeValue = _inject.activeValue,
      updateChild = _inject.updateChild;
    var currentName = tabBar_useTabBar.initName(defaultIndex);
    var hasSubTabBar = !!props.subTabBar;
    var isSpread = vue.ref(false);
    var isChecked = vue.computed(function () {
      if (hasSubTabBar && Array.isArray(activeValue.value)) {
        return activeValue.value.includes(currentName);
      }
      return currentName === activeValue.value;
    });
    vue.watch(isChecked, function (newValue) {
      if (!newValue) {
        isSpread.value = false;
      }
    });
    var isToggleCurrent = vue.computed(function () {
      return Array.isArray(activeValue.value) && activeValue.value[0] === currentName;
    });
    var toggle = function toggle() {
      if (hasSubTabBar) {
        isSpread.value = !isSpread.value;
        if (!isToggleCurrent.value) {
          updateChild([currentName]);
          return;
        }
      }
      updateChild(currentName);
    };
    var selectChild = function selectChild(childName) {
      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {
        updateChild([currentName, childName]);
      }
      isSpread.value = false;
    };
    var internalInstance = vue.getCurrentInstance();
    var itemContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var iconContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "icon");
    });
    return _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      prefix: prefix,
      componentName: componentName,
      isChecked: isChecked,
      toggle: toggle,
      isSpread: isSpread,
      selectChild: selectChild,
      itemContent: itemContent,
      iconContent: iconContent
    });
  }
});

var _hoisted_1 = ["aria-selected", "aria-haspopup"];
var _hoisted_2 = ["aria-label", "onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _normalizeClass2;
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_badge = vue.resolveComponent("t-badge");
  return vue.openBlock(), vue.createElementBlock("div", {
    role: "tab",
    "aria-label": "TabBar",
    "aria-selected": _ctx.isChecked,
    "aria-haspopup": _ctx.subTabBar && _ctx.subTabBar.length > 0,
    class: vue.normalizeClass([_ctx.componentName, _ctx.iconContent && "".concat(_ctx.prefix, "-no-border")])
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.componentName, "__content"), true), _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.prefix, "-is-checked"), _ctx.isChecked), _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.componentName, "--onlytext"), !_ctx.iconContent), _normalizeClass2)),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);
    })
  }, [_ctx.iconContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.componentName, "__icon"))
  }, [_ctx.badgeProps && (_ctx.badgeProps.dot || _ctx.badgeProps.count) ? (vue.openBlock(), vue.createBlock(_component_t_badge, {
    key: 0,
    count: _ctx.badgeProps.count,
    "max-count": _ctx.badgeProps.maxCount || 99,
    dot: _ctx.badgeProps.dot,
    content: _ctx.badgeProps.content,
    size: _ctx.badgeProps.size,
    offset: _ctx.badgeProps.offset || [0, 5]
  }, {
    default: vue.withCtx(function () {
      return [vue.createVNode(_component_t_node, {
        content: _ctx.iconContent
      }, null, 8, ["content"])];
    }),
    _: 1
  }, 8, ["count", "max-count", "dot", "content", "size", "offset"])) : (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 1,
    content: _ctx.iconContent
  }, null, 8, ["content"]))], 2)) : vue.createCommentVNode("", true), _ctx.itemContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.componentName, "__text"))
  }, [_ctx.subTabBar && _ctx.subTabBar.length > 0 ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.componentName, "__icon-menu"))
  }, null, 2)) : vue.createCommentVNode("", true), vue.createVNode(_component_t_node, {
    content: _ctx.itemContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2), vue.createVNode(vue.Transition, {
    name: "spread"
  }, {
    default: vue.withCtx(function () {
      return [_ctx.subTabBar && _ctx.subTabBar.length > 0 && _ctx.isSpread ? (vue.openBlock(), vue.createElementBlock("ul", {
        key: 0,
        role: "menu",
        class: vue.normalizeClass("".concat(_ctx.componentName, "__spread"))
      }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.subTabBar, function (child, index) {
        return vue.openBlock(), vue.createElementBlock("li", {
          key: child.value || index,
          role: "menuitem",
          "aria-label": child.label,
          class: vue.normalizeClass("".concat(_ctx.componentName, "__spread-item")),
          onClick: function onClick($event) {
            return _ctx.selectChild(child.value || index);
          }
        }, vue.toDisplayString(child.label), 11, _hoisted_2);
      }), 128))], 2)) : vue.createCommentVNode("", true)];
    }),
    _: 1
  })], 10, _hoisted_1);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=tab-bar-item.js.map
