/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var core = require('@vueuse/core');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var image_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-image");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: image_props["default"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var internalInstance = vue.getCurrentInstance();
    var statusContent = vue.computed(function () {
      var _context$slots, _context$slots2, _context$slots3, _context$slots4;
      if ((_context$slots = context.slots) !== null && _context$slots !== void 0 && _context$slots.loading && loadingValue.value) {
        return shared_render.renderTNode(internalInstance, "loading");
      }
      if (!((_context$slots2 = context.slots) !== null && _context$slots2 !== void 0 && _context$slots2.loading) && loadingValue.value) {
        return vue.h(tdesignIconsVueNext.EllipsisIcon);
      }
      if ((_context$slots3 = context.slots) !== null && _context$slots3 !== void 0 && _context$slots3.error && errorValue.value) {
        return shared_render.renderTNode(internalInstance, "error");
      }
      if (!((_context$slots4 = context.slots) !== null && _context$slots4 !== void 0 && _context$slots4.error) && errorValue.value) {
        return vue.h(tdesignIconsVueNext.CloseIcon);
      }
      return "";
    });
    var loadingValue = vue.ref(true);
    var errorValue = vue.ref(false);
    var imageStyles = vue.computed(function () {
      return {
        objectFit: props.fit,
        objectPosition: props.position
      };
    });
    var classes = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name), true), _defineProperty__default["default"](_ref, "".concat(name, "--").concat(props.shape), true), _ref;
    });
    var imageDOM = vue.ref();
    var realSrc = vue.ref("");
    vue.watchEffect(function () {
      realSrc.value = props.lazy ? "" : props.src;
    });
    var _useIntersectionObser = core.useIntersectionObserver(imageDOM, function (_ref2, observerElement) {
        var _ref3 = _slicedToArray__default["default"](_ref2, 1),
          isIntersecting = _ref3[0].isIntersecting;
        if (isIntersecting && props.lazy) {
          stop();
          realSrc.value = props.src;
        }
      }),
      stop = _useIntersectionObser.stop;
    var handleImgLoadCompleted = function handleImgLoadCompleted(e) {
      emitEvent("load", e);
      loadingValue.value = false;
    };
    var handleImgLoadError = function handleImgLoadError(e) {
      if (realSrc.value === "") {
        return;
      }
      emitEvent("error", e);
      loadingValue.value = false;
      errorValue.value = true;
    };
    return {
      imageDOM: imageDOM,
      statusContent: statusContent,
      name: name,
      classes: classes,
      imageStyles: imageStyles,
      loadingValue: loadingValue,
      realSrc: realSrc,
      errorValue: errorValue,
      handleImgLoadCompleted: handleImgLoadCompleted,
      handleImgLoadError: handleImgLoadError
    };
  }
});

var _hoisted_1 = ["src", "alt"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.classes)
  }, [_ctx.loadingValue || _ctx.errorValue ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__status"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.statusContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), vue.createElementVNode("img", {
    ref: "imageDOM",
    class: vue.normalizeClass("".concat(_ctx.name, "__img")),
    style: vue.normalizeStyle(_ctx.imageStyles),
    src: _ctx.realSrc,
    alt: _ctx.alt,
    onLoad: _cache[0] || (_cache[0] = function () {
      return _ctx.handleImgLoadCompleted && _ctx.handleImgLoadCompleted.apply(_ctx, arguments);
    }),
    onError: _cache[1] || (_cache[1] = function () {
      return _ctx.handleImgLoadError && _ctx.handleImgLoadError.apply(_ctx, arguments);
    })
  }, null, 46, _hoisted_1)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=image.js.map
