/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var popup_props = require('./props.js');
var overlay_index = require('../overlay/index.js');
var config = require('../config.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../shared/component.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-popup");
var script = vue.defineComponent({
  name: name,
  components: {
    TOverlay: overlay_index["default"]
  },
  props: popup_props["default"],
  emits: ["open", "close", "opened", "closed", "visible-change", "update:visible", "update:modelValue"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      currentVisible = _useDefault2[0];
    var rootClasses = vue.computed(function () {
      return name;
    });
    var rootStyles = vue.computed(function () {
      return props.customStyle || props.zIndex ? (props.customStyle && "".concat(props.customStyle, ";")) + (props.zIndex && "z-index:".concat(props.zIndex, ";")) : void 0;
    });
    var contentClasses = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--content"), true), _defineProperty__default["default"](_ref, "".concat(name, "--content-").concat(props.placement), true), _ref;
    });
    var contentTransitionName = vue.computed(function () {
      var transitionName = props.transitionName,
        placement = props.placement;
      if (transitionName) return transitionName;
      if (placement === "center") return "fade-zoom";
      return "slide-".concat(placement);
    });
    vue.watch(function () {
      return currentVisible.value;
    }, function (val) {
      var cls = "".concat(prefix, "-overflow-hidden");
      if (val) {
        document.body.classList.add(cls);
        emitEvent("open");
        currentVisible.value = true;
      } else {
        document.body.classList.remove(cls);
      }
    });
    var handleOverlayClick = function handleOverlayClick() {
      if (!props.closeOnOverlayClick) {
        return;
      }
      emitEvent("close");
      currentVisible.value = false;
    };
    var handleMove = function handleMove(e) {
      if (props.lockScroll) {
        e.preventDefault();
      }
    };
    var afterLeave = function afterLeave() {
      return emitEvent("closed");
    };
    var afterEnter = function afterEnter() {
      return emitEvent("opened");
    };
    return {
      name: vue.ref(name),
      currentVisible: currentVisible,
      rootClasses: rootClasses,
      rootStyles: rootStyles,
      contentClasses: contentClasses,
      contentTransitionName: contentTransitionName,
      afterEnter: afterEnter,
      afterLeave: afterLeave,
      handleOverlayClick: handleOverlayClick,
      handleMove: handleMove
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = vue.resolveComponent("t-overlay");
  return vue.openBlock(), vue.createBlock(vue.Teleport, {
    to: _ctx.to,
    disabled: !_ctx.to
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass([_ctx.rootClasses, _ctx.$attrs.class]),
    style: vue.normalizeStyle(_ctx.rootStyles),
    onTouchmove: _cache[0] || (_cache[0] = function () {
      return _ctx.handleMove && _ctx.handleMove.apply(_ctx, arguments);
    })
  }, [vue.createVNode(vue.Transition, {
    name: "fade"
  }, {
    default: vue.withCtx(function () {
      return [vue.createVNode(_component_t_overlay, vue.mergeProps(_ctx.overlayProps, {
        visible: _ctx.currentVisible,
        transparent: !_ctx.showOverlay,
        onClick: _ctx.handleOverlayClick
      }), null, 16, ["visible", "transparent", "onClick"])];
    }),
    _: 1
  }), vue.createVNode(vue.Transition, {
    name: _ctx.contentTransitionName,
    onAfterEnter: _ctx.afterEnter,
    onAfterLeave: _ctx.afterLeave
  }, {
    default: vue.withCtx(function () {
      return [vue.withDirectives(vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.contentClasses)
      }, [vue.renderSlot(_ctx.$slots, "default")], 2), [[vue.vShow, _ctx.currentVisible]])];
    }),
    _: 3
  }, 8, ["name", "onAfterEnter", "onAfterLeave"])], 38)], 8, ["to", "disabled"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=popup.js.map
