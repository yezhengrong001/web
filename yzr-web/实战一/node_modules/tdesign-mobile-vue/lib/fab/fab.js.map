{"version":3,"file":"fab.js","sources":["../../src/fab/fab.vue","../../src/fab/fab.vue?vue&type=template&id=237d41d9&lang.js"],"sourcesContent":["<template>\n  <t-button v-bind=\"customButtonProps\" :class=\"classes\" :style=\"style\" @click=\"onClick\">\n    <t-node v-if=\"iconTNode\" :content=\"iconTNode\" />\n    <span v-if=\"text\" :class=\"`${name}__text`\">{{ text }}</span>\n  </t-button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, SetupContext, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode, useEmitEvent } from '../shared';\nimport props from './props';\nimport config from '../config';\nimport TButton, { TdButtonProps } from '../button';\n\nconst { prefix } = config;\nconst name = `${prefix}-fab`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    const classes = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--icononly`]: props.icon && !props.text,\n    }));\n\n    const onClick = (e: MouseEvent) => emitEvent('click', { e });\n\n    const baseButtonProps = {\n      size: 'middle',\n      shape: 'round',\n      theme: 'primary',\n    };\n    const customButtonProps = computed(() => ({ ...(baseButtonProps as TdButtonProps), ...props.buttonProps }));\n\n    const internalInstance = getCurrentInstance();\n    const iconTNode = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      name,\n      classes,\n      iconTNode,\n      customButtonProps,\n      onClick,\n    };\n  },\n});\n</script>\n","<template>\n  <t-button v-bind=\"customButtonProps\" :class=\"classes\" :style=\"style\" @click=\"onClick\">\n    <t-node v-if=\"iconTNode\" :content=\"iconTNode\" />\n    <span v-if=\"text\" :class=\"`${name}__text`\">{{ text }}</span>\n  </t-button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, SetupContext, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode, useEmitEvent } from '../shared';\nimport props from './props';\nimport config from '../config';\nimport TButton, { TdButtonProps } from '../button';\n\nconst { prefix } = config;\nconst name = `${prefix}-fab`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    const classes = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--icononly`]: props.icon && !props.text,\n    }));\n\n    const onClick = (e: MouseEvent) => emitEvent('click', { e });\n\n    const baseButtonProps = {\n      size: 'middle',\n      shape: 'round',\n      theme: 'primary',\n    };\n    const customButtonProps = computed(() => ({ ...(baseButtonProps as TdButtonProps), ...props.buttonProps }));\n\n    const internalInstance = getCurrentInstance();\n    const iconTNode = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      name,\n      classes,\n      iconTNode,\n      customButtonProps,\n      onClick,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TNode","TButton","props","emits","setup","context","emitEvent","useEmitEvent","emit","classes","computed","_defineProperty","icon","text","onClick","e","baseButtonProps","size","shape","theme","customButtonProps","buttonProps","internalInstance","getCurrentInstance","iconTNode","renderTNode","_createBlock","_component_t_button","_mergeProps","_ctx","class","style","_component_t_node","content","_createElementBlock"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAQA,SAAWC,iBAAA,CAAXD;AACR,IAAME,OAAUF,EAAAA,CAAAA,MAAAA,CAAAA,MAAA,EAAA,MAAA,CAAA,CAAA;AAEhB,aAAeG,mBAAgB,CAAA;AAC7BD,EAAAA,IAAA,EAAAA,IAAA;AACAE,EAAAA,UAAA,EAAY;AAAEC,IAAAA,KAAA,EAAAA,6BAAA;AAAOC,IAAAA,OAAQ,EAARA,uBAAAA;GAAQ;AAC7BC,EAAAA,KAAA,EAAAA,oBAAA;EACAC,KAAA,EAAO,CAAC,OAAO,CAAA;AACfC,EAAAA,KAAA,EAAMF,SAAAA,KAAAA,CAAAA,QAAOG,OAAuB,EAAA;IAClC,IAAMC,SAAY,GAAAC,sCAAA,CAAaL,MAAO,EAAAG,OAAA,CAAQG,IAAI,CAAA,CAAA;IAE5C,IAAAC,OAAA,GAAUC,aAAS,YAAA;AAAA,MAAA,IAAA,IAAA,CAAA;AAAA,MAAA,OAAA,IAAA,GAAA,EAAA,EAAAC,mCAAA,CAAA,IAAA,EAAA,EAAA,CAAA,MAAA,CACnBd,IAAS,CAAA,EAAA,IAAA,CAAA,EAAAc,mCAAA,CAAA,IAAA,EAAA,EAAA,CAAA,MAAA,CACTd,IAAA,EAAA,YAAA,CAAA,EAAmBK,MAAM,CAAAU,IAAA,IAAQ,CAACV,MAAM,CAAAW,IAAA,CAAA,EAAA,IAAA,CAAA;AAAA,KAC5C,CAAA,CAAA;AAEF,IAAA,IAAMC,UAAU,SAAVA,QAAWC,CAAA,EAAA;MAAA,OAAkBT,UAAU,OAAS,EAAA;AAAES,QAAAA,GAAAA,CAAAA;AAAE,OAAC,CAAA,CAAA;AAAA,KAAA,CAAA;AAE3D,IAAA,IAAMC,eAAkB,GAAA;AACtBC,MAAAA,IAAM,EAAA,QAAA;AACNC,MAAAA,KAAO,EAAA,OAAA;AACPC,MAAAA,KAAO,EAAA,SAAA;KACT,CAAA;IACM,IAAAC,iBAAA,GAAoBV,aAAS,YAAA;AAAA,MAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAaM,eAAmC,CAAA,EAAGd,MAAM,CAAAmB,WAAA,CAAA,CAAA;AAAA,KAAc,CAAA,CAAA;IAE1G,IAAMC,mBAAmBC,sBAAmB,EAAA,CAAA;IAC5C,IAAMC,YAAYd,YAAS,CAAA,YAAA;AAAA,MAAA,OAAMe,yBAAY,CAAAH,gBAAA,EAAkB,MAAM,CAAC,CAAA;KAAA,CAAA,CAAA;IAE/D,OAAA;AACLzB,MAAAA,IAAA,EAAAA,IAAA;AACAY,MAAAA,OAAA,EAAAA,OAAA;AACAe,MAAAA,SAAA,EAAAA,SAAA;AACAJ,MAAAA,iBAAA,EAAAA,iBAAA;AACAN,MAAAA,OAAA,EAAAA,OAAAA;KACF,CAAA;AACF,GAAA;AACF,CAAC,CAAA;;;;;wBCjDC,EAAAY,eAAA,CAGUC,mBAHV,EAAAC,cAAA,CAGUC,KAHyBT,iBAAA,EAAA;IAAGU,OAAOD,IAAO,CAAApB,OAAA;IAAGsB,OAAOF,IAAK,CAAAE,KAAA;IAAGjB,SAAOe,IAAO,CAAAf,OAAAA;;yBAClF,YAAA;MAAA,OAA+C,CAAjCe,IAAS,CAAAL,SAAA,qBAAvBE,gBAA+CM,iBAAA,EAAA;;QAArBC,SAASJ,IAAS,CAAAL,SAAAA;oEAChCK,IAAI,CAAAhB,IAAA,qBAAhBqB,uBAA2D,MAAA,EAAA;;AAAxCJ,QAAAA,0BAAUD,EAAAA,CAAAA,MAAAA,CAAAA,IAAA,CAAIhC,IAAA,EAAA,QAAA,CAAA,CAAA;6BAAagC,IAAK,CAAAhB,IAAA,GAAA,CAAA,CAAA;;;;;;;;;;"}