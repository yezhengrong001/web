/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var fab_props = require('./props.js');
var config = require('../config.js');
var button_index = require('../button/index.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('../button/button.js');
require('tdesign-icons-vue-next');
require('../shared/constants.js');
require('../button/props.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-fab");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"],
    TButton: button_index["default"]
  },
  props: fab_props["default"],
  emits: ["click"],
  setup: function setup(props2, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props2, context.emit);
    var classes = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name), true), _defineProperty__default["default"](_ref, "".concat(name, "--icononly"), props2.icon && !props2.text), _ref;
    });
    var onClick = function onClick(e) {
      return emitEvent("click", {
        e: e
      });
    };
    var baseButtonProps = {
      size: "middle",
      shape: "round",
      theme: "primary"
    };
    var customButtonProps = vue.computed(function () {
      return _objectSpread(_objectSpread({}, baseButtonProps), props2.buttonProps);
    });
    var internalInstance = vue.getCurrentInstance();
    var iconTNode = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "icon");
    });
    return {
      name: name,
      classes: classes,
      iconTNode: iconTNode,
      customButtonProps: customButtonProps,
      onClick: onClick
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_button = vue.resolveComponent("t-button");
  return vue.openBlock(), vue.createBlock(_component_t_button, vue.mergeProps(_ctx.customButtonProps, {
    class: _ctx.classes,
    style: _ctx.style,
    onClick: _ctx.onClick
  }), {
    default: vue.withCtx(function () {
      return [_ctx.iconTNode ? (vue.openBlock(), vue.createBlock(_component_t_node, {
        key: 0,
        content: _ctx.iconTNode
      }, null, 8, ["content"])) : vue.createCommentVNode("", true), _ctx.text ? (vue.openBlock(), vue.createElementBlock("span", {
        key: 1,
        class: vue.normalizeClass("".concat(_ctx.name, "__text"))
      }, vue.toDisplayString(_ctx.text), 3)) : vue.createCommentVNode("", true)];
    }),
    _: 1
  }, 16, ["class", "style", "onClick"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=fab.js.map
