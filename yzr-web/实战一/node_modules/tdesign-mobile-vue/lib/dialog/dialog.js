/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var button_index = require('../button/index.js');
var popup_index = require('../popup/index.js');
var config = require('../config.js');
var dialog_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('../button/button.js');
require('tdesign-icons-vue-next');
require('../shared/constants.js');
require('../button/props.js');
require('../shared/useEmitEvent/index.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');
require('../shared/component.js');
require('../popup/popup.js');
require('@babel/runtime/helpers/slicedToArray');
require('../popup/props.js');
require('../overlay/index.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../shared/useDefault/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-dialog");
var script = vue.defineComponent({
  name: name,
  components: {
    TPopup: popup_index["default"],
    TNode: shared_renderTnode["default"],
    TButton: button_index["default"]
  },
  props: dialog_props["default"],
  emits: ["update:visible", "confirm", "overlay-click", "cancel", "change", "close"],
  setup: function setup(props, context) {
    var internalInstance = vue.getCurrentInstance();
    var dialogContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var innerValue = vue.ref("");
    var dClassName = vue.computed(function () {
      return "".concat(name);
    });
    var dBoxClassName = vue.computed(function () {
      return "".concat(name, "__box");
    });
    var dHeaderClassName = vue.computed(function () {
      return ["".concat(name, "__header"), _defineProperty__default["default"]({}, "".concat(name, "__header--has-content"), dialogContent)];
    });
    var dTitleClassName = vue.computed(function () {
      return "".concat(name, "__title");
    });
    var dBodyClassName = vue.computed(function () {
      return "".concat(name, "__body");
    });
    var dTextClassName = vue.computed(function () {
      return "".concat(name, "__text");
    });
    var dInputClassName = vue.computed(function () {
      return "".concat(name, "__input");
    });
    var dFooterClassName = vue.computed(function () {
      return [_defineProperty__default["default"]({}, "".concat(name, "__vertical-footer"), props.buttonLayout === "vertical"), "".concat(name, "__footer")];
    });
    var dDefaultBtnClassName = vue.computed(function () {
      return ["".concat(name, "__btn"), "".concat(name, "__btn--default"), "".concat(name, "__").concat(props.buttonLayout, "-btn")];
    });
    var dConfirmBtnClassName = vue.computed(function () {
      return ["".concat(name, "__btn"), "".concat(name, "__btn--primary"), "".concat(name, "__").concat(props.buttonLayout, "-btn")];
    });
    var rootStyles = vue.computed(function () {
      return {
        zIndex: props.zIndex,
        width: typeof props.width === "string" ? props.width : "".concat(props.width, "px")
      };
    });
    var handleConfirm = function handleConfirm() {
      context.emit("update:visible", false);
      context.emit("confirm");
    };
    var handleCancel = function handleCancel() {
      context.emit("update:visible", false);
      context.emit("close", "cancel");
      context.emit("cancel");
    };
    var handleOverlayClick = function handleOverlayClick() {
      if (!props.closeOnOverlayClick) {
        return;
      }
      context.emit("update:visible", false);
      context.emit("close", "overlay");
      context.emit("overlay-click");
    };
    vue.watch(function () {
      return props.visible;
    }, function (val) {
      context.emit("change", val);
    });
    var calcBtn = function calcBtn(btn) {
      return typeof btn === "string" ? {
        content: btn
      } : btn;
    };
    var confirmBtnProps = vue.computed(function () {
      return calcBtn(props.confirmBtn);
    });
    var cancelBtnProps = vue.computed(function () {
      return calcBtn(props.cancelBtn);
    });
    var actionsBtnProps = vue.computed(function () {
      var _props$actions;
      return (_props$actions = props.actions) === null || _props$actions === void 0 ? void 0 : _props$actions.map(function (item) {
        return calcBtn(item);
      });
    });
    return _objectSpread({
      innerValue: innerValue,
      dClassName: dClassName,
      dBoxClassName: dBoxClassName,
      dHeaderClassName: dHeaderClassName,
      dTitleClassName: dTitleClassName,
      dBodyClassName: dBodyClassName,
      dTextClassName: dTextClassName,
      dInputClassName: dInputClassName,
      dFooterClassName: dFooterClassName,
      dDefaultBtnClassName: dDefaultBtnClassName,
      dConfirmBtnClassName: dConfirmBtnClassName,
      dialogContent: dialogContent,
      confirmBtnProps: confirmBtnProps,
      cancelBtnProps: cancelBtnProps,
      actionsBtnProps: actionsBtnProps,
      handleConfirm: handleConfirm,
      handleCancel: handleCancel,
      handleOverlayClick: handleOverlayClick,
      rootStyles: rootStyles
    }, vue.toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_button = vue.resolveComponent("t-button");
  var _component_t_popup = vue.resolveComponent("t-popup");
  return vue.openBlock(), vue.createBlock(_component_t_popup, {
    visible: _ctx.visible,
    placement: "center",
    "mask-transparent": !_ctx.showOverlay,
    "teleport-disabled": true,
    "lock-scroll": _ctx.preventScrollThrough,
    onClose: _ctx.handleOverlayClick
  }, {
    default: vue.withCtx(function () {
      return [vue.createElementVNode("div", {
        id: "root",
        class: vue.normalizeClass(_ctx.dClassName),
        style: vue.normalizeStyle(_ctx.rootStyles)
      }, [vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.dHeaderClassName)
      }, [vue.renderSlot(_ctx.$slots, "header", {}, function () {
        return [_ctx.title ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.dTitleClassName)
        }, vue.toDisplayString(_ctx.title), 3)) : vue.createCommentVNode("", true)];
      })], 2), _ctx.content ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.dBodyClassName)
      }, [vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.dTextClassName)
      }, [vue.createVNode(_component_t_node, {
        content: _ctx.dialogContent
      }, null, 8, ["content"])], 2)], 2)) : vue.createCommentVNode("", true), vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.dFooterClassName)
      }, [vue.renderSlot(_ctx.$slots, "actions", {}, function () {
        return [_ctx.actionsBtnProps ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {
          key: 0
        }, vue.renderList(_ctx.actionsBtnProps, function (item, index) {
          return vue.openBlock(), vue.createBlock(_component_t_button, vue.mergeProps({
            key: index
          }, item, {
            variant: "text",
            class: _ctx.dDefaultBtnClassName,
            onClick: _ctx.handleCancel
          }), null, 16, ["class", "onClick"]);
        }), 128)) : vue.createCommentVNode("", true)];
      }), vue.renderSlot(_ctx.$slots, "cancelBtn", {}, function () {
        return [_ctx.cancelBtn ? (vue.openBlock(), vue.createBlock(_component_t_button, vue.mergeProps({
          key: 0
        }, _ctx.cancelBtnProps, {
          variant: "text",
          class: _ctx.dDefaultBtnClassName,
          onClick: _ctx.handleCancel
        }), null, 16, ["class", "onClick"])) : vue.createCommentVNode("", true)];
      }), vue.renderSlot(_ctx.$slots, "confirmBtn", {}, function () {
        return [_ctx.confirmBtn ? (vue.openBlock(), vue.createBlock(_component_t_button, vue.mergeProps({
          key: 0
        }, _ctx.confirmBtnProps, {
          variant: "text",
          class: _ctx.dConfirmBtnClassName,
          onClick: _ctx.handleConfirm
        }), null, 16, ["class", "onClick"])) : vue.createCommentVNode("", true)];
      })], 2)], 6)];
    }),
    _: 3
  }, 8, ["visible", "mask-transparent", "lock-scroll", "onClose"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=dialog.js.map
