/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var rate_props = require('./props.js');
var config = require('../config.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-rate");
var script = vue.defineComponent({
  name: name,
  components: {
    StarFilledIcon: tdesignIconsVueNext.StarFilledIcon,
    StarIcon: tdesignIconsVueNext.StarIcon
  },
  props: rate_props["default"],
  emits: ["change", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var rateWrapper = vue.ref(null);
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      actualVal = _useDefault2[0];
    var rateText = vue.computed(function () {
      if (Array.isArray(props.texts) && props.texts.length > 0) {
        return props.texts[actualVal.value - 1];
      }
      return actualVal.value > 0 ? "".concat(actualVal.value, " \u5206") : "";
    });
    var colors = vue.computed(function () {
      if (Array.isArray(props.color)) return props.color;
      return [props.color, void 0];
    });
    var iconHalfStyle = function iconHalfStyle(n) {
      return {
        color: actualVal.value + 0.5 === n || actualVal.value >= n ? colors.value[0] : "transparent"
      };
    };
    var iconFullStyle = function iconFullStyle(n) {
      return {
        color: actualVal.value >= n ? colors.value[0] : "transparent"
      };
    };
    var startComponent = props.variant === "filled" ? tdesignIconsVueNext.StarFilledIcon : tdesignIconsVueNext.StarIcon;
    var classes = function classes(n) {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--item"), true), _defineProperty__default["default"](_ref, "".concat(name, "-full"), actualVal.value >= n), _defineProperty__default["default"](_ref, "".concat(name, "-half"), actualVal.value + 0.5 === n), _ref;
    };
    function onClick(current) {
      if (props.disabled) return;
      actualVal.value = props.clearable && actualVal.value === current ? 0 : current;
    }
    var ranges = [];
    function onTouchstart() {
      ranges = [];
      if (rateWrapper.value) {
        var items = rateWrapper.value.children;
        Array.from(items).forEach(function (node, index) {
          var _node$getBoundingClie = node.getBoundingClientRect(),
            left = _node$getBoundingClie.left,
            width = _node$getBoundingClie.width;
          if (props.allowHalf) {
            ranges.push({
              score: index + 0.5,
              left: left
            }, {
              score: index + 1,
              left: left + width / 2
            });
          } else {
            ranges.push({
              score: index + 1,
              left: left
            });
          }
        });
      }
    }
    function onTouchmove(e) {
      if (props.disabled) return;
      var clientX = e.touches[0].clientX;
      var score = props.allowHalf ? 0.5 : 1;
      for (var i = ranges.length - 1; i >= 0; i--) {
        if (clientX > ranges[i].left) {
          score = ranges[i].score;
          break;
        } else {
          score = 0;
        }
      }
      actualVal.value = score;
    }
    return {
      name: vue.ref(name),
      classes: classes,
      rateWrapper: rateWrapper,
      actualVal: actualVal,
      iconHalfStyle: iconHalfStyle,
      iconFullStyle: iconFullStyle,
      colors: colors,
      startComponent: startComponent,
      rateText: rateText,
      onClick: onClick,
      onTouchstart: onTouchstart,
      onTouchmove: onTouchmove
    };
  }
});

var _hoisted_1 = ["onClick"];
var _hoisted_2 = ["onClick"];
var _hoisted_3 = ["onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_star_filled_icon = vue.resolveComponent("star-filled-icon");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass("".concat(_ctx.name))
  }, [vue.createElementVNode("ul", {
    ref: "rateWrapper",
    class: vue.normalizeClass("".concat(_ctx.name, "--list")),
    onTouchstart: _cache[0] || (_cache[0] = function () {
      return _ctx.onTouchstart && _ctx.onTouchstart.apply(_ctx, arguments);
    }),
    onTouchmove: _cache[1] || (_cache[1] = function () {
      return _ctx.onTouchmove && _ctx.onTouchmove.apply(_ctx, arguments);
    })
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.count, function (n) {
    return vue.openBlock(), vue.createElementBlock("li", {
      key: n,
      class: vue.normalizeClass(_ctx.classes(n)),
      style: vue.normalizeStyle({
        marginRight: "".concat(_ctx.count > n ? _ctx.gap : 0, "px")
      })
    }, [vue.createElementVNode("span", {
      class: vue.normalizeClass("".concat(_ctx.name, "--placeholder"))
    }, [vue.renderSlot(_ctx.$slots, "icon", {}, function () {
      return [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.startComponent), {
        size: _ctx.size,
        style: vue.normalizeStyle({
          color: _ctx.colors[1]
        })
      }, null, 8, ["size", "style"]))];
    })], 2), _ctx.allowHalf ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
      key: 0
    }, [vue.createElementVNode("span", {
      class: vue.normalizeClass("".concat(_ctx.name, "--icon-left")),
      onClick: function onClick($event) {
        return _ctx.onClick(n - 0.5);
      }
    }, [vue.renderSlot(_ctx.$slots, "icon", {}, function () {
      return [vue.createVNode(_component_star_filled_icon, {
        size: _ctx.size,
        style: vue.normalizeStyle(_ctx.iconHalfStyle(n))
      }, null, 8, ["size", "style"])];
    })], 10, _hoisted_1), vue.createElementVNode("span", {
      class: vue.normalizeClass("".concat(_ctx.name, "--icon-right")),
      onClick: function onClick($event) {
        return _ctx.onClick(n);
      }
    }, [vue.renderSlot(_ctx.$slots, "icon", {}, function () {
      return [vue.createVNode(_component_star_filled_icon, {
        size: _ctx.size,
        style: vue.normalizeStyle(_ctx.iconFullStyle(n))
      }, null, 8, ["size", "style"])];
    })], 10, _hoisted_2)], 64)) : (vue.openBlock(), vue.createElementBlock("span", {
      key: 1,
      class: vue.normalizeClass("".concat(_ctx.name, "--icon")),
      onClick: function onClick($event) {
        return _ctx.onClick(n);
      }
    }, [vue.renderSlot(_ctx.$slots, "icon", {}, function () {
      return [vue.createVNode(_component_star_filled_icon, {
        size: _ctx.size,
        style: vue.normalizeStyle(_ctx.iconFullStyle(n))
      }, null, 8, ["size", "style"])];
    })], 10, _hoisted_3))], 6);
  }), 128))], 34), _ctx.showText ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "--text"))
  }, vue.toDisplayString(_ctx.rateText), 3)) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=rate.js.map
