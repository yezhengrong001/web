import { ExtractPropTypes, PropType, ComputedRef } from 'vue';
declare const _default: import("vue").DefineComponent<{
    allowHalf: BooleanConstructor;
    clearable: BooleanConstructor;
    color: {
        type: PropType<string | string[] | undefined>;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    gap: {
        type: NumberConstructor;
        default: number;
    };
    showText: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: string;
    };
    texts: {
        type: PropType<string[] | undefined>;
    };
    value: {
        type: NumberConstructor;
        default: undefined;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultValue: {
        type: NumberConstructor;
        default: undefined;
    };
    variant: {
        type: PropType<"outline" | "filled" | undefined>;
        default: "outline" | "filled" | undefined;
        validator(val: "outline" | "filled" | undefined): boolean;
    };
    onChange: PropType<((value: number) => void) | undefined>;
}, {
    name: import("vue").Ref<string>;
    classes: (n: number) => {
        [x: string]: boolean;
    };
    rateWrapper: import("vue").Ref<HTMLElement | null>;
    actualVal: import("vue").WritableComputedRef<number>;
    iconHalfStyle: (n: number) => {
        color: string | undefined;
    };
    iconFullStyle: (n: number) => {
        color: string | undefined;
    };
    colors: ComputedRef<(string | undefined)[]>;
    startComponent: import("vue").DefineComponent<{
        size: {
            type: StringConstructor;
        };
        onClick: {
            type: PropType<(context: {
                e: MouseEvent;
            }) => void>;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        size?: unknown;
        onClick?: unknown;
    } & {
        size?: string | undefined;
        onClick?: ((context: {
            e: MouseEvent;
        }) => void) | undefined;
    }>, {}>;
    rateText: ComputedRef<string>;
    onClick: (current: number) => void;
    onTouchstart: () => void;
    onTouchmove: (e: TouchEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    allowHalf: BooleanConstructor;
    clearable: BooleanConstructor;
    color: {
        type: PropType<string | string[] | undefined>;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    gap: {
        type: NumberConstructor;
        default: number;
    };
    showText: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: string;
    };
    texts: {
        type: PropType<string[] | undefined>;
    };
    value: {
        type: NumberConstructor;
        default: undefined;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultValue: {
        type: NumberConstructor;
        default: undefined;
    };
    variant: {
        type: PropType<"outline" | "filled" | undefined>;
        default: "outline" | "filled" | undefined;
        validator(val: "outline" | "filled" | undefined): boolean;
    };
    onChange: PropType<((value: number) => void) | undefined>;
}>>, {
    value: number;
    modelValue: number;
    count: number;
    size: string;
    disabled: boolean;
    variant: "outline" | "filled" | undefined;
    gap: number;
    defaultValue: number;
    clearable: boolean;
    allowHalf: boolean;
    showText: boolean;
}>;
export default _default;
