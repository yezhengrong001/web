/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var core = require('@vueuse/core');
var vue = require('vue');
var swipeCell_props = require('./props.js');
var config = require('../config.js');
var button_index = require('../button/index.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('../button/button.js');
require('tdesign-icons-vue-next');
require('../shared/constants.js');
require('../button/props.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-swipe-cell");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"],
    TButton: button_index["default"]
  },
  props: swipeCell_props["default"],
  emits: ["click", "change"],
  setup: function setup(props2, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props2, context.emit);
    var internalInstance = vue.getCurrentInstance();
    var swipeContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var swipeLeftMenu = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "left");
    });
    var swipeRightMenu = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "right");
    });
    var leftRef = vue.ref();
    var rightRef = vue.ref();
    var swipeCell = vue.ref();
    var _useSwipe = core.useSwipe(swipeCell, {
        threshold: 0,
        onSwipeStart: function onSwipeStart(e) {
          initData.moving = true;
          initData.pos = 0;
        },
        onSwipe: function onSwipe(e) {
          if (props2.disabled) {
            return;
          }
          if (initData.moving && initData.status === "close") {
            initData.moving = false;
          }
          var pos = 0;
          if (lengthX.value < 0) {
            if (initData.leftWidth === 0) {
              initData.moving = false;
              return;
            }
            pos = Math.min(Math.abs(lengthX.value), initData.leftWidth > 0 ? initData.leftWidth + spring : 0);
          } else {
            if (initData.rightWidth === 0) {
              initData.moving = false;
              return;
            }
            pos = Math.max(-lengthX.value, -(initData.rightWidth > 0 ? initData.rightWidth + spring : 0));
          }
          if (initData.status === "close") {
            initData.pos = pos;
          }
        },
        onSwipeEnd: function onSwipeEnd(e) {
          end();
        }
      }),
      lengthX = _useSwipe.lengthX;
    var distance = 0;
    var threshold = 0.5;
    var spring = 0;
    var initData = vue.reactive({
      moving: false,
      leftWidth: 0,
      rightWidth: 0,
      pos: 0,
      status: "close"
    });
    var classes = vue.computed(function () {
      return ["".concat(name)];
    });
    vue.onMounted(function () {
      var _leftRef$value, _rightRef$value;
      var leftWidth = (_leftRef$value = leftRef.value) === null || _leftRef$value === void 0 ? void 0 : _leftRef$value.clientWidth;
      var rightWidth = (_rightRef$value = rightRef.value) === null || _rightRef$value === void 0 ? void 0 : _rightRef$value.clientWidth;
      initData.leftWidth = leftWidth > 0 ? leftWidth + distance : 0;
      initData.rightWidth = rightWidth > 0 ? rightWidth + distance : 0;
      renderMenuStatus();
    });
    vue.watch(function () {
      return props2.expanded;
    }, function () {
      return renderMenuStatus();
    });
    core.onClickOutside(swipeCell, function (event) {
      close();
    });
    var renderMenuStatus = function renderMenuStatus() {
      if (props2.expanded && props2.expanded === "left") {
        if (initData.leftWidth) {
          open("toRight");
        }
      }
      if (props2.expanded && props2.expanded === "right") {
        if (initData.rightWidth) {
          open("toLeft");
        }
      }
    };
    var end = function end() {
      if (props2.disabled) {
        return;
      }
      if (lengthX.value < 0 && initData.pos > initData.leftWidth * threshold) {
        open("toRight");
      } else if (lengthX.value > 0 && -initData.pos > initData.rightWidth * threshold) {
        open("toLeft");
      } else {
        close("force");
      }
    };
    var open = function open(direction) {
      if (initData.status === "open") {
        return;
      }
      initData.moving = true;
      initData.status = "open";
      if (direction === "toLeft") {
        initData.pos = -initData.rightWidth;
        if (initData.rightWidth) {
          emitEvent("change", "right");
        }
      } else {
        initData.pos = initData.leftWidth;
        if (initData.leftWidth) {
          emitEvent("change", "left");
        }
      }
    };
    var close = function close(type) {
      if (initData.status === "close" && type !== "force") {
        return;
      }
      initData.moving = true;
      initData.status = "close";
      initData.pos = 0;
      emitEvent("change", void 0);
    };
    var handleClickBtn = function handleClickBtn(_ref) {
      var action = _ref.action,
        source = _ref.source;
      {
        close();
      }
      if (action.onClick) {
        action.onClick();
        return;
      }
      emitEvent("click", {
        action: action,
        source: source
      });
    };
    return _objectSpread$1(_objectSpread$1({}, vue.toRefs(props2)), {}, {
      swipeContent: swipeContent,
      swipeLeftMenu: swipeLeftMenu,
      swipeRightMenu: swipeRightMenu,
      initData: initData,
      classes: classes,
      swipeCell: swipeCell,
      leftRef: leftRef,
      rightRef: rightRef,
      handleClickBtn: handleClickBtn,
      end: end
    });
  }
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _normalizeClass2;
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_button = vue.resolveComponent("t-button");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.classes),
    onTouchend: _cache[2] || (_cache[2] = function () {
      return _ctx.end && _ctx.end.apply(_ctx, arguments);
    }),
    onTouchcancel: _cache[3] || (_cache[3] = function () {
      return _ctx.end && _ctx.end.apply(_ctx, arguments);
    }),
    onMouseup: _cache[4] || (_cache[4] = function () {
      return _ctx.end && _ctx.end.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, _ctx.classes + "__wrapper", true), _defineProperty__default["default"](_normalizeClass2, "moving", _ctx.initData.moving), _normalizeClass2)),
    style: vue.normalizeStyle({
      transform: "translate3d(".concat(_ctx.initData.pos, "px,0,0)")
    })
  }, [vue.createElementVNode("div", {
    ref: "leftRef",
    class: vue.normalizeClass(_ctx.classes + "__left"),
    style: vue.normalizeStyle({
      width: _ctx.initData.leftWidth ? "".concat(_ctx.initData.leftWidth, "px") : "auto"
    }),
    onTouchstartPassive: _cache[0] || (_cache[0] = vue.withModifiers(function () {}, ["stop"]))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.swipeLeftMenu
  }, null, 8, ["content"]), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.left, function (btn, index) {
    return vue.openBlock(), vue.createBlock(_component_t_button, {
      key: index,
      class: vue.normalizeClass(btn.className || ""),
      style: vue.normalizeStyle(btn.style || "height: 100%"),
      onClick: function onClick($event) {
        return _ctx.handleClickBtn({
          action: _objectSpread({}, btn),
          source: "left"
        });
      }
    }, {
      default: vue.withCtx(function () {
        return [vue.createTextVNode(vue.toDisplayString(btn.text), 1)];
      }),
      _: 2
    }, 1032, ["class", "style", "onClick"]);
  }), 128))], 38), vue.createElementVNode("div", {
    ref: "swipeCell",
    class: vue.normalizeClass(_ctx.classes + "__content")
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.swipeContent
  }, null, 8, ["content"])], 2), vue.createElementVNode("div", {
    ref: "rightRef",
    class: vue.normalizeClass(_ctx.classes + "__right"),
    style: vue.normalizeStyle({
      width: _ctx.initData.rightWidth ? "".concat(_ctx.initData.rightWidth, "px") : "auto"
    }),
    onTouchstartPassive: _cache[1] || (_cache[1] = vue.withModifiers(function () {}, ["stop"]))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.swipeRightMenu
  }, null, 8, ["content"]), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.right, function (btn, index) {
    return vue.openBlock(), vue.createBlock(_component_t_button, {
      key: index,
      class: vue.normalizeClass(btn.className || ""),
      style: vue.normalizeStyle(btn.style || "height: 100%"),
      onClick: function onClick($event) {
        return _ctx.handleClickBtn({
          action: _objectSpread({}, btn),
          source: "right"
        });
      }
    }, {
      default: vue.withCtx(function () {
        return [vue.createTextVNode(vue.toDisplayString(btn.text), 1)];
      }),
      _: 2
    }, 1032, ["class", "style", "onClick"]);
  }), 128))], 38)], 6)], 34);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=swipe-cell.js.map
