import { Ref, ComputedRef } from 'vue';
import { UploadFile, RequestMethodResponse, SizeLimitObj } from './type';
import { SuccessContext, InnerProgressContext } from './interface';
declare const _default: import("vue").DefineComponent<{
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: import("vue").PropType<((file: File | UploadFile) => boolean | Promise<boolean>) | undefined>;
    };
    data: {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>) | undefined>;
    };
    deleteBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    fileListDisplay: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    files: {
        type: import("vue").PropType<UploadFile[] | undefined>;
    };
    defaultFiles: {
        type: import("vue").PropType<UploadFile[] | undefined>;
    };
    format: {
        type: import("vue").PropType<((file: File) => UploadFile) | undefined>;
    };
    formatResponse: {
        type: import("vue").PropType<((response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType) | undefined>;
    };
    gridConfig: {
        type: import("vue").PropType<{
            column?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
        } | undefined>;
    };
    headers: {
        type: import("vue").PropType<{
            [key: string]: string;
        } | undefined>;
    };
    imageProps: {
        type: import("vue").PropType<import("../image").TdImageProps | undefined>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: import("vue").PropType<"option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined>;
        default: "option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined;
        validator(val: "option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined): boolean;
    };
    multiple: BooleanConstructor;
    requestMethod: {
        type: import("vue").PropType<((files: UploadFile | UploadFile[]) => Promise<RequestMethodResponse>) | undefined>;
    };
    sizeLimit: {
        type: import("vue").PropType<number | SizeLimitObj | undefined>;
    };
    trigger: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue) | undefined>;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: import("vue").PropType<(() => void) | undefined>;
    onChange: import("vue").PropType<((value: UploadFile[], context: import("./type").UploadChangeContext) => void) | undefined>;
    onFail: import("vue").PropType<((options: {
        e: ProgressEvent<EventTarget>;
        file: UploadFile;
    }) => void) | undefined>;
    onPreview: import("vue").PropType<((options: {
        file: UploadFile;
        e: MouseEvent;
    }) => void) | undefined>;
    onProgress: import("vue").PropType<((options: import("./type").ProgressContext) => void) | undefined>;
    onRemove: import("vue").PropType<((context: import("./type").UploadRemoveContext) => void) | undefined>;
    onSelectChange: import("vue").PropType<((files: UploadFile[]) => void) | undefined>;
    onSuccess: import("vue").PropType<((context: import("./type").SuccessContext) => void) | undefined>;
}, {
    UPLOAD_NAME: string;
    images: Ref<string[]>;
    showViewer: Ref<boolean>;
    initialIndex: Ref<number>;
    prefix: string;
    innerFiles: import("vue").WritableComputedRef<UploadFile[] | undefined>;
    xhrReq: Ref<{
        onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;
        readonly readyState: number;
        readonly response: any;
        readonly responseText: string;
        responseType: XMLHttpRequestResponseType;
        readonly responseURL: string;
        readonly responseXML: Document | null;
        readonly status: number;
        readonly statusText: string;
        timeout: number;
        readonly upload: {
            addEventListener: {
                <K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
            };
            removeEventListener: {
                <K_1 extends keyof XMLHttpRequestEventTargetEventMap>(type: K_1, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K_1]) => any, options?: boolean | EventListenerOptions | undefined): void;
                (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
            };
            onabort: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            onerror: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            onload: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            onloadend: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            onprogress: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
            dispatchEvent: (event: Event) => boolean;
        };
        withCredentials: boolean;
        abort: () => void;
        getAllResponseHeaders: () => string;
        getResponseHeader: (name: string) => string | null;
        open: {
            (method: string, url: string | URL): void;
            (method: string, url: string | URL, async: boolean, username?: string | null | undefined, password?: string | null | undefined): void;
        };
        overrideMimeType: (mime: string) => void;
        send: (body?: Document | XMLHttpRequestBodyInit | null | undefined) => void;
        setRequestHeader: (name: string, value: string) => void;
        readonly DONE: number;
        readonly HEADERS_RECEIVED: number;
        readonly LOADING: number;
        readonly OPENED: number;
        readonly UNSENT: number;
        addEventListener: {
            <K_2 extends keyof XMLHttpRequestEventMap>(type: K_2, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K_2]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
        };
        removeEventListener: {
            <K_3 extends keyof XMLHttpRequestEventMap>(type: K_3, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K_3]) => any, options?: boolean | EventListenerOptions | undefined): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
        };
        onabort: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        onerror: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        onload: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        onloadend: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        onprogress: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any) | null;
        dispatchEvent: (event: Event) => boolean;
    } | null>;
    toUploadFiles: Ref<UploadFile[]>;
    errorMsg: Ref<string>;
    inputRef: Ref<HTMLInputElement | null>;
    uploadedFiles: ComputedRef<UploadFile[]>;
    deleteBtnContent: ComputedRef<any>;
    defaultContent: ComputedRef<any>;
    itemStyle: ComputedRef<{
        flexBasis: string;
    }>;
    itemContentStyle: ComputedRef<{
        height: string;
        width: string;
    }>;
    emitEvent: <T extends any[] = any[]>(eventName: string, ...args: T) => void;
    setInnerFiles: <M extends any[]>(value: UploadFile[] | undefined, ...arg: M) => void;
    triggerUpload: () => void;
    handleChange: () => void;
    handlePreview: (e: MouseEvent, file: UploadFile) => void;
    handleReload: (file: UploadFile) => void;
    handleBeforeUpload: (file: File | UploadFile) => Promise<boolean>;
    handleSizeLimit: (fileSize: number) => boolean;
    uploadFiles: (files: File[]) => void;
    handleMockProgress: (file: UploadFile) => void;
    handleProgress: ({ event, file, percent, type }: InnerProgressContext) => void;
    handleRemove: (e: MouseEvent, file: UploadFile, index: number) => void;
    upload: (file: UploadFile) => Promise<void>;
    handleRequestMethodResponse: (res: RequestMethodResponse) => boolean;
    handleSuccess: ({ event, file, response }: SuccessContext) => void;
    handleError: (options: {
        event?: ProgressEvent;
        file: UploadFile;
        response?: any;
        resFormatted?: boolean;
    }) => void;
    data: Ref<Record<string, any> | ((file: File) => Record<string, any>) | undefined>;
    format: Ref<((file: File) => UploadFile) | undefined>;
    disabled: Ref<boolean>;
    max: Ref<number>;
    multiple: Ref<boolean>;
    imageProps: Ref<import("../image").TdImageProps | undefined>;
    action: Ref<string>;
    files: Ref<UploadFile[] | undefined>;
    formatResponse: Ref<((response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType) | undefined>;
    method: Ref<"option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined>;
    withCredentials: Ref<boolean>;
    headers: Ref<{
        [key: string]: string;
    } | undefined>;
    useMockProgress: Ref<boolean>;
    beforeUpload: Ref<((file: File | UploadFile) => boolean | Promise<boolean>) | undefined>;
    deleteBtn: Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    fileListDisplay: Ref<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    defaultFiles: Ref<UploadFile[] | undefined>;
    gridConfig: Ref<{
        column?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
    } | undefined>;
    requestMethod: Ref<((files: UploadFile | UploadFile[]) => Promise<RequestMethodResponse>) | undefined>;
    sizeLimit: Ref<number | SizeLimitObj | undefined>;
    trigger: Ref<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue) | undefined>;
    accept: Ref<string>;
    allowUploadDuplicateFile: Ref<boolean>;
    autoUpload: Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "progress" | "update:modelValue" | "remove" | "change" | "success" | "fail" | "update:files" | "preview" | "select-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: import("vue").PropType<((file: File | UploadFile) => boolean | Promise<boolean>) | undefined>;
    };
    data: {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>) | undefined>;
    };
    deleteBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    disabled: BooleanConstructor;
    fileListDisplay: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    files: {
        type: import("vue").PropType<UploadFile[] | undefined>;
    };
    defaultFiles: {
        type: import("vue").PropType<UploadFile[] | undefined>;
    };
    format: {
        type: import("vue").PropType<((file: File) => UploadFile) | undefined>;
    };
    formatResponse: {
        type: import("vue").PropType<((response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType) | undefined>;
    };
    gridConfig: {
        type: import("vue").PropType<{
            column?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
        } | undefined>;
    };
    headers: {
        type: import("vue").PropType<{
            [key: string]: string;
        } | undefined>;
    };
    imageProps: {
        type: import("vue").PropType<import("../image").TdImageProps | undefined>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: import("vue").PropType<"option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined>;
        default: "option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined;
        validator(val: "option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined): boolean;
    };
    multiple: BooleanConstructor;
    requestMethod: {
        type: import("vue").PropType<((files: UploadFile | UploadFile[]) => Promise<RequestMethodResponse>) | undefined>;
    };
    sizeLimit: {
        type: import("vue").PropType<number | SizeLimitObj | undefined>;
    };
    trigger: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue) | undefined>;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: import("vue").PropType<(() => void) | undefined>;
    onChange: import("vue").PropType<((value: UploadFile[], context: import("./type").UploadChangeContext) => void) | undefined>;
    onFail: import("vue").PropType<((options: {
        e: ProgressEvent<EventTarget>;
        file: UploadFile;
    }) => void) | undefined>;
    onPreview: import("vue").PropType<((options: {
        file: UploadFile;
        e: MouseEvent;
    }) => void) | undefined>;
    onProgress: import("vue").PropType<((options: import("./type").ProgressContext) => void) | undefined>;
    onRemove: import("vue").PropType<((context: import("./type").UploadRemoveContext) => void) | undefined>;
    onSelectChange: import("vue").PropType<((files: UploadFile[]) => void) | undefined>;
    onSuccess: import("vue").PropType<((context: import("./type").SuccessContext) => void) | undefined>;
}>>, {
    disabled: boolean;
    max: number;
    multiple: boolean;
    action: string;
    method: "option" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "post" | "get" | "put" | "patch" | undefined;
    withCredentials: boolean;
    useMockProgress: boolean;
    accept: string;
    allowUploadDuplicateFile: boolean;
    autoUpload: boolean;
}>;
export default _default;
