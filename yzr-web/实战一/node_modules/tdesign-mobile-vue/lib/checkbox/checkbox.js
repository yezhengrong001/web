/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var checkbox_props = require('./props.js');
var shared_constants = require('../shared/constants.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_render = require('../shared/render.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-checkbox");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"],
    MinusCircleFilledIcon: tdesignIconsVueNext.MinusCircleFilledIcon
  },
  props: _objectSpread(_objectSpread({}, checkbox_props["default"]), {}, {
    borderless: {
      type: Boolean,
      value: false
    }
  }),
  emits: ["update:checked", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var flagName = name;
    var checkIcons = props.icon || [vue.h(tdesignIconsVueNext.CheckCircleFilledIcon), vue.h(tdesignIconsVueNext.CircleIcon)];
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "checked", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      innerChecked = _useDefault2[0],
      setInnerChecked = _useDefault2[1];
    var internalInstance = vue.getCurrentInstance();
    var checkboxGroup = vue.inject("checkboxGroup", void 0);
    var labelContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "label", "default");
    });
    var checkboxContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "content");
    });
    var indeterminate = vue.computed(function () {
      if (props.checkAll && checkboxGroup != null) return checkboxGroup.checkAllStatus.value === "indeterminate";
      return props.indeterminate;
    });
    var isChecked = vue.computed(function () {
      if (props.checkAll) return (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.checkAllStatus.value) === "checked";
      if (checkboxGroup != null && props.value != null) {
        var _checkboxGroup$checke;
        return !!((_checkboxGroup$checke = checkboxGroup.checkedSet.value) !== null && _checkboxGroup$checke !== void 0 && _checkboxGroup$checke.has(props.value));
      }
      return innerChecked.value;
    });
    var isDisabled = vue.computed(function () {
      if (checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.max.value) return checkboxGroup.max.value <= checkboxGroup.innerValue.value.length && !isChecked.value;
      if (props.disabled != null) return props.disabled;
      return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled.value);
    });
    var componentClass = vue.computed(function () {
      var _ref;
      return ["".concat(flagName), (_ref = {}, _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.checked, isChecked.value), _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.disabled, isDisabled.value), _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.indeterminate, indeterminate.value), _ref)];
    });
    var getLimitRowStyle = function getLimitRowStyle(row) {
      return {
        display: "-webkit-box",
        overflow: "hidden",
        WebkitBoxOrient: "vertical",
        WebkitLineClamp: row
      };
    };
    var labelStyle = vue.computed(function () {
      return _objectSpread({
        color: isDisabled.value ? "#dcdcdc" : "inherit"
      }, getLimitRowStyle(props.maxLabelRow));
    });
    var contentStyle = vue.computed(function () {
      return _objectSpread({}, getLimitRowStyle(props.maxContentRow));
    });
    var handleChange = function handleChange(e, source) {
      if (isDisabled.value) return;
      if (source === "content" && props.contentDisabled) return;
      var value = !isChecked.value;
      setInnerChecked(value, {
        e: e
      });
      e.stopPropagation();
      if (checkboxGroup && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.onCheckedChange) {
        checkboxGroup.onCheckedChange({
          checked: value,
          checkAll: props.checkAll,
          e: e,
          option: props
        });
      }
    };
    return _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      isChecked: isChecked,
      checkIcons: checkIcons,
      labelContent: labelContent,
      labelStyle: labelStyle,
      checkboxContent: checkboxContent,
      contentStyle: contentStyle,
      isDisabled: isDisabled,
      flagName: flagName,
      componentClass: componentClass,
      indeterminate: indeterminate,
      handleChange: handleChange
    });
  }
});

var _hoisted_1 = ["name", "value", "disabled", "readonly", "checked", "indeterminate"];
var _hoisted_2 = ["name", "value", "disabled", "readonly", "checked", "indeterminate"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _normalizeClass2;
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_minus_circle_filled_icon = vue.resolveComponent("minus-circle-filled-icon");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.componentClass)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.flagName, "__content-wrap"))
  }, [_ctx.align === "left" ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.flagName, "__icon-left"))
  }, [vue.createElementVNode("input", {
    type: "checkbox",
    name: _ctx.name,
    class: vue.normalizeClass("".concat(_ctx.flagName, "__original-left")),
    value: _ctx.value,
    disabled: _ctx.isDisabled,
    readonly: _ctx.readonly,
    checked: _ctx.isChecked,
    indeterminate: _ctx.indeterminate,
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
    })
  }, null, 10, _hoisted_1), !_ctx.indeterminate ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 0,
    content: _ctx.checkIcons[_ctx.isChecked ? 0 : 1]
  }, null, 8, ["content"])) : (vue.openBlock(), vue.createBlock(_component_minus_circle_filled_icon, {
    key: 1
  }))], 2)) : vue.createCommentVNode("", true), _ctx.labelContent || _ctx.checkboxContent ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.flagName, "__label"), true), _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.flagName, "__label-left"), _ctx.align === "right"), _normalizeClass2)),
    onClick: _cache[1] || (_cache[1] = function (e) {
      return _ctx.handleChange(e, "content");
    })
  }, [_ctx.labelContent ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    style: vue.normalizeStyle(_ctx.labelStyle)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.labelContent
  }, null, 8, ["content"])], 4)) : vue.createCommentVNode("", true), _ctx.checkboxContent ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.flagName, "__description")),
    style: vue.normalizeStyle(_ctx.contentStyle)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.checkboxContent
  }, null, 8, ["content"])], 6)) : vue.createCommentVNode("", true)], 2)) : vue.createCommentVNode("", true), _ctx.align === "right" ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 2,
    class: vue.normalizeClass("".concat(_ctx.flagName, "__icon-right"))
  }, [vue.createElementVNode("input", {
    type: "checkbox",
    name: _ctx.name,
    class: vue.normalizeClass("".concat(_ctx.flagName, "__original-right")),
    value: _ctx.value,
    disabled: _ctx.isDisabled,
    readonly: _ctx.readonly,
    checked: _ctx.isChecked,
    indeterminate: _ctx.indeterminate,
    onClick: _cache[2] || (_cache[2] = function () {
      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
    })
  }, null, 10, _hoisted_2), !_ctx.indeterminate ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 0,
    content: _ctx.checkIcons[_ctx.isChecked ? 0 : 1]
  }, null, 8, ["content"])) : (vue.openBlock(), vue.createBlock(_component_minus_circle_filled_icon, {
    key: 1
  }))], 2)) : vue.createCommentVNode("", true)], 2), !_ctx.borderless ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.flagName, "__border ").concat(_ctx.flagName, "__border--").concat(_ctx.align))
  }, null, 2)) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=checkbox.js.map
