/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _typeof = require('@babel/runtime/helpers/typeof');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var config = require('../config.js');
var checkbox_checkboxGroupProps = require('./checkbox-group-props.js');
var checkbox_checkbox = require('./checkbox.js');
var checkbox_hooks_getOptions = require('./hooks/getOptions.js');
var checkbox_hooks_setCheckAllStatus = require('./hooks/setCheckAllStatus.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('tdesign-icons-vue-next');
require('./props.js');
require('../shared/constants.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('lodash/camelCase');
require('../shared/useChildSlots/index.js');
require('lodash/intersection');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-checkbox-group");
var script = vue.defineComponent({
  name: name,
  components: {
    Checkbox: checkbox_checkbox["default"]
  },
  props: checkbox_checkboxGroupProps["default"],
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var isArray = Array.isArray;
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      innerValue = _useDefault2[0],
      setinnerValue = _useDefault2[1];
    var optionList = checkbox_hooks_getOptions.getOptions(props, context.slots);
    var checkedSet = vue.computed(function () {
      if (isArray(innerValue.value)) {
        return new Set(innerValue.value);
      }
      return /* @__PURE__ */new Set();
    });
    var checkAllStatus = checkbox_hooks_setCheckAllStatus.setCheckAllStatus(optionList, innerValue, checkedSet);
    var maxExceeded = vue.computed(function () {
      return props.max !== void 0 && innerValue.value.length === props.max;
    });
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (isArray(innerValue.value)) {
        if (currentValue === void 0) {
          return;
        }
        var val = _toConsumableArray__default["default"](innerValue.value);
        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setinnerValue(val, {
          e: data.e,
          current: data.option.value,
          type: data.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof__default["default"](innerValue.value)));
      }
    };
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.value === void 0) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray__default["default"](val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context2) {
      var value = checked ? getAllCheckboxValue() : [];
      setinnerValue(value, {
        e: context2.e,
        type: checked ? "check" : "uncheck",
        current: void 0
      });
    };
    vue.provide("checkboxGroup", _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      innerValue: innerValue,
      checkAllStatus: checkAllStatus,
      checkedSet: checkedSet,
      onCheckedChange: onCheckedChange
    }));
    return {
      prefix: prefix,
      optionList: optionList
    };
  }
});

var _hoisted_1 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_checkbox = vue.resolveComponent("checkbox");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass("".concat(_ctx.prefix, "-checkbox-group"))
  }, [!(_ctx.options && _ctx.options.length) ? vue.renderSlot(_ctx.$slots, "default", {
    key: 0
  }) : (vue.openBlock(), vue.createElementBlock("span", _hoisted_1, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.optionList, function (item, idx) {
    return vue.openBlock(), vue.createBlock(_component_checkbox, {
      key: idx,
      name: item.name,
      label: item.label,
      value: item.value,
      "check-all": item.checkAll
    }, null, 8, ["name", "label", "value", "check-all"]);
  }), 128))]))], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=group.js.map
