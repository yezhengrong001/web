/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function isArray(x) {
  return Array.isArray(x);
}
function isNumber(x) {
  return Object.prototype.toString.call(x) === "[object Number]";
}
function isString(x) {
  return typeof x === "string";
}
function isBoolean(x) {
  return typeof x === "boolean";
}
function isNull(s) {
  return s === null;
}
function isObject(x) {
  return x === null ? false : Object.prototype.toString.call(x) === "[object Object]";
}
function isDate(x) {
  return Object.prototype.toString.call(x) === "[object Date]";
}
function isFunction(x) {
  return Object.prototype.toString.call(x) === "[object Function]";
}
function toCamel(str) {
  return str.replace(/^\S/, function (m) {
    return m.toUpperCase();
  });
}
var inBrowser = typeof window !== "undefined";
function getCharacterLength(str, maxCharacter) {
  var hasMaxCharacter = typeof maxCharacter === "number";
  if (!str || str.length === 0) {
    if (hasMaxCharacter) {
      return {
        length: 0,
        characters: str
      };
    }
    return 0;
  }
  var len = 0;
  for (var i = 0; i < str.length; i++) {
    var currentStringLength = 0;
    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
      currentStringLength = 2;
    } else {
      currentStringLength = 1;
    }
    if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
      return {
        length: len,
        characters: str.slice(0, i)
      };
    }
    len += currentStringLength;
  }
  if (hasMaxCharacter) {
    return {
      length: len,
      characters: str
    };
  }
  return len;
}

exports.getCharacterLength = getCharacterLength;
exports.inBrowser = inBrowser;
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isDate = isDate;
exports.isFunction = isFunction;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.toCamel = toCamel;
//# sourceMappingURL=util.js.map
