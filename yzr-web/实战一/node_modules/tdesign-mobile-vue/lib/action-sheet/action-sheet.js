/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var actionSheet_menuList = require('./menu-list.js');
var actionSheet_menuGrid = require('./menu-grid.js');
var popup_index = require('../popup/index.js');
var config = require('../config.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
require('../grid/index.js');
require('../grid/grid.js');
require('../grid/props.js');
require('../grid/grid-item.js');
require('../badge/index.js');
require('../badge/badge.js');
require('@babel/runtime/helpers/slicedToArray');
require('../badge/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');
require('../grid/grid-item-props.js');
require('../popup/popup.js');
require('../popup/props.js');
require('../overlay/index.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../shared/useDefault/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-action-sheet");
var script = vue.defineComponent({
  name: name,
  components: {
    TPopup: popup_index["default"],
    MenuList: actionSheet_menuList["default"],
    MenuGrid: actionSheet_menuGrid["default"]
  },
  props: {
    modelValue: Boolean,
    visible: {
      type: Boolean,
      default: false
    },
    items: {
      type: Array,
      required: true
    },
    type: {
      type: String,
      default: "list"
    },
    count: {
      type: Number,
      default: 8
    },
    showCancel: {
      type: Boolean,
      default: true
    },
    cancelText: {
      type: String,
      default: "\u53D6\u6D88"
    }
  },
  emits: ["selected", "update:modelValue", "cancel", "close"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var actionItems = vue.ref([]);
    var currentVisible = vue.computed(function () {
      return props.modelValue || props.visible;
    });
    var rootClasses = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "__panel"), true), _defineProperty__default["default"](_ref, "".concat(name, "__panel-list"), props.type === "list"), _defineProperty__default["default"](_ref, "".concat(name, "__panel-grid"), props.type === "grid"), _ref;
    });
    vue.watch(function () {
      return props.items;
    }, function (val) {
      var items = JSON.parse(JSON.stringify(val));
      items = items.map(function (item) {
        if (typeof item === "string") {
          return {
            label: item
          };
        }
        return item;
      });
      actionItems.value = items;
    }, {
      immediate: true,
      deep: true
    });
    var handleCancel = function handleCancel() {
      emitEvent("cancel");
      context.emit("update:modelValue", false);
    };
    var handleSelected = function handleSelected(index) {
      emitEvent("selected", props.items[index], index);
    };
    var handleClose = function handleClose() {
      emitEvent("close");
      context.emit("update:modelValue", false);
    };
    return {
      name: vue.ref(name),
      rootClasses: rootClasses,
      actionItems: actionItems,
      currentVisible: currentVisible,
      handleCancel: handleCancel,
      handleSelected: handleSelected,
      handleClose: handleClose
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_menu_list = vue.resolveComponent("menu-list");
  var _component_menu_grid = vue.resolveComponent("menu-grid");
  var _component_t_popup = vue.resolveComponent("t-popup");
  return vue.openBlock(), vue.createBlock(_component_t_popup, {
    class: vue.normalizeClass(_ctx.name),
    visible: _ctx.currentVisible,
    placement: "bottom",
    onClose: _ctx.handleClose
  }, {
    default: vue.withCtx(function () {
      return [vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.rootClasses)
      }, [_ctx.type === "list" ? (vue.openBlock(), vue.createBlock(_component_menu_list, {
        key: 0,
        items: _ctx.actionItems,
        onSelected: _ctx.handleSelected
      }, {
        cell: vue.withCtx(function (slotProps) {
          return [vue.renderSlot(_ctx.$slots, "cell", {
            item: slotProps.item
          })];
        }),
        _: 3
      }, 8, ["items", "onSelected"])) : (vue.openBlock(), vue.createBlock(_component_menu_grid, {
        key: 1,
        items: _ctx.actionItems,
        count: _ctx.count,
        onSelected: _ctx.handleSelected
      }, {
        cell: vue.withCtx(function (slotProps) {
          return [vue.renderSlot(_ctx.$slots, "cell", {
            item: slotProps.item
          })];
        }),
        _: 3
      }, 8, ["items", "count", "onSelected"])), _ctx.showCancel ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
        key: 2
      }, [_ctx.type === "list" ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass("".concat(_ctx.name, "__separation"))
      }, null, 2)) : vue.createCommentVNode("", true), vue.createElementVNode("button", {
        class: vue.normalizeClass("".concat(_ctx.name, "__action")),
        onClick: _cache[0] || (_cache[0] = function () {
          return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);
        })
      }, vue.toDisplayString(_ctx.cancelText), 3)], 64)) : vue.createCommentVNode("", true)], 2)];
    }),
    _: 3
  }, 8, ["class", "visible", "onClose"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=action-sheet.js.map
