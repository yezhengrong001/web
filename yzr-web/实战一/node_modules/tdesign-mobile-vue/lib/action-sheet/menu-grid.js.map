{"version":3,"file":"menu-grid.js","sources":["../../src/action-sheet/menu-grid.vue","../../src/action-sheet/menu-grid.vue?vue&type=template&id=73c02ce4&lang.js"],"sourcesContent":["<template>\n  <div ref=\"containerWrapper\" :class=\"`${name}__menu-wrapper`\">\n    <div\n      :class=\"`${name}__menu-slider`\"\n      :style=\"wrapperStyle\"\n      @touchstart=\"handleTouchstart\"\n      @touchmove=\"handleTouchmove\"\n      @touchend=\"handleTouchend\"\n    >\n      <div v-for=\"(Items, i) in actionItems\" :key=\"i\" :class=\"`${name}__menu`\">\n        <t-grid :column=\"gridColumn\">\n          <t-grid-item\n            v-for=\"(item, index) in Items\"\n            :key=\"index\"\n            :text=\"item.label\"\n            :image=\"item.icon\"\n            @click=\"handleSelected(i * count + index)\"\n          />\n        </t-grid>\n      </div>\n    </div>\n    <div v-if=\"pageNum > 1\" :class=\"`${name}__indicator`\">\n      <div\n        v-for=\"index in pageNum\"\n        :key=\"index\"\n        :class=\"{\n          [`${name}__indicator-item`]: true,\n          on: currentIndex === index - 1,\n        }\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, SetupContext, defineComponent, computed } from 'vue';\nimport config from '../config';\nimport { Grid as TGrid, GridItem as TGridItem } from '../grid';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  components: { TGrid, TGridItem },\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    count: {\n      type: Number,\n      default: 8,\n    },\n  },\n  emits: ['selected'],\n  setup(props, context: SetupContext) {\n    const containerWrapper = ref<HTMLElement | null>(null);\n    const moveOffset = ref(0);\n    const currentIndex = ref(0);\n    const useTransition = ref(true);\n    let startX = 0;\n    let startOffset = 0;\n    let canMove = true;\n\n    const wrapperStyle = computed(() => ({\n      transform: `translate3d(${moveOffset.value}px, 0, 0)`,\n      transition: useTransition.value ? 'transform 300ms' : 'all',\n    }));\n    const gridColumn = computed(() => Math.ceil(props.count / 2));\n    const pageNum = computed(() => Math.ceil(props.items.length / props.count));\n    // 分页数据处理\n    const actionItems = computed(() => {\n      const res: any = [];\n      for (let i = 0; i < pageNum.value; i++) {\n        const temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n\n    const handleSelected = (index: number) => {\n      context.emit('selected', index);\n    };\n\n    const moveByIndex = (index: number) => {\n      useTransition.value = true;\n      if (containerWrapper.value) {\n        moveOffset.value = pageNum.value > 1 ? index * containerWrapper.value.offsetWidth * -1 : 0;\n      }\n    };\n\n    // 滑动时的最大偏移\n    const getMaxOffset = () => {\n      if (!containerWrapper.value) return 0;\n\n      return (pageNum.value - 1) * containerWrapper.value.offsetWidth;\n    };\n\n    const handleTouchstart = (e: TouchEvent) => {\n      canMove = true;\n      useTransition.value = false;\n      startX = e.touches[0].clientX;\n      startOffset = startX - moveOffset.value;\n    };\n\n    const handleTouchmove = (e: TouchEvent) => {\n      const { clientX } = e.touches[0];\n      const minOffset = 0;\n      const maxOffset = getMaxOffset();\n\n      if (Math.abs(clientX - startX) < 15) return;\n      moveOffset.value = clientX - startOffset;\n\n      // 滑动临界值判单\n      if (moveOffset.value > minOffset) {\n        moveOffset.value = minOffset;\n        canMove = false;\n      }\n      if (Math.abs(moveOffset.value) >= maxOffset) {\n        moveOffset.value = maxOffset * -1;\n        canMove = false;\n      }\n    };\n    const handleTouchend = (e: TouchEvent) => {\n      if (!canMove) return;\n\n      const distance = e.changedTouches[0].clientX - startX;\n      const targetIndex = Math.abs(distance) > 50 ? currentIndex.value + (distance < 0 ? 1 : -1) : currentIndex.value;\n      currentIndex.value = targetIndex;\n      moveByIndex(targetIndex);\n    };\n\n    return {\n      name: ref(name),\n      gridColumn,\n      pageNum,\n      actionItems,\n      currentIndex,\n      containerWrapper,\n      wrapperStyle,\n      handleSelected,\n      handleTouchstart,\n      handleTouchmove,\n      handleTouchend,\n    };\n  },\n});\n</script>\n","<template>\n  <div ref=\"containerWrapper\" :class=\"`${name}__menu-wrapper`\">\n    <div\n      :class=\"`${name}__menu-slider`\"\n      :style=\"wrapperStyle\"\n      @touchstart=\"handleTouchstart\"\n      @touchmove=\"handleTouchmove\"\n      @touchend=\"handleTouchend\"\n    >\n      <div v-for=\"(Items, i) in actionItems\" :key=\"i\" :class=\"`${name}__menu`\">\n        <t-grid :column=\"gridColumn\">\n          <t-grid-item\n            v-for=\"(item, index) in Items\"\n            :key=\"index\"\n            :text=\"item.label\"\n            :image=\"item.icon\"\n            @click=\"handleSelected(i * count + index)\"\n          />\n        </t-grid>\n      </div>\n    </div>\n    <div v-if=\"pageNum > 1\" :class=\"`${name}__indicator`\">\n      <div\n        v-for=\"index in pageNum\"\n        :key=\"index\"\n        :class=\"{\n          [`${name}__indicator-item`]: true,\n          on: currentIndex === index - 1,\n        }\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, SetupContext, defineComponent, computed } from 'vue';\nimport config from '../config';\nimport { Grid as TGrid, GridItem as TGridItem } from '../grid';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  components: { TGrid, TGridItem },\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    count: {\n      type: Number,\n      default: 8,\n    },\n  },\n  emits: ['selected'],\n  setup(props, context: SetupContext) {\n    const containerWrapper = ref<HTMLElement | null>(null);\n    const moveOffset = ref(0);\n    const currentIndex = ref(0);\n    const useTransition = ref(true);\n    let startX = 0;\n    let startOffset = 0;\n    let canMove = true;\n\n    const wrapperStyle = computed(() => ({\n      transform: `translate3d(${moveOffset.value}px, 0, 0)`,\n      transition: useTransition.value ? 'transform 300ms' : 'all',\n    }));\n    const gridColumn = computed(() => Math.ceil(props.count / 2));\n    const pageNum = computed(() => Math.ceil(props.items.length / props.count));\n    // 分页数据处理\n    const actionItems = computed(() => {\n      const res: any = [];\n      for (let i = 0; i < pageNum.value; i++) {\n        const temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n\n    const handleSelected = (index: number) => {\n      context.emit('selected', index);\n    };\n\n    const moveByIndex = (index: number) => {\n      useTransition.value = true;\n      if (containerWrapper.value) {\n        moveOffset.value = pageNum.value > 1 ? index * containerWrapper.value.offsetWidth * -1 : 0;\n      }\n    };\n\n    // 滑动时的最大偏移\n    const getMaxOffset = () => {\n      if (!containerWrapper.value) return 0;\n\n      return (pageNum.value - 1) * containerWrapper.value.offsetWidth;\n    };\n\n    const handleTouchstart = (e: TouchEvent) => {\n      canMove = true;\n      useTransition.value = false;\n      startX = e.touches[0].clientX;\n      startOffset = startX - moveOffset.value;\n    };\n\n    const handleTouchmove = (e: TouchEvent) => {\n      const { clientX } = e.touches[0];\n      const minOffset = 0;\n      const maxOffset = getMaxOffset();\n\n      if (Math.abs(clientX - startX) < 15) return;\n      moveOffset.value = clientX - startOffset;\n\n      // 滑动临界值判单\n      if (moveOffset.value > minOffset) {\n        moveOffset.value = minOffset;\n        canMove = false;\n      }\n      if (Math.abs(moveOffset.value) >= maxOffset) {\n        moveOffset.value = maxOffset * -1;\n        canMove = false;\n      }\n    };\n    const handleTouchend = (e: TouchEvent) => {\n      if (!canMove) return;\n\n      const distance = e.changedTouches[0].clientX - startX;\n      const targetIndex = Math.abs(distance) > 50 ? currentIndex.value + (distance < 0 ? 1 : -1) : currentIndex.value;\n      currentIndex.value = targetIndex;\n      moveByIndex(targetIndex);\n    };\n\n    return {\n      name: ref(name),\n      gridColumn,\n      pageNum,\n      actionItems,\n      currentIndex,\n      containerWrapper,\n      wrapperStyle,\n      handleSelected,\n      handleTouchstart,\n      handleTouchmove,\n      handleTouchend,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TGrid","TGridItem","props","items","type","Array","required","count","Number","default","emits","setup","context","containerWrapper","ref","moveOffset","currentIndex","useTransition","startX","startOffset","canMove","wrapperStyle","computed","transform","value","transition","gridColumn","Math","ceil","pageNum","length","actionItems","res","i","temp","slice","push","handleSelected","index","emit","moveByIndex","offsetWidth","getMaxOffset","handleTouchstart","e","touches","clientX","handleTouchmove","minOffset","maxOffset","abs","handleTouchend","distance","changedTouches","targetIndex","_createElementBlock","class","_ctx","_createElementVNode","style","onTouchstart","onTouchmove","onTouchend","_openBlock","_Fragment","_renderList","Items","key","_createVNode","_component_t_grid","column","item","_createBlock","_component_t_grid_item","text","label","image","icon","onClick","$event","_normalizeClass","_defineProperty"],"mappings":"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"}