/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var config = require('../config.js');
var grid_index = require('../grid/index.js');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
require('../grid/grid.js');
require('../grid/props.js');
require('../grid/grid-item.js');
require('../badge/index.js');
require('../badge/badge.js');
require('@babel/runtime/helpers/slicedToArray');
require('../badge/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');
require('../grid/grid-item-props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-action-sheet");
var script = vue.defineComponent({
  components: {
    TGrid: grid_index.Grid,
    TGridItem: grid_index.GridItem
  },
  props: {
    items: {
      type: Array,
      required: true
    },
    count: {
      type: Number,
      default: 8
    }
  },
  emits: ["selected"],
  setup: function setup(props, context) {
    var containerWrapper = vue.ref(null);
    var moveOffset = vue.ref(0);
    var currentIndex = vue.ref(0);
    var useTransition = vue.ref(true);
    var startX = 0;
    var startOffset = 0;
    var canMove = true;
    var wrapperStyle = vue.computed(function () {
      return {
        transform: "translate3d(".concat(moveOffset.value, "px, 0, 0)"),
        transition: useTransition.value ? "transform 300ms" : "all"
      };
    });
    var gridColumn = vue.computed(function () {
      return Math.ceil(props.count / 2);
    });
    var pageNum = vue.computed(function () {
      return Math.ceil(props.items.length / props.count);
    });
    var actionItems = vue.computed(function () {
      var res = [];
      for (var i = 0; i < pageNum.value; i++) {
        var temp = props.items.slice(i * props.count, (i + 1) * props.count);
        res.push(temp);
      }
      return res;
    });
    var handleSelected = function handleSelected(index) {
      context.emit("selected", index);
    };
    var moveByIndex = function moveByIndex(index) {
      useTransition.value = true;
      if (containerWrapper.value) {
        moveOffset.value = pageNum.value > 1 ? index * containerWrapper.value.offsetWidth * -1 : 0;
      }
    };
    var getMaxOffset = function getMaxOffset() {
      if (!containerWrapper.value) return 0;
      return (pageNum.value - 1) * containerWrapper.value.offsetWidth;
    };
    var handleTouchstart = function handleTouchstart(e) {
      canMove = true;
      useTransition.value = false;
      startX = e.touches[0].clientX;
      startOffset = startX - moveOffset.value;
    };
    var handleTouchmove = function handleTouchmove(e) {
      var clientX = e.touches[0].clientX;
      var minOffset = 0;
      var maxOffset = getMaxOffset();
      if (Math.abs(clientX - startX) < 15) return;
      moveOffset.value = clientX - startOffset;
      if (moveOffset.value > minOffset) {
        moveOffset.value = minOffset;
        canMove = false;
      }
      if (Math.abs(moveOffset.value) >= maxOffset) {
        moveOffset.value = maxOffset * -1;
        canMove = false;
      }
    };
    var handleTouchend = function handleTouchend(e) {
      if (!canMove) return;
      var distance = e.changedTouches[0].clientX - startX;
      var targetIndex = Math.abs(distance) > 50 ? currentIndex.value + (distance < 0 ? 1 : -1) : currentIndex.value;
      currentIndex.value = targetIndex;
      moveByIndex(targetIndex);
    };
    return {
      name: vue.ref(name),
      gridColumn: gridColumn,
      pageNum: pageNum,
      actionItems: actionItems,
      currentIndex: currentIndex,
      containerWrapper: containerWrapper,
      wrapperStyle: wrapperStyle,
      handleSelected: handleSelected,
      handleTouchstart: handleTouchstart,
      handleTouchmove: handleTouchmove,
      handleTouchend: handleTouchend
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_grid_item = vue.resolveComponent("t-grid-item");
  var _component_t_grid = vue.resolveComponent("t-grid");
  return vue.openBlock(), vue.createElementBlock("div", {
    ref: "containerWrapper",
    class: vue.normalizeClass("".concat(_ctx.name, "__menu-wrapper"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__menu-slider")),
    style: vue.normalizeStyle(_ctx.wrapperStyle),
    onTouchstart: _cache[0] || (_cache[0] = function () {
      return _ctx.handleTouchstart && _ctx.handleTouchstart.apply(_ctx, arguments);
    }),
    onTouchmove: _cache[1] || (_cache[1] = function () {
      return _ctx.handleTouchmove && _ctx.handleTouchmove.apply(_ctx, arguments);
    }),
    onTouchend: _cache[2] || (_cache[2] = function () {
      return _ctx.handleTouchend && _ctx.handleTouchend.apply(_ctx, arguments);
    })
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.actionItems, function (Items, i) {
    return vue.openBlock(), vue.createElementBlock("div", {
      key: i,
      class: vue.normalizeClass("".concat(_ctx.name, "__menu"))
    }, [vue.createVNode(_component_t_grid, {
      column: _ctx.gridColumn
    }, {
      default: vue.withCtx(function () {
        return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(Items, function (item, index) {
          return vue.openBlock(), vue.createBlock(_component_t_grid_item, {
            key: index,
            text: item.label,
            image: item.icon,
            onClick: function onClick($event) {
              return _ctx.handleSelected(i * _ctx.count + index);
            }
          }, null, 8, ["text", "image", "onClick"]);
        }), 128))];
      }),
      _: 2
    }, 1032, ["column"])], 2);
  }), 128))], 38), _ctx.pageNum > 1 ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__indicator"))
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.pageNum, function (index) {
    var _normalizeClass2;
    return vue.openBlock(), vue.createElementBlock("div", {
      key: index,
      class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.name, "__indicator-item"), true), _defineProperty__default["default"](_normalizeClass2, "on", _ctx.currentIndex === index - 1), _normalizeClass2))
    }, null, 2);
  }), 128))], 2)) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=menu-grid.js.map
