/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var config = require('../config.js');
var loading_index = require('../loading/index.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/defineProperty');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/spinner.js');
require('../shared/constants.js');
require('../loading/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-pull-refresh");
function useTouch() {
  var startY = vue.ref(0);
  var deltaY = vue.ref(0);
  var start = function start(event) {
    startY.value = event.touches[0].clientY;
    deltaY.value = 0;
  };
  var move = function move(event) {
    var touch = event.touches[0];
    deltaY.value = touch.clientY - startY.value;
  };
  return {
    startY: startY,
    deltaY: deltaY,
    start: start,
    move: move
  };
}
var PULL_DISTANCE = 50;
var ANIMATION_DURATION = 300;
var TEXT_MAP = {
  loading: "\u52A0\u8F7D\u4E2D",
  pulling: "\u4E0B\u62C9\u5373\u53EF\u5237\u65B0...",
  loosing: "\u91CA\u653E\u5373\u53EF\u5237\u65B0...",
  success: "\u5237\u65B0\u6210\u529F"
};
var SHOW_TEXT_LIST = ["pulling", "loosing", "success"];
var PullRefreshProps = {
  modelValue: Boolean
};
var easeDistance = function easeDistance(distance, pullDistance) {
  if (distance > pullDistance) {
    if (distance < pullDistance * 2) {
      distance = pullDistance + (distance - pullDistance) / 2;
    } else {
      distance = pullDistance * 1.5 + (distance - pullDistance * 2) / 4;
    }
  }
  return Math.round(distance);
};
function isElement(node) {
  var ELEMENT_NODE_TYPE = 1;
  return node.tagName !== "HTML" && node.tagName !== "BODY" && node.nodeType === ELEMENT_NODE_TYPE;
}
var getScrollParent = function getScrollParent(node) {
  var res = node;
  while (res && isElement(res)) {
    if (/auto|scroll/i.test(window.getComputedStyle(res).overflowY)) {
      return res;
    }
    res = res.parentNode;
  }
};
var script = vue.defineComponent({
  name: name,
  components: {
    TLoading: loading_index["default"]
  },
  props: PullRefreshProps,
  emits: ["refresh", "update:modelValue"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var state = vue.reactive({
      status: "normal",
      distance: 0,
      duration: 0
    });
    var setStatus = function setStatus(distance, isLoading) {
      state.distance = distance;
      if (isLoading) {
        state.status = "loading";
      } else if (distance === 0) {
        state.status = "normal";
      } else if (distance < PULL_DISTANCE) {
        state.status = "pulling";
      } else {
        state.status = "loosing";
      }
    };
    var touch = useTouch();
    var isTouchable = function isTouchable() {
      return state.status !== "loading" && state.status !== "success";
    };
    var isReachTop = function isReachTop(e) {
      var scrollParent = getScrollParent(e.target);
      return !scrollParent || !scrollParent.scrollTop;
    };
    var onTouchStart = function onTouchStart(e) {
      if (!isReachTop(e)) return;
      if (isTouchable()) {
        state.duration = 0;
        touch.start(e);
      }
    };
    var onTouchMove = function onTouchMove(e) {
      if (!isTouchable()) return;
      if (!isReachTop(e)) return;
      var deltaY = touch.deltaY;
      if (deltaY.value >= 0) {
        e.preventDefault();
        setStatus(easeDistance(deltaY.value, PULL_DISTANCE));
      }
      touch.move(e);
    };
    var onTouchEnd = function onTouchEnd() {
      state.duration = ANIMATION_DURATION;
      if (state.status === "loosing") {
        emit("update:modelValue", true);
        vue.nextTick(function () {
          return emit("refresh");
        });
      } else {
        setStatus(0);
      }
    };
    var trackStyle = vue.computed(function () {
      return {
        transitionDuration: "".concat(state.duration, "ms"),
        transform: state.distance ? "translate3d(0, ".concat(state.distance, "px, 0)") : ""
      };
    });
    vue.watch(function () {
      return props.modelValue;
    }, function (value) {
      if (value) {
        setStatus(PULL_DISTANCE, true);
      } else {
        state.status = "success";
        setTimeout(function () {
          setStatus(0, false);
        }, ANIMATION_DURATION);
      }
    });
    return {
      name: name,
      state: state,
      trackStyle: trackStyle,
      TEXT_MAP: TEXT_MAP,
      SHOW_TEXT_LIST: SHOW_TEXT_LIST,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd
    };
  }
});

var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_loading = vue.resolveComponent("t-loading");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.name)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__track")),
    style: vue.normalizeStyle(_ctx.trackStyle),
    onTouchstart: _cache[0] || (_cache[0] = vue.withModifiers(function () {
      return _ctx.onTouchStart && _ctx.onTouchStart.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(function () {
      return _ctx.onTouchMove && _ctx.onTouchMove.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchend: _cache[2] || (_cache[2] = vue.withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchcancel: _cache[3] || (_cache[3] = vue.withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"]))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__head"))
  }, [_ctx.SHOW_TEXT_LIST.includes(_ctx.state.status) ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, vue.toDisplayString(_ctx.TEXT_MAP[_ctx.state.status]), 1)) : vue.createCommentVNode("", true), _ctx.state.status === "loading" ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2, [vue.createVNode(_component_t_loading, {
    text: "\u52A0\u8F7D\u4E2D..."
  })])) : vue.createCommentVNode("", true)], 2), vue.renderSlot(_ctx.$slots, "default")], 38)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=pull-refresh.js.map
