/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var core = require('@vueuse/core');
var loading_index = require('../loading/index.js');
var config = require('../config.js');
var list_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useScrollParent_index = require('../shared/useScrollParent/index.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/defineProperty');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/spinner.js');
require('../shared/constants.js');
require('../loading/props.js');
require('../shared/component.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/util.js');

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-list");
var LOADING_TEXT_MAP = {
  loading: "\u52A0\u8F7D\u4E2D...",
  "load-more": "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
};
var script = vue.defineComponent({
  name: name,
  components: {
    TLoading: loading_index["default"],
    TNode: shared_renderTnode["default"]
  },
  props: list_props["default"],
  emits: ["load-more", "scroll"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var root = vue.ref();
    var empty = vue.ref();
    var scrollParent = shared_useScrollParent_index.useScrollParent(root);
    var _useWindowSize = core.useWindowSize(),
      height = _useWindowSize.height;
    var internalInstance = vue.getCurrentInstance();
    var headerContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "header");
    });
    var footerContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "footer");
    });
    var onLoadMore = function onLoadMore(e) {
      if (props.asyncLoading === "load-more") {
        emitEvent("load-more");
      }
    };
    var handleScroll = function handleScroll(e) {
      var _useElementBounding = core.useElementBounding(root),
        bottom = _useElementBounding.bottom;
      emitEvent("scroll", bottom.value - height.value);
    };
    core.useEventListener(scrollParent, "scroll", handleScroll);
    return {
      name: name,
      root: root,
      empty: empty,
      onLoadMore: onLoadMore,
      handleScroll: handleScroll,
      headerContent: headerContent,
      footerContent: footerContent,
      LOADING_TEXT_MAP: LOADING_TEXT_MAP
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_loading = vue.resolveComponent("t-loading");
  return vue.openBlock(), vue.createElementBlock("div", {
    ref: "root",
    class: vue.normalizeClass(_ctx.name),
    onScroll: _cache[1] || (_cache[1] = function () {
      return _ctx.handleScroll && _ctx.handleScroll.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.headerContent
  }, null, 8, ["content"]), vue.renderSlot(_ctx.$slots, "default"), vue.createElementVNode("div", {
    onClick: _cache[0] || (_cache[0] = vue.withModifiers(function () {
      return _ctx.onLoadMore && _ctx.onLoadMore.apply(_ctx, arguments);
    }, ["stop"]))
  }, [typeof _ctx.asyncLoading === "string" && ["loading", "load-more"].includes(_ctx.asyncLoading) ? (vue.openBlock(), vue.createBlock(_component_t_loading, {
    key: 0,
    loading: _ctx.asyncLoading === "loading",
    text: typeof _ctx.asyncLoading === "string" ? _ctx.LOADING_TEXT_MAP[_ctx.asyncLoading] : "",
    class: vue.normalizeClass("".concat(_ctx.name, "__loading"))
  }, null, 8, ["loading", "text", "class"])) : vue.createCommentVNode("", true)]), vue.createVNode(_component_t_node, {
    content: _ctx.footerContent
  }, null, 8, ["content"])], 34);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=list.js.map
