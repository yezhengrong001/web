/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var vue = require('vue');
var config = require('../config.js');
var tag_checkTagProps = require('./check-tag-props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-check-tag");
var CheckTag = vue.defineComponent({
  name: name,
  components: {
    CloseIcon: tdesignIconsVueNext.CloseIcon,
    TNode: shared_renderTnode["default"]
  },
  props: tag_checkTagProps["default"],
  emits: ["change", "click", "update:checked", "update:modelValue"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var internalInstance = vue.getCurrentInstance();
    var tagContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var iconContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "icon");
    });
    var baseClass = "".concat(prefix, "-tag");
    var _toRefs = vue.toRefs(props),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(checked, modelValue, props.defaultChecked, props.onChange, "checked"),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var classes = vue.computed(function () {
      var _ref;
      return ["".concat(baseClass), "".concat(baseClass, "--checkable"), "".concat(baseClass, "--shape-").concat(props.shape), "".concat(baseClass, "--size-").concat(props.size), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(prefix, "-is-closable ").concat(baseClass, "--closable"), props.closable), _defineProperty__default["default"](_ref, "".concat(prefix, "-is-disabled ").concat(baseClass, "--disabled"), props.disabled), _defineProperty__default["default"](_ref, "".concat(prefix, "-is-checked ").concat(baseClass, "--checked"), !props.disabled && innerChecked.value), _ref)];
    });
    var onClickClose = function onClickClose(e) {
      if (!props.disabled) {
        emitEvent("close", {
          e: e
        });
      }
    };
    var handleClick = function handleClick(e) {
      if (!props.disabled) {
        emitEvent("click", {
          e: e
        });
        setInnerChecked(!innerChecked.value);
      }
    };
    return {
      baseClass: baseClass,
      classes: classes,
      onClickClose: onClickClose,
      handleClick: handleClick,
      iconContent: iconContent,
      tagContent: tagContent,
      innerChecked: innerChecked
    };
  }
});

var _hoisted_1 = ["aria-disabled"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_close_icon = vue.resolveComponent("close-icon");
  return vue.openBlock(), vue.createElementBlock("span", {
    class: vue.normalizeClass(_ctx.classes),
    "aria-disabled": _ctx.disabled,
    role: "button",
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.baseClass, "__icon"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2), vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.baseClass, "__text"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.tagContent
  }, null, 8, ["content"])], 2), _ctx.closable && !_ctx.disabled ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.baseClass, "__icon-close")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClickClose && _ctx.onClickClose.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_close_icon)], 2)) : vue.createCommentVNode("", true)], 10, _hoisted_1);
}

CheckTag.render = render;

exports["default"] = CheckTag;
//# sourceMappingURL=check-tag.js.map
