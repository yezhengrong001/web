/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var vue = require('vue');
var config = require('../config.js');
var progress_utils = require('./utils.js');
var progress_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-progress");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: progress_props["default"],
  setup: function setup(props) {
    var progressPercent = vue.computed(function () {
      return Math.max(0, Math.min(props.percentage, 100));
    });
    var progressStatusStyle = vue.computed(function () {
      if (props.percentage >= 100) {
        return "success";
      }
      return props.status;
    });
    var progressBarStyle = vue.computed(function () {
      var height = typeof props.strokeWidth === "string" ? props.strokeWidth : "".concat(props.strokeWidth, "px");
      return {
        height: height,
        backgroundColor: props.trackColor
      };
    });
    var progressBarPercenStyle = vue.computed(function () {
      return {
        width: "".concat(progressPercent.value, "%"),
        background: props.color && progress_utils.getBackgroundColor(props.color)
      };
    });
    var rootClasses = vue.computed(function () {
      return ["".concat(name), "".concat(name, "--status--").concat(progressStatusStyle.value)];
    });
    var internalInstance = vue.getCurrentInstance();
    var progressLabelContent = vue.computed(function () {
      return props.label && (_typeof__default["default"](shared_render.renderTNode(internalInstance, "label")) === "object" ? shared_render.renderTNode(internalInstance, "label") : "".concat(progressPercent.value, "%"));
    });
    return {
      name: name,
      rootClasses: rootClasses,
      progressBarPercenStyle: progressBarPercenStyle,
      progressBarStyle: progressBarStyle,
      progressLabelContent: progressLabelContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.rootClasses)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__inner"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__bar")),
    style: vue.normalizeStyle(_ctx.progressBarStyle)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__bar-percent")),
    style: vue.normalizeStyle(_ctx.progressBarPercenStyle)
  }, null, 6)], 6), _ctx.progressLabelContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__label"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.progressLabelContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=progress.js.map
