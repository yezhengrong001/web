import { TdCascaderItems, TdCascaderItem } from './type';
declare const _default: import("vue").DefineComponent<{
    value: {
        type: import("vue").PropType<import("./type").TdCascaderItemValueType | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdCascaderItemValueType | undefined>;
        default: undefined;
    };
    options: {
        type: import("vue").PropType<TdCascaderItems | undefined>;
        default: () => never[];
    };
    closeIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: string;
    };
}, {
    closeBtnTNode: import("vue").ComputedRef<any>;
    titleTNode: import("vue").ComputedRef<any>;
    stepIndex: import("vue").Ref<number>;
    name: string;
    title: import("vue").ComputedRef<any>;
    closeIcon: import("vue").ComputedRef<any>;
    cascaderValue: import("vue").Ref<any>;
    steps: string[];
    selectedIndexes: number[];
    items: {
        [x: string]: any;
        label: string;
        value: import("./type").TdCascaderItemValueType;
        active?: boolean | undefined;
        disabled?: boolean | undefined;
        index?: string | undefined;
        leaf?: boolean | undefined;
        parent?: any | undefined;
        children?: any[] | undefined;
        selected?: boolean | undefined;
    }[][];
    setCascaderValue: import("../shared").ChangeHandler<any>;
    emitEvent: <T extends any[] = any[]>(eventName: string, ...args: T) => void;
    onCancel: (e: MouseEvent) => void;
    onPick: (item: TdCascaderItem, index: number, level: number, e: MouseEvent) => void;
    onStepsChange: (index: number) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value" | "cancel" | "change" | "pick" | "click-tab", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<import("./type").TdCascaderItemValueType | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdCascaderItemValueType | undefined>;
        default: undefined;
    };
    options: {
        type: import("vue").PropType<TdCascaderItems | undefined>;
        default: () => never[];
    };
    closeIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: string;
    };
}>>, {
    title: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined;
    value: import("./type").TdCascaderItemValueType | undefined;
    modelValue: import("./type").TdCascaderItemValueType | undefined;
    options: TdCascaderItems | undefined;
    closeIcon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined;
}>;
export default _default;
