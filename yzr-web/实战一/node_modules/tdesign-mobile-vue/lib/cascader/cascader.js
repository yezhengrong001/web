/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var vue = require('vue');
var steps_vue_vue_type_script_setup_true_lang = require('../_chunks/dep-5f813a8c.js');
var config = require('../config.js');
var cascader_props = require('./props.js');
var cascader_cascaderItem = require('./cascader-item.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/defineProperty');
require('./cascader-item-prop.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-cascader");
var script = vue.defineComponent({
  name: name,
  components: {
    CloseIcon: tdesignIconsVueNext.CloseIcon,
    CascaderItem: cascader_cascaderItem["default"],
    TNode: shared_renderTnode["default"],
    CascaderSteps: steps_vue_vue_type_script_setup_true_lang.script
  },
  props: cascader_props["default"],
  emits: ["change", "cancel", "pick", "click-tab", "update:modelValue", "update:value"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      cascaderValue = _useVModel2[0],
      setCascaderValue = _useVModel2[1];
    var title = vue.computed(function () {
      return props.title || "\u6807\u9898";
    });
    var closeIcon = vue.computed(function () {
      return props.closeIcon || false;
    });
    var stepIndex = vue.ref(0);
    var selectedIndexes = vue.reactive([]);
    var items = vue.reactive([props.options]);
    var steps = vue.reactive(["\u9009\u62E9\u9009\u9879"]);
    var onCancel = function onCancel(e) {
      emitEvent("cancel", {
        e: e
      });
    };
    var onStepsChange = function onStepsChange(index) {
      stepIndex.value = index;
      emitEvent("click-tab", index);
    };
    var internalInstance = vue.getCurrentInstance();
    var closeBtnTNode = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "closeIcon");
    });
    var titleTNode = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "title");
    });
    var onPick = function onPick(item, index, level, e) {
      var _item$children;
      if (item.disabled) {
        return;
      }
      selectedIndexes[level] = index;
      selectedIndexes.length = level + 1;
      steps[level] = item.label;
      emitEvent("pick", item.value, index, {
        e: e
      });
      if (item !== null && item !== void 0 && (_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        items[level + 1] = item.children;
        items.length = level + 2;
        stepIndex.value += 1;
        steps[level + 1] = "\u9009\u62E9\u9009\u9879";
        steps.length = level + 2;
      } else {
        setCascaderValue(item.value);
        emitEvent("change", item.value, items.map(function (item2, index2) {
          return vue.toRaw(item2[selectedIndexes[index2]]);
        }), {
          e: e
        });
      }
    };
    return {
      closeBtnTNode: closeBtnTNode,
      titleTNode: titleTNode,
      stepIndex: stepIndex,
      name: name,
      title: title,
      closeIcon: closeIcon,
      cascaderValue: cascaderValue,
      steps: steps,
      selectedIndexes: selectedIndexes,
      items: items,
      setCascaderValue: setCascaderValue,
      emitEvent: emitEvent,
      onCancel: onCancel,
      onPick: onPick,
      onStepsChange: onStepsChange
    };
  }
});

var _hoisted_1 = {
  style: {
    "width": "100%"
  }
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_close_icon = vue.resolveComponent("close-icon");
  var _component_cascader_steps = vue.resolveComponent("cascader-steps");
  var _component_cascader_item = vue.resolveComponent("cascader-item");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__wrapper"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__title"))
  }, [!(typeof _ctx.titleTNode === "string") ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 0,
    content: _ctx.titleTNode
  }, null, 8, ["content"])) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
    key: 1
  }, [vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)], 64))], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__close-btn")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onCancel && _ctx.onCancel.apply(_ctx, arguments);
    })
  }, [!(typeof _ctx.closeBtnTNode === "boolean") ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 0,
    content: _ctx.closeBtnTNode
  }, null, 8, ["content"])) : typeof _ctx.closeIcon === "boolean" && _ctx.closeIcon ? (vue.openBlock(), vue.createBlock(_component_close_icon, {
    key: 1,
    size: "24"
  })) : vue.createCommentVNode("", true)], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__content"))
  }, [vue.createVNode(_component_cascader_steps, {
    value: _ctx.stepIndex,
    items: _ctx.steps,
    "onUpdate:value": _ctx.onStepsChange
  }, null, 8, ["value", "items", "onUpdate:value"]), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__options-title"))
  }, "\u9009\u9879\u6807\u9898", 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__options-content"))
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.items, function (options, index) {
    return vue.openBlock(), vue.createElementBlock("div", {
      key: index,
      style: {
        "width": "100%"
      }
    }, [vue.createVNode(vue.Transition, {
      appear: "",
      name: "slide"
    }, {
      default: vue.withCtx(function () {
        return [vue.withDirectives(vue.createElementVNode("div", _hoisted_1, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(options, function (item, idx) {
          return vue.openBlock(), vue.createBlock(_component_cascader_item, vue.mergeProps({
            key: item.value
          }, item, {
            active: _ctx.selectedIndexes[index] === idx,
            onClick: function onClick($event) {
              return _ctx.onPick(item, idx, index, $event);
            }
          }), null, 16, ["active", "onClick"]);
        }), 128))], 512), [[vue.vShow, _ctx.stepIndex === index]])];
      }),
      _: 2
    }, 1024)]);
  }), 128))], 2)], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=cascader.js.map
