/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var cascader_cascaderItemProp = require('./cascader-item-prop.js');
var shared_render = require('../shared/render.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-cascader-item");
var script = vue.defineComponent({
  name: name,
  components: {
    CheckIcon: tdesignIconsVueNext.CheckIcon
  },
  props: cascader_cascaderItemProp["default"],
  emits: ["click"],
  setup: function setup(props, context) {
    var className = vue.computed(function () {
      return ["".concat(name), Boolean(props.active) && "active", Boolean(props.disabled) && "disabled"];
    });
    var internalInstance = vue.getCurrentInstance();
    var labelTNode = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "label");
    });
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var onSelect = function onSelect(context2) {
      emitEvent("click", {
        e: context2.e
      });
    };
    var label = vue.computed(function () {
      return props.label;
    });
    return _objectSpread({
      labelTNode: labelTNode,
      name: name,
      label: label,
      className: className,
      onSelect: onSelect
    }, vue.toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_check_icon = vue.resolveComponent("check-icon");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.className),
    onClick: _cache[0] || (_cache[0] = function ($event) {
      return _ctx.onSelect({
        e: $event
      });
    })
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-content"))
  }, vue.toDisplayString(_ctx.label), 3), vue.withDirectives(vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-active-icon"))
  }, [vue.createVNode(_component_check_icon, {
    size: "24"
  })], 2), [[vue.vShow, _ctx.active]])], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=cascader-item.js.map
