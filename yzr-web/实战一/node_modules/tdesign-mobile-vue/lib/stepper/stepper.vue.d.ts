declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    disableInput: BooleanConstructor;
    inputWidth: {
        type: NumberConstructor;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"grey" | "normal" | undefined>;
        default: "grey" | "normal" | undefined;
        validator(val: "grey" | "normal" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<string | number | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<string | number | undefined>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<string | number | undefined>;
        default: number;
    };
    onBlur: import("vue").PropType<((value: string | number) => void) | undefined>;
    onChange: import("vue").PropType<((value: string | number) => void) | undefined>;
    onOverlimit: import("vue").PropType<((type: "minus" | "plus") => void) | undefined>;
}, {
    value: import("vue").Ref<string | number | undefined>;
    modelValue: import("vue").Ref<string | number | undefined>;
    theme: import("vue").Ref<"grey" | "normal" | undefined>;
    disabled: import("vue").Ref<boolean>;
    max: import("vue").Ref<number>;
    defaultValue: import("vue").Ref<string | number | undefined>;
    min: import("vue").Ref<number>;
    step: import("vue").Ref<number>;
    disableInput: import("vue").Ref<boolean>;
    inputWidth: import("vue").Ref<number | undefined>;
    name: string;
    disabledClass: string;
    minusValue: () => void;
    stepperValue: import("vue").WritableComputedRef<number>;
    plusValue: () => void;
    handleInput: (e: Event) => void;
    handleChange: (e: Event) => void;
    inputStyle: import("vue").ComputedRef<"" | {
        width: string;
    }>;
    handleBlur: (e: FocusEvent) => void;
    isPureMode: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value" | "change" | "blur" | "overlimit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    disableInput: BooleanConstructor;
    inputWidth: {
        type: NumberConstructor;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"grey" | "normal" | undefined>;
        default: "grey" | "normal" | undefined;
        validator(val: "grey" | "normal" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<string | number | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<string | number | undefined>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<string | number | undefined>;
        default: number;
    };
    onBlur: import("vue").PropType<((value: string | number) => void) | undefined>;
    onChange: import("vue").PropType<((value: string | number) => void) | undefined>;
    onOverlimit: import("vue").PropType<((type: "minus" | "plus") => void) | undefined>;
}>>, {
    value: string | number | undefined;
    modelValue: string | number | undefined;
    theme: "grey" | "normal" | undefined;
    disabled: boolean;
    max: number;
    defaultValue: string | number | undefined;
    min: number;
    step: number;
    disableInput: boolean;
}>;
export default _default;
