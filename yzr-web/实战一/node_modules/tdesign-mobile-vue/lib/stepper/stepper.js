/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var stepper_props = require('./props.js');
var shared_constants = require('../shared/constants.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-stepper");
var disabledClass = shared_constants["default"].STATUS.disabled;
var script = vue.defineComponent({
  name: name,
  components: {
    AddIcon: tdesignIconsVueNext.AddIcon,
    RemoveIcon: tdesignIconsVueNext.RemoveIcon
  },
  props: stepper_props["default"],
  emits: ["update:value", "update:modelValue", "blur", "change", "overlimit"],
  setup: function setup(props, context) {
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      stepperValue = _useDefault2[0];
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var _toRefs = vue.toRefs(props),
      min = _toRefs.min,
      max = _toRefs.max,
      step = _toRefs.step,
      inputWidth = _toRefs.inputWidth,
      theme = _toRefs.theme,
      disabled = _toRefs.disabled;
    var isPureMode = vue.computed(function () {
      return theme.value === "grey";
    });
    var inputStyle = vue.computed(function () {
      return inputWidth ? {
        width: "".concat(inputWidth.value, "px")
      } : "";
    });
    var isDisabled = function isDisabled(type) {
      if (disabled.value) return true;
      if (type === "minus" && stepperValue.value <= min.value) {
        return true;
      }
      if (type === "plus" && stepperValue.value >= max.value) {
        return true;
      }
      return false;
    };
    var formatValue = function formatValue(value) {
      return Math.max(Math.min(max.value, value, Number.MAX_SAFE_INTEGER), min.value, Number.MIN_SAFE_INTEGER);
    };
    var updateValue = function updateValue(value) {
      stepperValue.value = formatValue(value);
    };
    var plusValue = function plusValue() {
      if (isDisabled("plus")) {
        emitEvent("overlimit", "plus");
        return;
      }
      updateValue(Number(stepperValue.value) + step.value);
    };
    var minusValue = function minusValue() {
      if (isDisabled("minus")) {
        emitEvent("overlimit", "minus");
        return;
      }
      updateValue(Number(stepperValue.value) - step.value);
    };
    var handleInput = function handleInput(e) {
      handleChange(e);
    };
    var handleChange = function handleChange(e) {
      var value = e.target.value.match(/^\d+\.\d+|^\d+/g);
      if (isNaN(Number(value))) return;
      var formattedValue = formatValue(Number(value));
      updateValue(Number(formattedValue));
    };
    var handleBlur = function handleBlur(e) {
      handleChange(e);
      emitEvent("blur", stepperValue.value);
    };
    return _objectSpread({
      name: name,
      disabledClass: disabledClass,
      minusValue: minusValue,
      stepperValue: stepperValue,
      plusValue: plusValue,
      handleInput: handleInput,
      handleChange: handleChange,
      inputStyle: inputStyle,
      handleBlur: handleBlur,
      isPureMode: isPureMode
    }, vue.toRefs(props));
  }
});

var _hoisted_1 = ["disabled", "readonly"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_remove_icon = vue.resolveComponent("remove-icon");
  var _component_add_icon = vue.resolveComponent("add-icon");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(["".concat(_ctx.name), "".concat(_ctx.disabled ? _ctx.disabledClass : ""), "".concat(_ctx.isPureMode ? "".concat(_ctx.name, "__pure") : "")])
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass(["".concat(_ctx.name, "__minus"), "".concat(_ctx.disabled || _ctx.stepperValue <= _ctx.min ? "t-is-disabled" : "")]),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.minusValue && _ctx.minusValue.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_remove_icon, {
    class: vue.normalizeClass("".concat(_ctx.name, "__icon"))
  }, null, 8, ["class"])], 2), vue.withDirectives(vue.createElementVNode("input", {
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
      return _ctx.stepperValue = $event;
    }),
    class: vue.normalizeClass("".concat(_ctx.name, "__input")),
    type: "tel",
    style: vue.normalizeStyle(_ctx.inputStyle),
    disabled: _ctx.disableInput || _ctx.disabled,
    readonly: _ctx.disableInput,
    onBlur: _cache[2] || (_cache[2] = function () {
      return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
    }),
    onInput: _cache[3] || (_cache[3] = function () {
      return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
    })
  }, null, 46, _hoisted_1), [[vue.vModelText, _ctx.stepperValue]]), vue.createElementVNode("div", {
    class: vue.normalizeClass(["".concat(_ctx.name, "__plus"), "".concat(_ctx.disabled || _ctx.stepperValue >= _ctx.max ? "t-is-disabled" : "")]),
    onClick: _cache[4] || (_cache[4] = function () {
      return _ctx.plusValue && _ctx.plusValue.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_add_icon, {
    class: vue.normalizeClass("".concat(_ctx.name, "__icon"))
  }, null, 8, ["class"])], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=stepper.js.map
