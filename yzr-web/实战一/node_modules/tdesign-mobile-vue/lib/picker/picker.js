/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var config = require('../config.js');
var picker_props = require('./props.js');
var button_index = require('../button/index.js');
var picker_pickerItem = require('./picker-item.js');
var shared_useExpose_index = require('../shared/useExpose/index.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
var shared_useChildSlots_index = require('../shared/useChildSlots/index.js');
require('../button/button.js');
require('@babel/runtime/helpers/defineProperty');
require('tdesign-icons-vue-next');
require('../shared/constants.js');
require('../button/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');
require('./picker.class.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-picker");
var getIndexFromColumns = function getIndexFromColumns(columns, value, column) {
  var _columns$column;
  var resultIndex;
  (_columns$column = columns[column]) === null || _columns$column === void 0 ? void 0 : _columns$column.forEach(function (item, index) {
    if (item.value === value) {
      resultIndex = index;
    }
  });
  return resultIndex;
};
var script = vue.defineComponent({
  name: name,
  components: {
    TButton: button_index["default"],
    PickerItem: picker_pickerItem["default"]
  },
  props: picker_props["default"],
  emits: ["change", "cancel", "pick", "update:modelValue", "update:value"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      pickerValue = _useVModel2[0],
      setPickerValue = _useVModel2[1];
    var confirmButtonText = vue.computed(function () {
      return props.confirmBtn;
    });
    var cancelButtonText = vue.computed(function () {
      return props.cancelBtn;
    });
    var curValueArray = vue.ref(pickerValue.value.map(function (item) {
      return item;
    }));
    var realColumns = vue.computed(function () {
      if (typeof props.columns === "function") {
        var data = props.columns(curValueArray.value);
        return data;
      }
      return props.columns;
    });
    var lastTimeValueArray = _toConsumableArray__default["default"](curValueArray.value);
    var curIndexArray = pickerValue.value.map(function (item, index) {
      return getIndexFromColumns(realColumns.value, item, index);
    });
    var lastTimeIndexArray = _toConsumableArray__default["default"](curIndexArray);
    var pickerItemInstanceArray = vue.ref([]);
    vue.onMounted(function () {
      pickerItemInstanceArray.value = shared_useChildSlots_index.useChildSlots("t-picker-item").map(function (item) {
        return item.component;
      });
    });
    var handleConfirm = function handleConfirm(e) {
      lastTimeValueArray = _toConsumableArray__default["default"](curValueArray.value);
      lastTimeIndexArray = _toConsumableArray__default["default"](curIndexArray);
      setPickerValue(curValueArray.value);
      emitEvent("confirm", curValueArray.value, {
        index: curIndexArray
      });
    };
    var handleCancel = function handleCancel(e) {
      curValueArray.value = _toConsumableArray__default["default"](lastTimeValueArray);
      curIndexArray = _toConsumableArray__default["default"](lastTimeIndexArray);
      pickerItemInstanceArray.value.forEach(function (item, index) {
        var _item$exposed;
        (_item$exposed = item.exposed) === null || _item$exposed === void 0 ? void 0 : _item$exposed.setIndex(curIndexArray[index]);
      });
      emitEvent("cancel", {
        e: e
      });
    };
    var handlePick = function handlePick(context2, column) {
      if (curValueArray.value[column] !== context2.value) {
        curValueArray.value[column] = context2.value;
        curIndexArray[column] = context2.index;
        if (typeof props.columns === "function") {
          var result = props.columns(curValueArray.value);
          result.forEach(function (item, index) {
            if (!item.filter(function (ele) {
              return ele.value === curValueArray.value[index];
            }).length) {
              var _item$;
              curValueArray.value[index] = (_item$ = item[0]) === null || _item$ === void 0 ? void 0 : _item$.value;
              curIndexArray[index] = 0;
              vue.nextTick(function () {
                var _pickerItemInstanceAr, _pickerItemInstanceAr2;
                (_pickerItemInstanceAr = pickerItemInstanceArray.value[index]) === null || _pickerItemInstanceAr === void 0 ? void 0 : (_pickerItemInstanceAr2 = _pickerItemInstanceAr.exposed) === null || _pickerItemInstanceAr2 === void 0 ? void 0 : _pickerItemInstanceAr2.setIndex(0);
              });
            } else {
              vue.nextTick(function () {
                var _pickerItemInstanceAr3, _pickerItemInstanceAr4;
                (_pickerItemInstanceAr3 = pickerItemInstanceArray.value[index]) === null || _pickerItemInstanceAr3 === void 0 ? void 0 : (_pickerItemInstanceAr4 = _pickerItemInstanceAr3.exposed) === null || _pickerItemInstanceAr4 === void 0 ? void 0 : _pickerItemInstanceAr4.setUpdateItems();
              });
            }
          });
        }
        emitEvent("pick", curValueArray.value, {
          index: context2.index,
          column: column
        });
      }
    };
    var setValues = function setValues(values) {
      curValueArray.value = values;
      setPickerValue(values);
      vue.nextTick(function () {
        pickerItemInstanceArray.value.forEach(function (item, index) {
          var _item$exposed2;
          (_item$exposed2 = item.exposed) === null || _item$exposed2 === void 0 ? void 0 : _item$exposed2.setValue(values[index]);
        });
      });
    };
    shared_useExpose_index.useExpose({
      setValues: setValues
    });
    return {
      name: name,
      pickerValue: pickerValue,
      confirmButtonText: confirmButtonText,
      cancelButtonText: cancelButtonText,
      handleConfirm: handleConfirm,
      handleCancel: handleCancel,
      handlePick: handlePick,
      realColumns: realColumns
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_button = vue.resolveComponent("t-button");
  var _component_picker_item = vue.resolveComponent("picker-item");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass("".concat(_ctx.name))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__toolbar"))
  }, [vue.createVNode(_component_t_button, {
    class: vue.normalizeClass("".concat(_ctx.name, "__cancel")),
    variant: "text",
    onClick: _ctx.handleCancel
  }, {
    default: vue.withCtx(function () {
      return [vue.createTextVNode(vue.toDisplayString(_ctx.cancelButtonText), 1)];
    }),
    _: 1
  }, 8, ["class", "onClick"]), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__title"))
  }, vue.toDisplayString(_ctx.title), 3), vue.createVNode(_component_t_button, {
    class: vue.normalizeClass("".concat(_ctx.name, "__confirm")),
    variant: "text",
    onClick: _ctx.handleConfirm
  }, {
    default: vue.withCtx(function () {
      return [vue.createTextVNode(vue.toDisplayString(_ctx.confirmButtonText), 1)];
    }),
    _: 1
  }, 8, ["class", "onClick"])], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__main"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "-item__group"))
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.realColumns, function (item, index) {
    return vue.openBlock(), vue.createBlock(_component_picker_item, {
      key: index,
      options: item,
      "default-value": _ctx.pickerValue[index],
      "render-label": _ctx.renderLabel,
      onPick: function onPick($event) {
        return _ctx.handlePick($event, index);
      }
    }, null, 8, ["options", "default-value", "render-label", "onPick"]);
  }), 128))], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__mask"))
  }, null, 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__indicator"))
  }, null, 2)], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=picker.js.map
