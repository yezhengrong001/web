/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var config = require('../config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var quartEaseOut = function quartEaseOut(t, b, c, d) {
  var tempT = t;
  return -c * ((tempT = tempT / d - 1) * tempT * tempT * tempT - 1) + b;
};
var DEFAULT_ITEM_HEIGHT = 40;
var DEFAULT_HOLDER_HEIGHT = 200;
var OFFSET_OF_BOUND = 60;
var ANIMATION_TIME_LIMIT = 460;
var ANIMATION_DURATION = 150;
var Picker = /*#__PURE__*/function () {
  function Picker(options) {
    _classCallCheck__default["default"](this, Picker);
    _defineProperty__default["default"](this, "holder", void 0);
    _defineProperty__default["default"](this, "options", void 0);
    _defineProperty__default["default"](this, "list", null);
    _defineProperty__default["default"](this, "elementItems", []);
    _defineProperty__default["default"](this, "height", DEFAULT_HOLDER_HEIGHT);
    _defineProperty__default["default"](this, "curIndex", 0);
    _defineProperty__default["default"](this, "itemClassName", "");
    _defineProperty__default["default"](this, "itemSelectedClassName", "");
    _defineProperty__default["default"](this, "itemHeight", DEFAULT_ITEM_HEIGHT);
    _defineProperty__default["default"](this, "lastMoveTime", 0);
    _defineProperty__default["default"](this, "lastMoveStart", 0);
    _defineProperty__default["default"](this, "stopInertiaMove", false);
    _defineProperty__default["default"](this, "startY", 0);
    _defineProperty__default["default"](this, "isPicking", false);
    _defineProperty__default["default"](this, "offsetYOfStartBound", OFFSET_OF_BOUND);
    _defineProperty__default["default"](this, "offsetYOfEndBound", -OFFSET_OF_BOUND);
    _defineProperty__default["default"](this, "offsetY", 0);
    _defineProperty__default["default"](this, "offsetYOfStart", 0);
    _defineProperty__default["default"](this, "offsetYOfEnd", 0);
    _defineProperty__default["default"](this, "onChange", void 0);
    if (!options.el) throw new Error("options el needed!");
    this.holder = options.el;
    this.options = options || {};
    this.onChange = options.onChange;
    this.init();
  }
  _createClass__default["default"](Picker, [{
    key: "init",
    value: function init() {
      this.initScrollParams();
      this.setSelectedClassName();
      this.bindEvent();
    }
  }, {
    key: "updateItems",
    value: function updateItems() {
      this.elementItems = _toConsumableArray__default["default"](this.holder.querySelectorAll("li"));
      var itemLen = this.elementItems.length;
      this.offsetYOfEnd = -this.itemHeight * (itemLen - 3);
      this.offsetYOfEndBound = -(this.itemHeight * (itemLen - 3) + OFFSET_OF_BOUND);
    }
  }, {
    key: "initScrollParams",
    value: function initScrollParams() {
      var _this$holder$querySel;
      this.list = this.holder.querySelector("ul");
      this.elementItems = _toConsumableArray__default["default"](this.holder.querySelectorAll("li"));
      this.itemHeight = ((_this$holder$querySel = this.holder.querySelector("li")) === null || _this$holder$querySel === void 0 ? void 0 : _this$holder$querySel.offsetHeight) || DEFAULT_ITEM_HEIGHT;
      this.height = this.holder.offsetHeight || DEFAULT_HOLDER_HEIGHT;
      this.curIndex = this.options.defaultIndex || 0;
      this.itemClassName = "".concat(prefix, "-picker-item__item");
      this.itemSelectedClassName = "".concat(prefix, "-picker-item__item--selected");
      this.itemHeight = DEFAULT_ITEM_HEIGHT;
      this.startY = 0;
      this.isPicking = false;
      this.lastMoveTime = 0;
      this.lastMoveStart = 0;
      this.stopInertiaMove = false;
      var startOffsetY = (-this.curIndex + 2) * this.itemHeight;
      var itemLen = this.elementItems.length;
      this.setOffsetY(startOffsetY);
      this.offsetYOfStart = startOffsetY;
      this.offsetYOfEnd = -this.itemHeight * (itemLen - 3);
      this.offsetYOfStartBound = this.itemHeight * 2 + OFFSET_OF_BOUND;
      this.offsetYOfEndBound = -(this.itemHeight * (itemLen - 3) + OFFSET_OF_BOUND);
    }
  }, {
    key: "bindEvent",
    value: function bindEvent() {
      var _this = this;
      this.holder.addEventListener("touchstart", function (e) {
        return _this.touchStartHandler(e);
      }, false);
      this.holder.addEventListener("touchmove", function (e) {
        return _this.touchMoveHandler(e);
      }, false);
      this.holder.addEventListener("touchend", function (e) {
        return _this.touchEndHandler(e);
      }, false);
      this.holder.addEventListener("touchcancel", function (e) {
        return _this.touchEndHandler(e);
      }, false);
    }
  }, {
    key: "touchStartHandler",
    value: function touchStartHandler(event) {
      event.preventDefault();
      this.isPicking = true;
      if (!this.holder) return;
      if (this.list) this.list.style.transition = "";
      this.startY = event.changedTouches[0].pageY;
      this.updateInertiaParams(event, true);
    }
  }, {
    key: "touchMoveHandler",
    value: function touchMoveHandler(event) {
      event.preventDefault();
      if (!this.isPicking || !this.holder) return;
      var endY = event.changedTouches[0].pageY;
      var dragRange = endY - this.startY;
      this.updateInertiaParams(event, false);
      var moveOffsetY = (-this.curIndex + 2) * this.itemHeight + dragRange;
      this.setOffsetY(moveOffsetY);
    }
  }, {
    key: "touchEndHandler",
    value: function touchEndHandler(event) {
      event.preventDefault();
      this.isPicking = false;
      if (!this.holder) return;
      var point = event.changedTouches[0];
      var nowTime = event.timeStamp || Date.now();
      var moveTime = nowTime - this.lastMoveTime;
      if (moveTime > ANIMATION_TIME_LIMIT) {
        this.stopInertiaMove = false;
        this.endScroll();
        return;
      }
      var v = (point.pageY - this.lastMoveStart) / moveTime;
      var dir = v > 0 ? -1 : 1;
      var dampingCoefficient = 8e-4;
      var deceleration = -1 * dir * dampingCoefficient;
      var duration = Math.abs(v / deceleration);
      var endY = event.changedTouches[0].pageY;
      var dragRange = endY - this.startY;
      var dist = v * duration - Math.pow(duration, 2) * deceleration / 2 + dragRange;
      if (dist === 0) {
        this.stopInertiaMove = false;
        this.endScroll();
        return;
      }
      this.scrollDist(nowTime, this.offsetY, dist, duration);
    }
  }, {
    key: "updateInertiaParams",
    value: function updateInertiaParams(event, isStart) {
      var point = event.changedTouches[0];
      if (isStart) {
        this.lastMoveStart = point.pageY;
        this.lastMoveTime = event.timeStamp || Date.now();
      }
      this.stopInertiaMove = true;
    }
  }, {
    key: "scrollDist",
    value: function scrollDist(now, startOffsetY, dist, duration) {
      var _this2 = this;
      this.stopInertiaMove = false;
      var start = null;
      var inertiaMove = function inertiaMove(timestamp) {
        if (_this2.stopInertiaMove) {
          return;
        }
        if (!start) start = timestamp;
        var progress = timestamp - start;
        var newOffsetY = quartEaseOut(progress, startOffsetY, dist, duration);
        _this2.setOffsetY(newOffsetY);
        if (progress > duration || newOffsetY > _this2.offsetYOfStartBound || newOffsetY < _this2.offsetYOfEndBound) {
          _this2.endScroll();
        } else {
          window.requestAnimationFrame(inertiaMove);
        }
      };
      window.requestAnimationFrame(inertiaMove);
    }
  }, {
    key: "update",
    value: function update() {
      this.updateItems();
      var updateIndex = this.curIndex > this.elementItems.length - 1 ? 0 : this.curIndex;
      this.updateIndex(updateIndex);
    }
  }, {
    key: "updateIndex",
    value: function updateIndex(index, options) {
      var realOptions = _objectSpread({
        duration: 460,
        isChange: true
      }, options);
      this.curIndex = index;
      this.setSelectedClassName();
      var moveOffsetY = (-index + 2) * this.itemHeight;
      if (this.list) {
        this.list.style.transform = "translate(0,".concat(moveOffsetY, "px) translateZ(0)");
        this.list.style.transitionDuration = "".concat(realOptions.duration, "ms");
        this.list.style.transitionTimingFunction = "ease-out";
      }
      realOptions.isChange && this.onChange(index);
    }
  }, {
    key: "getCurIndex",
    value: function getCurIndex() {
      return this.curIndex;
    }
  }, {
    key: "fix3d",
    value: function fix3d(index) {
      for (var i = 0; i < this.elementItems.length; i++) {
        var deg = 25 * (-index + i);
        this.elementItems[i].style.transform = "rotateX(".concat(deg, "deg)");
        this.elementItems[i].style.webkitTransform = "rotateX(".concat(deg, "deg)");
      }
    }
  }, {
    key: "setSelectedClassName",
    value: function setSelectedClassName() {
      var _this3 = this;
      var regClass = new RegExp(this.itemClassName, "i");
      var regSelected = new RegExp(this.itemSelectedClassName, "i");
      this.elementItems.forEach(function (item, i) {
        var tempItem = item;
        var itemClass = tempItem.className;
        if (itemClass === "" || !itemClass) {
          tempItem.className = _this3.itemClassName;
        } else {
          if (!regClass.test(itemClass)) {
            tempItem.classList.add(_this3.itemClassName);
          }
          if (regSelected.test(itemClass)) {
            tempItem.classList.remove(_this3.itemSelectedClassName);
          }
        }
        if (_this3.curIndex === i) {
          tempItem.classList.add(_this3.itemSelectedClassName);
        }
      });
    }
  }, {
    key: "setOffsetY",
    value: function setOffsetY(offsetY) {
      this.offsetY = offsetY;
      if (this.list) {
        this.list.style.transform = "translate3d(0, ".concat(offsetY, "px, 0)");
      }
    }
  }, {
    key: "endScroll",
    value: function endScroll() {
      if (this.stopInertiaMove) return;
      var curIndex = 0;
      if (this.offsetY > this.offsetYOfStartBound) {
        curIndex = 0;
        if (this.list) {
          this.list.style.transition = "".concat(ANIMATION_DURATION, "ms ease-out");
        }
      } else if (this.offsetY < this.offsetYOfEndBound) {
        curIndex = this.elementItems.length - 1;
        if (this.list) {
          this.list.style.transition = "".concat(ANIMATION_DURATION, "ms ease-out");
        }
      } else {
        if (this.list) {
          this.list.style.transition = "".concat(ANIMATION_DURATION, "ms ease-out");
        }
        curIndex = 2 - Math.round(this.offsetY / this.itemHeight);
        if (curIndex < 0) curIndex = 0;
        if (curIndex > this.elementItems.length - 1) curIndex = this.elementItems.length - 1;
      }
      var offsetY = (-curIndex + 2) * this.itemHeight;
      this.setOffsetY(offsetY);
      if (curIndex !== this.curIndex) {
        this.curIndex = curIndex;
        this.setSelectedClassName();
        this.onChange(this.curIndex);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      delete this.holder;
    }
  }]);
  return Picker;
}();

exports.ANIMATION_TIME_LIMIT = ANIMATION_TIME_LIMIT;
exports.DEFAULT_ITEM_HEIGHT = DEFAULT_ITEM_HEIGHT;
exports["default"] = Picker;
//# sourceMappingURL=picker.class.js.map
