/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var cell_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-cell");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: cell_props["default"],
  emits: ["click"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var internalInstance = vue.getCurrentInstance();
    var noteContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "note");
    });
    var titleContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "title");
    });
    var descriptionContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "description");
    });
    var rightIconContent = vue.computed(function () {
      if (props.arrow) {
        return vue.h(tdesignIconsVueNext.ChevronRightIcon);
      }
      return shared_render.renderTNode(internalInstance, "rightIcon");
    });
    var imageContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "image");
    });
    var leftIconContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "leftIcon");
    });
    var styleCell = vue.computed(function () {
      var _ref;
      return ["".concat(name), "".concat(name, "--").concat(props.align), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--hover"), props.hover), _defineProperty__default["default"](_ref, "".concat(name, "--bordered"), props.bordered), _ref)];
    });
    var onClick = function onClick(e) {
      return emitEvent("click", e);
    };
    return _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      name: name,
      onClick: onClick,
      styleCell: styleCell,
      imageContent: imageContent,
      rightIconContent: rightIconContent,
      leftIconContent: leftIconContent,
      noteContent: noteContent,
      titleContent: titleContent,
      descriptionContent: descriptionContent
    });
  }
});

var _hoisted_1 = ["src"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.styleCell),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__left-icon"))
  }, [_ctx.leftIconContent ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 0,
    content: _ctx.leftIconContent
  }, null, 8, ["content"])) : vue.createCommentVNode("", true), _ctx.image ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
    key: 1
  }, [typeof _ctx.image === "string" ? (vue.openBlock(), vue.createElementBlock("img", {
    key: 0,
    src: _ctx.image,
    class: vue.normalizeClass("".concat(_ctx.name, "__image"))
  }, null, 10, _hoisted_1)) : (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 1,
    content: _ctx.imageContent
  }, null, 8, ["content"]))], 64)) : vue.createCommentVNode("", true)], 2), _ctx.titleContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__title"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.titleContent
  }, null, 8, ["content"]), _ctx.required ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "--required"))
  }, "\xA0*", 2)) : vue.createCommentVNode("", true), _ctx.descriptionContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__description"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.descriptionContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2)) : vue.createCommentVNode("", true), _ctx.noteContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__note"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.noteContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), _ctx.rightIconContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 2,
    class: vue.normalizeClass("".concat(_ctx.name, "__right-icon"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.rightIconContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=cell.js.map
