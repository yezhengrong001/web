{"version":3,"file":"dropdown-item.js","sources":["../../src/dropdown-menu/dropdown-item.vue","../../src/dropdown-menu/dropdown-item.vue?vue&type=template&id=e0d03006&lang.js"],"sourcesContent":["<template>\n  <div v-if=\"isShowItems\" :class=\"classes\" :style=\"{ ...expandStyle }\">\n    <!-- <t-overlay v-if=\"isShowItems && showOverlay\" @click=\"onClickOverlay\" /> -->\n    <div :class=\"styleContent\" :style=\"{ ...transitionStyle }\">\n      <div :class=\"`${name}__bd`\">\n        <slot>\n          <template v-if=\"optionsLayout === 'columns'\">\n            <template v-if=\"!multiple\">\n              <!-- 单选列表 -->\n              <t-radio-group v-model=\"radioSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-radio\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    :class=\"styleDropRadio(option.value)\"\n                    align=\"right\"\n                    :checked=\"isCheckedRadio(option.value)\"\n                    :icon=\"renderCheckIcon\"\n                  />\n                </template>\n              </t-radio-group>\n            </template>\n            <template v-else>\n              <!-- 多选列表 -->\n              <t-checkbox-group v-model=\"checkSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-checkbox borderless :value=\"option.value\" :label=\"option.title\" :disabled=\"option.disabled\" />\n                </template>\n              </t-checkbox-group>\n            </template>\n          </template>\n          <template v-else-if=\"optionsLayout === 'tree'\">\n            <!-- 树形列表 ST -->\n            <div v-for=\"(_, level) in treeOptions\" :key=\"level\" :class=\"`${name}__tree-group`\">\n              <t-radio-group\n                v-if=\"level < treeState.leafLevel\"\n                :model-value=\"convertTreeRadioType(treeState.selectList[level])\"\n                @update:model-value=\"selectTreeNode(level, $event)\"\n              >\n                <!-- 树形列表 - 父级节点 ST -->\n                <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                  <t-radio\n                    :class=\"styleTreeRadio(option.value, level)\"\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    align=\"right\"\n                    :icon=\"[]\"\n                    borderless\n                  />\n                </template>\n                <!-- 树形列表 - 父级节点 ED -->\n              </t-radio-group>\n              <template v-else>\n                <!-- 树形列表 - 叶子节点 ST -->\n                <template v-if=\"!multiple\">\n                  <!-- 树形列表 - 叶子节点（单选） ST -->\n                  <t-radio-group\n                    :value=\"convertTreeRadioType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-radio\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        :class=\"styleTreeRadio(option.value, level)\"\n                        align=\"right\"\n                        borderless\n                      />\n                    </template>\n                  </t-radio-group>\n                  <!-- 树形列表 - 叶子节点（单选） ED -->\n                </template>\n                <template v-else>\n                  <!-- 树形列表 - 叶子节点（多选） ST -->\n                  <t-checkbox-group\n                    :value=\"convertTreeCheckType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-checkbox\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        align=\"right\"\n                        borderless\n                      ></t-checkbox>\n                    </template>\n                  </t-checkbox-group>\n                  <!-- 树形列表 - 叶子节点（多选） ED -->\n                </template>\n                <!-- 树形列表 - 叶子节点 ED -->\n              </template>\n            </div>\n            <!-- 树形列表 ED -->\n          </template>\n        </slot>\n      </div>\n      <div v-if=\"multiple || optionsLayout === 'tree'\" :class=\"`${name}__ft`\">\n        <t-button variant=\"outline\" :disabled=\"isBtnDisabled\" @click=\"resetSelect\">重置</t-button>\n        <t-button theme=\"primary\" :disabled=\"isBtnDisabled\" @click=\"confirmSelect\">确定</t-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { CheckIcon } from 'tdesign-icons-vue-next';\nimport {\n  h,\n  ref,\n  watch,\n  toRefs,\n  inject,\n  computed,\n  reactive,\n  nextTick,\n  SetupContext,\n  onBeforeMount,\n  defineComponent,\n} from 'vue';\nimport { TNode } from '../common';\nimport TRadio from '../radio';\nimport config from '../config';\nimport TButton from '../button';\nimport TCheckbox, { CheckboxGroup as TCheckboxGroup } from '../checkbox';\nimport TRadioGroup from '../radio-group';\nimport TransAniControl from './trans-ani-control';\nimport { useVModel, useEmitEvent } from '../shared';\nimport DropdownItemProps from './dropdown-item-props';\nimport { DropdownMenuState, DropdownMenuControl } from './context';\nimport { TdDropdownMenuProps, TdDropdownItemProps, TdDropdownItemOption, TdDropdownItemOptionValueType } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\n\ninterface TdDropdownTreeState {\n  /**\n   * 叶子层级\n   */\n  leafLevel: number;\n  /**\n   * 树的各级选项\n   */\n  selectList: TdDropdownTreeValueType[];\n}\n\n/**\n * 树选中项目（单选/多选）\n */\ntype TdDropdownTreeValueType = TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;\n\nexport default defineComponent({\n  name,\n  components: { TRadio, TButton, TCheckbox, TRadioGroup, TCheckboxGroup },\n  props: DropdownItemProps,\n  emits: ['change', 'open', 'opened', 'close', 'closed', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    // 受控 value 属性\n    const { value, modelValue } = toRefs(props);\n    const [passInValue, setValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    // 从父组件取属性、状态和控制函数\n    const menuProps = inject('dropdownMenuProps') as TdDropdownMenuProps;\n    const menuState = inject('dropdownMenuState') as DropdownMenuState;\n    const { expandMenu, collapseMenu } = inject('dropdownMenuControl') as DropdownMenuControl;\n    const menuAniControl = inject('dropdownAniControl') as TransAniControl;\n\n    // 组件样式\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-is-expanded`]: state.isExpanded,\n      },\n    ]);\n\n    const itemId = ref(0);\n    onBeforeMount(() => {\n      itemId.value = menuState.childCount;\n      menuState.childCount += 1;\n    });\n\n    const state = reactive({\n      showOverlay: computed(() => menuProps.overlay),\n      isShowItems: false,\n      isExpanded: false,\n      expandStyle: {},\n      transitionStyle: computed(() => ({\n        transition: `transform ${menuProps.duration}ms ease`,\n        '-webkit-transition': `transform ${menuProps.duration}ms ease`,\n      })),\n      multiple: computed(() => props.multiple),\n      optionsLayout: computed(() => props.optionsLayout),\n      options: computed(() => props.options),\n    });\n    const isCheckedRadio = (value: TdDropdownItemOptionValueType) => value === radioSelect.value;\n    const styleDropRadio = (value: TdDropdownItemOptionValueType) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: !props.multiple,\n        [`${prefix}-is-checked`]: isCheckedRadio(value),\n      },\n    ];\n    const styleContent = computed(() => {\n      const { optionsLayout } = props;\n      const layoutCol = +(props.optionsColumns ?? 0);\n      const isTree = optionsLayout === 'tree';\n      const treeCol = isTree ? treeState.leafLevel + 1 : 0;\n      return [\n        `${name}__content`,\n        {\n          [`${prefix}-is-tree`]: isTree,\n          [`${prefix}-is-single`]: !isTree && !props.multiple,\n          [`${prefix}-is-multi`]: !isTree && props.multiple,\n          [`${prefix}-is-col1`]: layoutCol === 1 || treeCol === 1,\n          [`${prefix}-is-col2`]: layoutCol === 2 || treeCol === 2,\n          [`${prefix}-is-col3`]: layoutCol === 3 || treeCol === 3,\n        },\n      ];\n    });\n    // 设置展开/收起状态\n    const setExpand = (val: boolean) => {\n      // 菜单定位\n      const { bottom } = menuState.barRect;\n      state.expandStyle = {\n        zIndex: menuProps.zIndex,\n        top: `${bottom}px`,\n      };\n      // console.log(`dropdown-item(${itemId.value}) changing state: `, val);\n      const { duration } = menuProps;\n      // 动画状态控制\n      menuAniControl.setTo(\n        +(duration ?? 200),\n        () => {\n          // Now do:\n          emitEvent(val ? 'open' : 'close');\n          if (val) {\n            state.isShowItems = val;\n          }\n          state.isExpanded = !val;\n        },\n        () => {\n          // Next tick do:\n          state.isExpanded = val;\n        },\n        () => {\n          // Finally do:\n          if (!val) {\n            state.isShowItems = val;\n          }\n          emitEvent(val ? 'opened' : 'closed');\n        },\n      );\n    };\n\n    // 根据父组件状态，判断当前是否展开\n    watch(\n      () => menuState.activeId === itemId.value,\n      (val: boolean) => setExpand(val),\n    );\n\n    const radioSelect = ref<TdDropdownItemOptionValueType | undefined>();\n    const checkSelect = ref<TdDropdownItemOptionValueType[]>([]);\n    const treeState = reactive<TdDropdownTreeState>({\n      leafLevel: 0,\n      selectList: [],\n    });\n    const styleTreeRadio = computed(() => (value: string, level: number) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: level === treeState.leafLevel,\n        [`${prefix}-is-checked`]: value === treeState.selectList[level],\n      },\n    ]);\n    // 点击树形节点的时候\n    const selectTreeNode = (level: number, value: TdDropdownTreeValueType, rebuildTree = true) => {\n      // console.log('level:', level, 'value:', value);\n      // 当前节点\n      const tempValue: TdDropdownTreeValueType[] = treeState.selectList.slice(0, level);\n      tempValue[level] = value;\n      treeState.selectList = tempValue;\n      if (rebuildTree) {\n        buildTreeOptions();\n      }\n    };\n    // 处理后的树形选项列表\n    const treeOptions = ref<TdDropdownItemOption[]>([]);\n    const buildTreeOptions = () => {\n      const { options } = props;\n      const { selectList } = treeState;\n      const newTreeOptions = [];\n      let level = -1;\n      let node: TdDropdownItemOption | undefined = {\n        title: '',\n        value: '',\n        disabled: false,\n        options,\n      };\n      while (node?.options) {\n        // 当前层级节点的列表\n        const list: TdDropdownItemOption[] = node.options;\n        newTreeOptions.push([...list]);\n        level += 1;\n        // 当前层级列表选中项\n        const thisValue: TdDropdownTreeValueType | undefined = selectList[level];\n        if (thisValue === undefined) {\n          const firstChild = list[0];\n          if (firstChild.options) {\n            // 还有子节点，当前层级作为单选处理\n            selectTreeNode(level, firstChild.value, false);\n            node = firstChild;\n          } else {\n            // 没有子节点，结束处理\n            selectTreeNode(level, props.multiple ? [] : undefined, false);\n            break;\n          }\n        } else if (!Array.isArray(thisValue)) {\n          const child: TdDropdownItemOption | undefined = list.find(\n            (child: TdDropdownItemOption) => child.value === thisValue,\n          );\n          node = child;\n        } else {\n          node = undefined;\n        }\n      }\n      treeState.leafLevel = Math.max(0, level);\n      treeOptions.value = newTreeOptions as [];\n    };\n    if (props.optionsLayout === 'tree') {\n      watch(\n        () =>\n          JSON.stringify({\n            options: props.options,\n          }),\n        async () => {\n          // fix: 这次微任务结束后，再重建选项。否则 oldVal 无法更新，导致无限调用\n          await nextTick();\n          buildTreeOptions();\n        },\n      );\n      buildTreeOptions();\n    }\n    // 根据传入值更新当前选中\n    const updateSelectValue = (\n      val: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | TdDropdownTreeValueType[] | null,\n    ) => {\n      const layout = props.optionsLayout;\n      if (layout === 'tree') {\n        treeState.selectList = (val ?? []) as TdDropdownTreeValueType[];\n        buildTreeOptions();\n      } else if (layout === 'columns') {\n        if (!props.multiple) {\n          const list = props.options as TdDropdownItemOption[];\n          const firstChild = list?.[0];\n          const newValue = val ?? firstChild?.value ?? null;\n          radioSelect.value = newValue as TdDropdownItemOptionValueType;\n        } else if (props.multiple) {\n          if (props.optionsLayout === 'columns') {\n            checkSelect.value = (val ?? []) as TdDropdownItemOptionValueType[];\n          }\n        }\n      }\n    };\n    // 初始值更新一次选中项\n    updateSelectValue(passInValue.value || null);\n    // 跟踪 modelValue 更新选项\n    watch(\n      () => passInValue.value,\n      (val) => {\n        if (!val) return;\n        updateSelectValue(val);\n      },\n    );\n    // 底部按键是否可用\n    const isBtnDisabled = computed(() => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          return checkSelect.value.length <= 0;\n        case 'tree':\n          if (!props.multiple) {\n            return treeState.selectList[treeState.leafLevel] === undefined;\n          }\n          if (props.multiple) {\n            const selectList = treeState.selectList[treeState.leafLevel] as [];\n            return selectList && selectList.length <= 0;\n          }\n      }\n      return true;\n    });\n    // 重置\n    const resetSelect = () => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          checkSelect.value = [];\n          break;\n        case 'tree':\n          treeState.selectList = [];\n          break;\n      }\n    };\n    // 确认\n    const confirmSelect = () => {\n      let values;\n      switch (props.optionsLayout) {\n        case 'columns':\n          values = checkSelect.value;\n          break;\n        case 'tree':\n          values = treeState.selectList;\n          break;\n      }\n      values = JSON.parse(JSON.stringify(values));\n      setValue(values);\n      collapseMenu();\n    };\n    // 单选值监控\n    watch(radioSelect, (val) => {\n      if (props.multiple || props.optionsLayout === 'tree') return;\n      if (!state.isShowItems) return;\n      const value = passInValue.value || [];\n      if (value[0] === val) return;\n      if (val) {\n        setValue(val);\n      }\n      collapseMenu();\n    });\n    // 点击遮罩层\n    const onClickOverlay = () => {\n      if (menuProps.closeOnClickOverlay) {\n        collapseMenu();\n      }\n    };\n    // 创建小图标\n    const TiconCheckIcon = h(CheckIcon);\n    // 树形节点的类型转换\n    const convertTreeRadioType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType;\n    const convertTreeCheckType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType[];\n    return {\n      name: ref(name),\n      ...toRefs(props),\n      ...toRefs(state),\n      classes,\n      styleContent,\n      isBtnDisabled,\n      radioSelect,\n      checkSelect,\n      treeOptions,\n      treeState,\n      styleTreeRadio,\n      isCheckedRadio,\n      selectTreeNode,\n      styleDropRadio,\n      expandMenu,\n      collapseMenu,\n      resetSelect,\n      confirmSelect,\n      onClickOverlay,\n      renderCheckIcon: [TiconCheckIcon as unknown as TNode],\n      convertTreeRadioType,\n      convertTreeCheckType,\n    };\n  },\n});\n</script>\n","<template>\n  <div v-if=\"isShowItems\" :class=\"classes\" :style=\"{ ...expandStyle }\">\n    <!-- <t-overlay v-if=\"isShowItems && showOverlay\" @click=\"onClickOverlay\" /> -->\n    <div :class=\"styleContent\" :style=\"{ ...transitionStyle }\">\n      <div :class=\"`${name}__bd`\">\n        <slot>\n          <template v-if=\"optionsLayout === 'columns'\">\n            <template v-if=\"!multiple\">\n              <!-- 单选列表 -->\n              <t-radio-group v-model=\"radioSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-radio\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    :class=\"styleDropRadio(option.value)\"\n                    align=\"right\"\n                    :checked=\"isCheckedRadio(option.value)\"\n                    :icon=\"renderCheckIcon\"\n                  />\n                </template>\n              </t-radio-group>\n            </template>\n            <template v-else>\n              <!-- 多选列表 -->\n              <t-checkbox-group v-model=\"checkSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-checkbox borderless :value=\"option.value\" :label=\"option.title\" :disabled=\"option.disabled\" />\n                </template>\n              </t-checkbox-group>\n            </template>\n          </template>\n          <template v-else-if=\"optionsLayout === 'tree'\">\n            <!-- 树形列表 ST -->\n            <div v-for=\"(_, level) in treeOptions\" :key=\"level\" :class=\"`${name}__tree-group`\">\n              <t-radio-group\n                v-if=\"level < treeState.leafLevel\"\n                :model-value=\"convertTreeRadioType(treeState.selectList[level])\"\n                @update:model-value=\"selectTreeNode(level, $event)\"\n              >\n                <!-- 树形列表 - 父级节点 ST -->\n                <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                  <t-radio\n                    :class=\"styleTreeRadio(option.value, level)\"\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    align=\"right\"\n                    :icon=\"[]\"\n                    borderless\n                  />\n                </template>\n                <!-- 树形列表 - 父级节点 ED -->\n              </t-radio-group>\n              <template v-else>\n                <!-- 树形列表 - 叶子节点 ST -->\n                <template v-if=\"!multiple\">\n                  <!-- 树形列表 - 叶子节点（单选） ST -->\n                  <t-radio-group\n                    :value=\"convertTreeRadioType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-radio\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        :class=\"styleTreeRadio(option.value, level)\"\n                        align=\"right\"\n                        borderless\n                      />\n                    </template>\n                  </t-radio-group>\n                  <!-- 树形列表 - 叶子节点（单选） ED -->\n                </template>\n                <template v-else>\n                  <!-- 树形列表 - 叶子节点（多选） ST -->\n                  <t-checkbox-group\n                    :value=\"convertTreeCheckType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-checkbox\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        align=\"right\"\n                        borderless\n                      ></t-checkbox>\n                    </template>\n                  </t-checkbox-group>\n                  <!-- 树形列表 - 叶子节点（多选） ED -->\n                </template>\n                <!-- 树形列表 - 叶子节点 ED -->\n              </template>\n            </div>\n            <!-- 树形列表 ED -->\n          </template>\n        </slot>\n      </div>\n      <div v-if=\"multiple || optionsLayout === 'tree'\" :class=\"`${name}__ft`\">\n        <t-button variant=\"outline\" :disabled=\"isBtnDisabled\" @click=\"resetSelect\">重置</t-button>\n        <t-button theme=\"primary\" :disabled=\"isBtnDisabled\" @click=\"confirmSelect\">确定</t-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { CheckIcon } from 'tdesign-icons-vue-next';\nimport {\n  h,\n  ref,\n  watch,\n  toRefs,\n  inject,\n  computed,\n  reactive,\n  nextTick,\n  SetupContext,\n  onBeforeMount,\n  defineComponent,\n} from 'vue';\nimport { TNode } from '../common';\nimport TRadio from '../radio';\nimport config from '../config';\nimport TButton from '../button';\nimport TCheckbox, { CheckboxGroup as TCheckboxGroup } from '../checkbox';\nimport TRadioGroup from '../radio-group';\nimport TransAniControl from './trans-ani-control';\nimport { useVModel, useEmitEvent } from '../shared';\nimport DropdownItemProps from './dropdown-item-props';\nimport { DropdownMenuState, DropdownMenuControl } from './context';\nimport { TdDropdownMenuProps, TdDropdownItemProps, TdDropdownItemOption, TdDropdownItemOptionValueType } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\n\ninterface TdDropdownTreeState {\n  /**\n   * 叶子层级\n   */\n  leafLevel: number;\n  /**\n   * 树的各级选项\n   */\n  selectList: TdDropdownTreeValueType[];\n}\n\n/**\n * 树选中项目（单选/多选）\n */\ntype TdDropdownTreeValueType = TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;\n\nexport default defineComponent({\n  name,\n  components: { TRadio, TButton, TCheckbox, TRadioGroup, TCheckboxGroup },\n  props: DropdownItemProps,\n  emits: ['change', 'open', 'opened', 'close', 'closed', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    // 受控 value 属性\n    const { value, modelValue } = toRefs(props);\n    const [passInValue, setValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    // 从父组件取属性、状态和控制函数\n    const menuProps = inject('dropdownMenuProps') as TdDropdownMenuProps;\n    const menuState = inject('dropdownMenuState') as DropdownMenuState;\n    const { expandMenu, collapseMenu } = inject('dropdownMenuControl') as DropdownMenuControl;\n    const menuAniControl = inject('dropdownAniControl') as TransAniControl;\n\n    // 组件样式\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-is-expanded`]: state.isExpanded,\n      },\n    ]);\n\n    const itemId = ref(0);\n    onBeforeMount(() => {\n      itemId.value = menuState.childCount;\n      menuState.childCount += 1;\n    });\n\n    const state = reactive({\n      showOverlay: computed(() => menuProps.overlay),\n      isShowItems: false,\n      isExpanded: false,\n      expandStyle: {},\n      transitionStyle: computed(() => ({\n        transition: `transform ${menuProps.duration}ms ease`,\n        '-webkit-transition': `transform ${menuProps.duration}ms ease`,\n      })),\n      multiple: computed(() => props.multiple),\n      optionsLayout: computed(() => props.optionsLayout),\n      options: computed(() => props.options),\n    });\n    const isCheckedRadio = (value: TdDropdownItemOptionValueType) => value === radioSelect.value;\n    const styleDropRadio = (value: TdDropdownItemOptionValueType) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: !props.multiple,\n        [`${prefix}-is-checked`]: isCheckedRadio(value),\n      },\n    ];\n    const styleContent = computed(() => {\n      const { optionsLayout } = props;\n      const layoutCol = +(props.optionsColumns ?? 0);\n      const isTree = optionsLayout === 'tree';\n      const treeCol = isTree ? treeState.leafLevel + 1 : 0;\n      return [\n        `${name}__content`,\n        {\n          [`${prefix}-is-tree`]: isTree,\n          [`${prefix}-is-single`]: !isTree && !props.multiple,\n          [`${prefix}-is-multi`]: !isTree && props.multiple,\n          [`${prefix}-is-col1`]: layoutCol === 1 || treeCol === 1,\n          [`${prefix}-is-col2`]: layoutCol === 2 || treeCol === 2,\n          [`${prefix}-is-col3`]: layoutCol === 3 || treeCol === 3,\n        },\n      ];\n    });\n    // 设置展开/收起状态\n    const setExpand = (val: boolean) => {\n      // 菜单定位\n      const { bottom } = menuState.barRect;\n      state.expandStyle = {\n        zIndex: menuProps.zIndex,\n        top: `${bottom}px`,\n      };\n      // console.log(`dropdown-item(${itemId.value}) changing state: `, val);\n      const { duration } = menuProps;\n      // 动画状态控制\n      menuAniControl.setTo(\n        +(duration ?? 200),\n        () => {\n          // Now do:\n          emitEvent(val ? 'open' : 'close');\n          if (val) {\n            state.isShowItems = val;\n          }\n          state.isExpanded = !val;\n        },\n        () => {\n          // Next tick do:\n          state.isExpanded = val;\n        },\n        () => {\n          // Finally do:\n          if (!val) {\n            state.isShowItems = val;\n          }\n          emitEvent(val ? 'opened' : 'closed');\n        },\n      );\n    };\n\n    // 根据父组件状态，判断当前是否展开\n    watch(\n      () => menuState.activeId === itemId.value,\n      (val: boolean) => setExpand(val),\n    );\n\n    const radioSelect = ref<TdDropdownItemOptionValueType | undefined>();\n    const checkSelect = ref<TdDropdownItemOptionValueType[]>([]);\n    const treeState = reactive<TdDropdownTreeState>({\n      leafLevel: 0,\n      selectList: [],\n    });\n    const styleTreeRadio = computed(() => (value: string, level: number) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: level === treeState.leafLevel,\n        [`${prefix}-is-checked`]: value === treeState.selectList[level],\n      },\n    ]);\n    // 点击树形节点的时候\n    const selectTreeNode = (level: number, value: TdDropdownTreeValueType, rebuildTree = true) => {\n      // console.log('level:', level, 'value:', value);\n      // 当前节点\n      const tempValue: TdDropdownTreeValueType[] = treeState.selectList.slice(0, level);\n      tempValue[level] = value;\n      treeState.selectList = tempValue;\n      if (rebuildTree) {\n        buildTreeOptions();\n      }\n    };\n    // 处理后的树形选项列表\n    const treeOptions = ref<TdDropdownItemOption[]>([]);\n    const buildTreeOptions = () => {\n      const { options } = props;\n      const { selectList } = treeState;\n      const newTreeOptions = [];\n      let level = -1;\n      let node: TdDropdownItemOption | undefined = {\n        title: '',\n        value: '',\n        disabled: false,\n        options,\n      };\n      while (node?.options) {\n        // 当前层级节点的列表\n        const list: TdDropdownItemOption[] = node.options;\n        newTreeOptions.push([...list]);\n        level += 1;\n        // 当前层级列表选中项\n        const thisValue: TdDropdownTreeValueType | undefined = selectList[level];\n        if (thisValue === undefined) {\n          const firstChild = list[0];\n          if (firstChild.options) {\n            // 还有子节点，当前层级作为单选处理\n            selectTreeNode(level, firstChild.value, false);\n            node = firstChild;\n          } else {\n            // 没有子节点，结束处理\n            selectTreeNode(level, props.multiple ? [] : undefined, false);\n            break;\n          }\n        } else if (!Array.isArray(thisValue)) {\n          const child: TdDropdownItemOption | undefined = list.find(\n            (child: TdDropdownItemOption) => child.value === thisValue,\n          );\n          node = child;\n        } else {\n          node = undefined;\n        }\n      }\n      treeState.leafLevel = Math.max(0, level);\n      treeOptions.value = newTreeOptions as [];\n    };\n    if (props.optionsLayout === 'tree') {\n      watch(\n        () =>\n          JSON.stringify({\n            options: props.options,\n          }),\n        async () => {\n          // fix: 这次微任务结束后，再重建选项。否则 oldVal 无法更新，导致无限调用\n          await nextTick();\n          buildTreeOptions();\n        },\n      );\n      buildTreeOptions();\n    }\n    // 根据传入值更新当前选中\n    const updateSelectValue = (\n      val: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | TdDropdownTreeValueType[] | null,\n    ) => {\n      const layout = props.optionsLayout;\n      if (layout === 'tree') {\n        treeState.selectList = (val ?? []) as TdDropdownTreeValueType[];\n        buildTreeOptions();\n      } else if (layout === 'columns') {\n        if (!props.multiple) {\n          const list = props.options as TdDropdownItemOption[];\n          const firstChild = list?.[0];\n          const newValue = val ?? firstChild?.value ?? null;\n          radioSelect.value = newValue as TdDropdownItemOptionValueType;\n        } else if (props.multiple) {\n          if (props.optionsLayout === 'columns') {\n            checkSelect.value = (val ?? []) as TdDropdownItemOptionValueType[];\n          }\n        }\n      }\n    };\n    // 初始值更新一次选中项\n    updateSelectValue(passInValue.value || null);\n    // 跟踪 modelValue 更新选项\n    watch(\n      () => passInValue.value,\n      (val) => {\n        if (!val) return;\n        updateSelectValue(val);\n      },\n    );\n    // 底部按键是否可用\n    const isBtnDisabled = computed(() => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          return checkSelect.value.length <= 0;\n        case 'tree':\n          if (!props.multiple) {\n            return treeState.selectList[treeState.leafLevel] === undefined;\n          }\n          if (props.multiple) {\n            const selectList = treeState.selectList[treeState.leafLevel] as [];\n            return selectList && selectList.length <= 0;\n          }\n      }\n      return true;\n    });\n    // 重置\n    const resetSelect = () => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          checkSelect.value = [];\n          break;\n        case 'tree':\n          treeState.selectList = [];\n          break;\n      }\n    };\n    // 确认\n    const confirmSelect = () => {\n      let values;\n      switch (props.optionsLayout) {\n        case 'columns':\n          values = checkSelect.value;\n          break;\n        case 'tree':\n          values = treeState.selectList;\n          break;\n      }\n      values = JSON.parse(JSON.stringify(values));\n      setValue(values);\n      collapseMenu();\n    };\n    // 单选值监控\n    watch(radioSelect, (val) => {\n      if (props.multiple || props.optionsLayout === 'tree') return;\n      if (!state.isShowItems) return;\n      const value = passInValue.value || [];\n      if (value[0] === val) return;\n      if (val) {\n        setValue(val);\n      }\n      collapseMenu();\n    });\n    // 点击遮罩层\n    const onClickOverlay = () => {\n      if (menuProps.closeOnClickOverlay) {\n        collapseMenu();\n      }\n    };\n    // 创建小图标\n    const TiconCheckIcon = h(CheckIcon);\n    // 树形节点的类型转换\n    const convertTreeRadioType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType;\n    const convertTreeCheckType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType[];\n    return {\n      name: ref(name),\n      ...toRefs(props),\n      ...toRefs(state),\n      classes,\n      styleContent,\n      isBtnDisabled,\n      radioSelect,\n      checkSelect,\n      treeOptions,\n      treeState,\n      styleTreeRadio,\n      isCheckedRadio,\n      selectTreeNode,\n      styleDropRadio,\n      expandMenu,\n      collapseMenu,\n      resetSelect,\n      confirmSelect,\n      onClickOverlay,\n      renderCheckIcon: [TiconCheckIcon as unknown as TNode],\n      convertTreeRadioType,\n      convertTreeCheckType,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TRadio","TButton","TCheckbox","TRadioGroup","TCheckboxGroup","props","DropdownItemProps","emits","setup","context","emitEvent","useEmitEvent","emit","toRefs","value","modelValue","useVModel","defaultValue","onChange","_slicedToArray","passInValue","setValue","menuProps","inject","menuState","expandMenu","collapseMenu","menuAniControl","classes","computed","state","isExpanded","itemId","ref","onBeforeMount","childCount","reactive","showOverlay","overlay","isShowItems","expandStyle","transitionStyle","transition","duration","multiple","optionsLayout","options","isCheckedRadio","radioSelect","styleDropRadio","_defineProperty","styleContent","layoutCol","optionsColumns","isTree","treeCol","treeState","leafLevel","setExpand","val","bottom","barRect","zIndex","top","setTo","watch","activeId","checkSelect","selectList","styleTreeRadio","level","selectTreeNode","rebuildTree","tempValue","slice","buildTreeOptions","treeOptions","newTreeOptions","node","title","disabled","list","push","thisValue","firstChild","Array","isArray","child","find","Math","max","JSON","stringify","_asyncToGenerator","_regeneratorRuntime","nextTick","updateSelectValue","layout","newValue","isBtnDisabled","length","resetSelect","confirmSelect","values","parse","onClickOverlay","closeOnClickOverlay","TiconCheckIcon","h","CheckIcon","convertTreeRadioType","convertTreeCheckType","_objectSpread","renderCheckIcon","_ctx","_createElementBlock","class","style","_createElementVNode","_renderSlot","_Fragment","key","_createBlock","_component_t_radio_group","$event","_renderList","option","_component_t_radio","label","_normalizeClass","align","checked","icon","_component_t_checkbox_group","_component_t_checkbox","borderless","_openBlock","_","_createVNode","_component_t_button","variant","onClick","theme"],"mappings":"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"}