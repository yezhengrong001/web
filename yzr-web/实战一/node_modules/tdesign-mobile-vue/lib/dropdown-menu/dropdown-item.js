/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var vue = require('vue');
var radio_index = require('../radio/index.js');
var config = require('../config.js');
var button_index = require('../button/index.js');
var checkbox_index = require('../checkbox/index.js');
var radioGroup_index = require('../radio-group/index.js');
var dropdownMenu_dropdownItemProps = require('./dropdown-item-props.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
require('../radio/radio.js');
require('../shared/constants.js');
require('../radio/props.js');
require('../shared/render-tnode.js');
require('../shared/functions.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');
require('../button/button.js');
require('../button/props.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../shared/useDefault/index.js');
require('../checkbox/group.js');
require('../checkbox/checkbox-group-props.js');
require('../checkbox/hooks/getOptions.js');
require('../shared/useChildSlots/index.js');
require('../checkbox/hooks/setCheckAllStatus.js');
require('lodash/intersection');
require('../radio-group/radio-group.js');
require('../radio/radio-group-props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-dropdown-item");
var script = vue.defineComponent({
  name: name,
  components: {
    TRadio: radio_index["default"],
    TButton: button_index["default"],
    TCheckbox: checkbox_index["default"],
    TRadioGroup: radioGroup_index["default"],
    TCheckboxGroup: checkbox_index.CheckboxGroup
  },
  props: dropdownMenu_dropdownItemProps["default"],
  emits: ["change", "open", "opened", "close", "closed", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      passInValue = _useVModel2[0],
      setValue = _useVModel2[1];
    var menuProps = vue.inject("dropdownMenuProps");
    var menuState = vue.inject("dropdownMenuState");
    var _inject = vue.inject("dropdownMenuControl"),
      expandMenu = _inject.expandMenu,
      collapseMenu = _inject.collapseMenu;
    var menuAniControl = vue.inject("dropdownAniControl");
    var classes = vue.computed(function () {
      return ["".concat(name), _defineProperty__default["default"]({}, "".concat(prefix, "-is-expanded"), state.isExpanded)];
    });
    var itemId = vue.ref(0);
    vue.onBeforeMount(function () {
      itemId.value = menuState.childCount;
      menuState.childCount += 1;
    });
    var state = vue.reactive({
      showOverlay: vue.computed(function () {
        return menuProps.overlay;
      }),
      isShowItems: false,
      isExpanded: false,
      expandStyle: {},
      transitionStyle: vue.computed(function () {
        return {
          transition: "transform ".concat(menuProps.duration, "ms ease"),
          "-webkit-transition": "transform ".concat(menuProps.duration, "ms ease")
        };
      }),
      multiple: vue.computed(function () {
        return props.multiple;
      }),
      optionsLayout: vue.computed(function () {
        return props.optionsLayout;
      }),
      options: vue.computed(function () {
        return props.options;
      })
    });
    var isCheckedRadio = function isCheckedRadio(value2) {
      return value2 === radioSelect.value;
    };
    var styleDropRadio = function styleDropRadio(value2) {
      var _ref2;
      return ["".concat(name, "__radio"), (_ref2 = {}, _defineProperty__default["default"](_ref2, "".concat(prefix, "-is-tick"), !props.multiple), _defineProperty__default["default"](_ref2, "".concat(prefix, "-is-checked"), isCheckedRadio(value2)), _ref2)];
    };
    var styleContent = vue.computed(function () {
      var _props$optionsColumns, _ref3;
      var optionsLayout = props.optionsLayout;
      var layoutCol = +((_props$optionsColumns = props.optionsColumns) !== null && _props$optionsColumns !== void 0 ? _props$optionsColumns : 0);
      var isTree = optionsLayout === "tree";
      var treeCol = isTree ? treeState.leafLevel + 1 : 0;
      return ["".concat(name, "__content"), (_ref3 = {}, _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-tree"), isTree), _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-single"), !isTree && !props.multiple), _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-multi"), !isTree && props.multiple), _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-col1"), layoutCol === 1 || treeCol === 1), _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-col2"), layoutCol === 2 || treeCol === 2), _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-col3"), layoutCol === 3 || treeCol === 3), _ref3)];
    });
    var setExpand = function setExpand(val) {
      var bottom = menuState.barRect.bottom;
      state.expandStyle = {
        zIndex: menuProps.zIndex,
        top: "".concat(bottom, "px")
      };
      var duration = menuProps.duration;
      menuAniControl.setTo(+(duration !== null && duration !== void 0 ? duration : 200), function () {
        emitEvent(val ? "open" : "close");
        if (val) {
          state.isShowItems = val;
        }
        state.isExpanded = !val;
      }, function () {
        state.isExpanded = val;
      }, function () {
        if (!val) {
          state.isShowItems = val;
        }
        emitEvent(val ? "opened" : "closed");
      });
    };
    vue.watch(function () {
      return menuState.activeId === itemId.value;
    }, function (val) {
      return setExpand(val);
    });
    var radioSelect = vue.ref();
    var checkSelect = vue.ref([]);
    var treeState = vue.reactive({
      leafLevel: 0,
      selectList: []
    });
    var styleTreeRadio = vue.computed(function () {
      return function (value2, level) {
        var _ref4;
        return ["".concat(name, "__radio"), (_ref4 = {}, _defineProperty__default["default"](_ref4, "".concat(prefix, "-is-tick"), level === treeState.leafLevel), _defineProperty__default["default"](_ref4, "".concat(prefix, "-is-checked"), value2 === treeState.selectList[level]), _ref4)];
      };
    });
    var selectTreeNode = function selectTreeNode(level, value2) {
      var rebuildTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var tempValue = treeState.selectList.slice(0, level);
      tempValue[level] = value2;
      treeState.selectList = tempValue;
      if (rebuildTree) {
        buildTreeOptions();
      }
    };
    var treeOptions = vue.ref([]);
    var buildTreeOptions = function buildTreeOptions() {
      var options = props.options;
      var selectList = treeState.selectList;
      var newTreeOptions = [];
      var level = -1;
      var node = {
        title: "",
        value: "",
        disabled: false,
        options: options
      };
      var _loop = function _loop() {
        var list = node.options;
        newTreeOptions.push(_toConsumableArray__default["default"](list));
        level += 1;
        var thisValue = selectList[level];
        if (thisValue === void 0) {
          var firstChild = list[0];
          if (firstChild.options) {
            selectTreeNode(level, firstChild.value, false);
            node = firstChild;
          } else {
            selectTreeNode(level, props.multiple ? [] : void 0, false);
            return "break";
          }
        } else if (!Array.isArray(thisValue)) {
          var child = list.find(function (child2) {
            return child2.value === thisValue;
          });
          node = child;
        } else {
          node = void 0;
        }
      };
      while ((_node = node) !== null && _node !== void 0 && _node.options) {
        var _node;
        var _ret = _loop();
        if (_ret === "break") break;
      }
      treeState.leafLevel = Math.max(0, level);
      treeOptions.value = newTreeOptions;
    };
    if (props.optionsLayout === "tree") {
      vue.watch(function () {
        return JSON.stringify({
          options: props.options
        });
      }, /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return vue.nextTick();
              case 2:
                buildTreeOptions();
              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
      buildTreeOptions();
    }
    var updateSelectValue = function updateSelectValue(val) {
      var layout = props.optionsLayout;
      if (layout === "tree") {
        treeState.selectList = val !== null && val !== void 0 ? val : [];
        buildTreeOptions();
      } else if (layout === "columns") {
        if (!props.multiple) {
          var _ref6;
          var list = props.options;
          var firstChild = list === null || list === void 0 ? void 0 : list[0];
          var newValue = (_ref6 = val !== null && val !== void 0 ? val : firstChild === null || firstChild === void 0 ? void 0 : firstChild.value) !== null && _ref6 !== void 0 ? _ref6 : null;
          radioSelect.value = newValue;
        } else if (props.multiple) {
          if (props.optionsLayout === "columns") {
            checkSelect.value = val !== null && val !== void 0 ? val : [];
          }
        }
      }
    };
    updateSelectValue(passInValue.value || null);
    vue.watch(function () {
      return passInValue.value;
    }, function (val) {
      if (!val) return;
      updateSelectValue(val);
    });
    var isBtnDisabled = vue.computed(function () {
      switch (props.optionsLayout) {
        case "columns":
          return checkSelect.value.length <= 0;
        case "tree":
          if (!props.multiple) {
            return treeState.selectList[treeState.leafLevel] === void 0;
          }
          if (props.multiple) {
            var selectList = treeState.selectList[treeState.leafLevel];
            return selectList && selectList.length <= 0;
          }
      }
      return true;
    });
    var resetSelect = function resetSelect() {
      switch (props.optionsLayout) {
        case "columns":
          checkSelect.value = [];
          break;
        case "tree":
          treeState.selectList = [];
          break;
      }
    };
    var confirmSelect = function confirmSelect() {
      var values;
      switch (props.optionsLayout) {
        case "columns":
          values = checkSelect.value;
          break;
        case "tree":
          values = treeState.selectList;
          break;
      }
      values = JSON.parse(JSON.stringify(values));
      setValue(values);
      collapseMenu();
    };
    vue.watch(radioSelect, function (val) {
      if (props.multiple || props.optionsLayout === "tree") return;
      if (!state.isShowItems) return;
      var value2 = passInValue.value || [];
      if (value2[0] === val) return;
      if (val) {
        setValue(val);
      }
      collapseMenu();
    });
    var onClickOverlay = function onClickOverlay() {
      if (menuProps.closeOnClickOverlay) {
        collapseMenu();
      }
    };
    var TiconCheckIcon = vue.h(tdesignIconsVueNext.CheckIcon);
    var convertTreeRadioType = function convertTreeRadioType(value2) {
      return value2;
    };
    var convertTreeCheckType = function convertTreeCheckType(value2) {
      return value2;
    };
    return _objectSpread$1(_objectSpread$1(_objectSpread$1({
      name: vue.ref(name)
    }, vue.toRefs(props)), vue.toRefs(state)), {}, {
      classes: classes,
      styleContent: styleContent,
      isBtnDisabled: isBtnDisabled,
      radioSelect: radioSelect,
      checkSelect: checkSelect,
      treeOptions: treeOptions,
      treeState: treeState,
      styleTreeRadio: styleTreeRadio,
      isCheckedRadio: isCheckedRadio,
      selectTreeNode: selectTreeNode,
      styleDropRadio: styleDropRadio,
      expandMenu: expandMenu,
      collapseMenu: collapseMenu,
      resetSelect: resetSelect,
      confirmSelect: confirmSelect,
      onClickOverlay: onClickOverlay,
      renderCheckIcon: [TiconCheckIcon],
      convertTreeRadioType: convertTreeRadioType,
      convertTreeCheckType: convertTreeCheckType
    });
  }
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_radio = vue.resolveComponent("t-radio");
  var _component_t_radio_group = vue.resolveComponent("t-radio-group");
  var _component_t_checkbox = vue.resolveComponent("t-checkbox");
  var _component_t_checkbox_group = vue.resolveComponent("t-checkbox-group");
  var _component_t_button = vue.resolveComponent("t-button");
  return _ctx.isShowItems ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass(_ctx.classes),
    style: vue.normalizeStyle(_objectSpread({}, _ctx.expandStyle))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass(_ctx.styleContent),
    style: vue.normalizeStyle(_objectSpread({}, _ctx.transitionStyle))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__bd"))
  }, [vue.renderSlot(_ctx.$slots, "default", {}, function () {
    return [_ctx.optionsLayout === "columns" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
      key: 0
    }, [!_ctx.multiple ? (vue.openBlock(), vue.createBlock(_component_t_radio_group, {
      key: 0,
      modelValue: _ctx.radioSelect,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = function ($event) {
        return _ctx.radioSelect = $event;
      })
    }, {
      default: vue.withCtx(function () {
        return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.options, function (option) {
          return vue.openBlock(), vue.createBlock(_component_t_radio, {
            key: option.value,
            value: option.value,
            label: option.title,
            disabled: option.disabled,
            class: vue.normalizeClass(_ctx.styleDropRadio(option.value)),
            align: "right",
            checked: _ctx.isCheckedRadio(option.value),
            icon: _ctx.renderCheckIcon
          }, null, 8, ["value", "label", "disabled", "class", "checked", "icon"]);
        }), 128))];
      }),
      _: 1
    }, 8, ["modelValue"])) : (vue.openBlock(), vue.createBlock(_component_t_checkbox_group, {
      key: 1,
      modelValue: _ctx.checkSelect,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
        return _ctx.checkSelect = $event;
      })
    }, {
      default: vue.withCtx(function () {
        return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.options, function (option) {
          return vue.openBlock(), vue.createBlock(_component_t_checkbox, {
            key: option.value,
            borderless: "",
            value: option.value,
            label: option.title,
            disabled: option.disabled
          }, null, 8, ["value", "label", "disabled"]);
        }), 128))];
      }),
      _: 1
    }, 8, ["modelValue"]))], 64)) : _ctx.optionsLayout === "tree" ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {
      key: 1
    }, vue.renderList(_ctx.treeOptions, function (_, level) {
      return vue.openBlock(), vue.createElementBlock("div", {
        key: level,
        class: vue.normalizeClass("".concat(_ctx.name, "__tree-group"))
      }, [level < _ctx.treeState.leafLevel ? (vue.openBlock(), vue.createBlock(_component_t_radio_group, {
        key: 0,
        "model-value": _ctx.convertTreeRadioType(_ctx.treeState.selectList[level]),
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _ctx.selectTreeNode(level, $event);
        }
      }, {
        default: vue.withCtx(function () {
          return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.treeOptions[level], function (option) {
            return vue.openBlock(), vue.createBlock(_component_t_radio, {
              key: option.value,
              class: vue.normalizeClass(_ctx.styleTreeRadio(option.value, level)),
              value: option.value,
              label: option.title,
              disabled: option.disabled,
              align: "right",
              icon: [],
              borderless: ""
            }, null, 8, ["class", "value", "label", "disabled"]);
          }), 128))];
        }),
        _: 2
      }, 1032, ["model-value", "onUpdate:modelValue"])) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
        key: 1
      }, [!_ctx.multiple ? (vue.openBlock(), vue.createBlock(_component_t_radio_group, {
        key: 0,
        value: _ctx.convertTreeRadioType(_ctx.treeState.selectList[level]),
        "onUpdate:value": function onUpdateValue($event) {
          return _ctx.selectTreeNode(level, $event);
        }
      }, {
        default: vue.withCtx(function () {
          return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.treeOptions[level], function (option) {
            return vue.openBlock(), vue.createBlock(_component_t_radio, {
              key: option.value,
              value: option.value,
              label: option.title,
              disabled: option.disabled,
              class: vue.normalizeClass(_ctx.styleTreeRadio(option.value, level)),
              align: "right",
              borderless: ""
            }, null, 8, ["value", "label", "disabled", "class"]);
          }), 128))];
        }),
        _: 2
      }, 1032, ["value", "onUpdate:value"])) : (vue.openBlock(), vue.createBlock(_component_t_checkbox_group, {
        key: 1,
        value: _ctx.convertTreeCheckType(_ctx.treeState.selectList[level]),
        "onUpdate:value": function onUpdateValue($event) {
          return _ctx.selectTreeNode(level, $event);
        }
      }, {
        default: vue.withCtx(function () {
          return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.treeOptions[level], function (option) {
            return vue.openBlock(), vue.createBlock(_component_t_checkbox, {
              key: option.value,
              value: option.value,
              label: option.title,
              disabled: option.disabled,
              align: "right",
              borderless: ""
            }, null, 8, ["value", "label", "disabled"]);
          }), 128))];
        }),
        _: 2
      }, 1032, ["value", "onUpdate:value"]))], 64))], 2);
    }), 128)) : vue.createCommentVNode("", true)];
  })], 2), _ctx.multiple || _ctx.optionsLayout === "tree" ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__ft"))
  }, [vue.createVNode(_component_t_button, {
    variant: "outline",
    disabled: _ctx.isBtnDisabled,
    onClick: _ctx.resetSelect
  }, {
    default: vue.withCtx(function () {
      return [vue.createTextVNode("\u91CD\u7F6E")];
    }),
    _: 1
  }, 8, ["disabled", "onClick"]), vue.createVNode(_component_t_button, {
    theme: "primary",
    disabled: _ctx.isBtnDisabled,
    onClick: _ctx.confirmSelect
  }, {
    default: vue.withCtx(function () {
      return [vue.createTextVNode("\u786E\u5B9A")];
    }),
    _: 1
  }, 8, ["disabled", "onClick"])], 2)) : vue.createCommentVNode("", true)], 6)], 6)) : vue.createCommentVNode("", true);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=dropdown-item.js.map
