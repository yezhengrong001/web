import { h } from 'vue';
import { TdDropdownItemOption, TdDropdownItemOptionValueType } from './type';
declare type TdDropdownTreeValueType = TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;
declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<TdDropdownItemOption[] | undefined>;
    };
    optionsColumns: {
        type: import("vue").PropType<string | number | undefined>;
    };
    optionsLayout: {
        type: import("vue").PropType<"columns" | "tree" | undefined>;
        default: "columns" | "tree" | undefined;
        validator(val: "columns" | "tree" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
        default: undefined;
    };
    onChange: import("vue").PropType<((value: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[]) => void) | undefined>;
}, {
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    styleContent: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    isBtnDisabled: import("vue").ComputedRef<boolean>;
    radioSelect: import("vue").Ref<TdDropdownItemOptionValueType | undefined>;
    checkSelect: import("vue").Ref<TdDropdownItemOptionValueType[]>;
    treeOptions: import("vue").Ref<{
        [x: string]: any;
        title: string;
        disabled: boolean;
        value: TdDropdownItemOptionValueType;
    }[]>;
    treeState: {
        leafLevel: number;
        selectList: (TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined)[];
    };
    styleTreeRadio: import("vue").ComputedRef<(value: string, level: number) => (string | {
        [x: string]: boolean;
    })[]>;
    isCheckedRadio: (value: TdDropdownItemOptionValueType) => boolean;
    selectTreeNode: (level: number, value: TdDropdownTreeValueType, rebuildTree?: boolean) => void;
    styleDropRadio: (value: TdDropdownItemOptionValueType) => (string | {
        [x: string]: boolean;
    })[];
    expandMenu: (item: any, idx: number) => void;
    collapseMenu: () => void;
    resetSelect: () => void;
    confirmSelect: () => void;
    onClickOverlay: () => void;
    renderCheckIcon: ((h: typeof h) => import("../common").SlotReturnValue)[];
    convertTreeRadioType: (value: TdDropdownTreeValueType) => TdDropdownItemOptionValueType;
    convertTreeCheckType: (value: TdDropdownTreeValueType) => TdDropdownItemOptionValueType[];
    showOverlay: import("vue").Ref<boolean | undefined>;
    isShowItems: import("vue").Ref<boolean>;
    isExpanded: import("vue").Ref<boolean>;
    expandStyle: import("vue").Ref<{}>;
    transitionStyle: import("vue").Ref<{
        transition: string;
        '-webkit-transition': string;
    }>;
    multiple: import("vue").Ref<boolean>;
    optionsLayout: import("vue").Ref<"columns" | "tree" | undefined>;
    options: import("vue").Ref<TdDropdownItemOption[] | undefined>;
    label: import("vue").Ref<string>;
    value: import("vue").Ref<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
    modelValue: import("vue").Ref<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
    disabled: import("vue").Ref<boolean>;
    defaultValue: import("vue").Ref<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
    optionsColumns: import("vue").Ref<string | number | undefined>;
    name: import("vue").Ref<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value" | "open" | "close" | "opened" | "closed" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<TdDropdownItemOption[] | undefined>;
    };
    optionsColumns: {
        type: import("vue").PropType<string | number | undefined>;
    };
    optionsLayout: {
        type: import("vue").PropType<"columns" | "tree" | undefined>;
        default: "columns" | "tree" | undefined;
        validator(val: "columns" | "tree" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined>;
        default: undefined;
    };
    onChange: import("vue").PropType<((value: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[]) => void) | undefined>;
}>>, {
    label: string;
    value: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;
    modelValue: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;
    disabled: boolean;
    multiple: boolean;
    defaultValue: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;
    optionsLayout: "columns" | "tree" | undefined;
}>;
export default _default;
