/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var dropdownMenu_context = require('./context.js');
var dropdownMenu_transAniControl = require('./trans-ani-control.js');
var dropdownMenu_domUtils = require('./dom-utils.js');
var dropdownMenu_props = require('./props.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('../shared/functions.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-dropdown-menu");
var script = vue.defineComponent({
  name: name,
  components: {
    CaretDownSmallIcon: tdesignIconsVueNext.CaretDownSmallIcon
  },
  props: dropdownMenu_props["default"],
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
      expose = _ref.expose;
    var state = vue.reactive({
      activeId: null,
      barRect: {},
      childCount: 0
    });
    var menuItems = vue.ref([]);
    var updateItems = function updateItems() {
      if (slots.default) {
        var itemName = "".concat(prefix, "-dropdown-item");
        var children = slots.default();
        menuItems.value = children.filter(function (child) {
          var _child$type;
          var childTypeName = child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name;
          return (childTypeName === null || childTypeName === void 0 ? void 0 : childTypeName.includes) && childTypeName.includes(itemName);
        });
      }
    };
    vue.watch(function () {
      var _slots$default;
      return slots === null || slots === void 0 ? void 0 : (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots);
    }, updateItems, {
      deep: true,
      immediate: true
    });
    var menuTitles = vue.computed(function () {
      return menuItems.value.map(function (item) {
        var _item$props = item.props,
          label = _item$props.label,
          disabled = _item$props.disabled;
        return {
          label: label,
          disabled: disabled !== void 0 && disabled !== false
        };
      });
    });
    var aniControl = new dropdownMenu_transAniControl["default"]();
    vue.provide("dropdownMenuProps", props);
    vue.provide("dropdownMenuState", state);
    vue.provide("dropdownAniControl", aniControl);
    var classes = vue.computed(function () {
      return ["".concat(name)];
    });
    var refBar = vue.ref(null);
    var styleBar = vue.computed(function () {
      return ["".concat(name, "__bar"), _defineProperty__default["default"]({}, "".concat(name, "__bar ").concat(name, "__bar--open"), state.activeId)];
    });
    var styleBarItem = vue.computed(function () {
      return function (item, idx) {
        var _ref3;
        return ["".concat(name, "__item"), (_ref3 = {}, _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-disabled"), item.disabled), _defineProperty__default["default"](_ref3, "".concat(prefix, "-is-active"), idx === state.activeId), _ref3)];
      };
    });
    var expandMenu = function expandMenu(item, idx) {
      var disabled = item.disabled;
      if (disabled) return;
      if (state.activeId === idx) {
        collapseMenu();
        return;
      }
      state.activeId = idx;
      var bar = refBar.value;
      var barRect = dropdownMenu_domUtils.findRelativeRect(bar);
      state.barRect = barRect;
      var container = dropdownMenu_domUtils.findRelativeContainer(bar) || document.body;
      dropdownMenu_context.context.recordMenuExpanded(container, control, dropdownMenu_context.DropdownMenuExpandState.expanded);
    };
    var collapseMenu = function collapseMenu() {
      state.activeId = null;
      var bar = refBar.value;
      var container = dropdownMenu_domUtils.findRelativeContainer(bar) || document.body;
      dropdownMenu_context.context.recordMenuExpanded(container, control, dropdownMenu_context.DropdownMenuExpandState.collapsed);
    };
    var control = {
      expandMenu: expandMenu,
      collapseMenu: collapseMenu
    };
    vue.provide("dropdownMenuControl", control);
    expose({
      toggle: function toggle(idx) {
        if (idx != null) {
          var item = menuTitles.value[idx];
          expandMenu(item, idx);
        } else {
          collapseMenu();
        }
      }
    });
    return _objectSpread(_objectSpread({
      name: vue.ref(name),
      classes: classes
    }, vue.toRefs(props)), {}, {
      refBar: refBar,
      state: state,
      styleBar: styleBar,
      styleBarItem: styleBarItem,
      menuItems: menuItems,
      menuTitles: menuTitles,
      expandMenu: expandMenu
    });
  }
});

var _hoisted_1 = ["onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_caret_down_small_icon = vue.resolveComponent("caret-down-small-icon");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.classes)
  }, [vue.createElementVNode("div", {
    ref: "refBar",
    class: vue.normalizeClass(_ctx.styleBar)
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.menuTitles, function (item, idx) {
    return vue.openBlock(), vue.createElementBlock("div", {
      key: idx,
      class: vue.normalizeClass(_ctx.styleBarItem(item, idx)),
      onClick: function onClick($event) {
        return _ctx.expandMenu(item, idx);
      }
    }, [vue.createElementVNode("div", {
      class: vue.normalizeClass("".concat(_ctx.name, "__title"))
    }, vue.toDisplayString(item.label), 3), vue.createVNode(_component_caret_down_small_icon, {
      class: vue.normalizeClass("".concat(_ctx.name, "__arrow")),
      size: "24"
    }, null, 8, ["class"])], 10, _hoisted_1);
  }), 128))], 2), vue.renderSlot(_ctx.$slots, "default")], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=dropdown-menu.js.map
