/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var core = require('@vueuse/core');
var sticky_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

var name = "".concat(config["default"].prefix, "-sticky");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: sticky_props["default"],
  setup: function setup(props2, context) {
    var boxClasses = name;
    var stickyContent = vue.computed(function () {
      return shared_render.renderContent(vue.getCurrentInstance(), "default", "");
    });
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props2, context.emit);
    var boxRef = core.templateRef("boxRef");
    var _useElementBounding = core.useElementBounding(boxRef),
      boxTop = _useElementBounding.top;
    var contentRef = core.templateRef("contentRef");
    var _useElementBounding2 = core.useElementBounding(contentRef),
      contentTop = _useElementBounding2.top,
      height = _useElementBounding2.height;
    var boxStyles = vue.computed(function () {
      return "height:".concat(height.value, "px;");
    });
    var container;
    var containerHeight = vue.ref(0);
    var containerTop = vue.ref(0);
    vue.watch(boxTop, function () {
      if (props2.container) {
        container = document.querySelector(props2.container);
        var _container$getBoundin = container.getBoundingClientRect(),
          top = _container$getBoundin.top,
          height2 = _container$getBoundin.height;
        containerHeight.value = height2;
        containerTop.value = top;
      }
    });
    var contentStyles = vue.computed(function () {
      var styleStr = "z-index:".concat(props2.zIndex, ";");
      var isFixed = false;
      if (props2.disabled) return styleStr;
      var offsetTop = Number(props2.offsetTop);
      if (container) {
        if (containerHeight.value + containerTop.value < offsetTop + height.value) {
          styleStr += "transform:translate3d(0, ".concat(containerHeight.value - height.value, "px, 0);");
        } else if (boxTop.value <= offsetTop) {
          styleStr += "position:fixed;top:".concat(offsetTop, "px;");
          isFixed = true;
        }
      } else if (boxTop.value <= offsetTop) {
        styleStr += "position:fixed;top:".concat(offsetTop, "px;");
        isFixed = true;
      }
      emitEvent("scroll", {
        scrollTop: contentTop.value,
        isFixed: isFixed
      });
      return styleStr;
    });
    return {
      boxClasses: boxClasses,
      boxStyles: boxStyles,
      contentStyles: contentStyles,
      stickyContent: stickyContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    ref: "boxRef",
    class: vue.normalizeClass(_ctx.boxClasses),
    style: vue.normalizeStyle(_ctx.boxStyles)
  }, [vue.createElementVNode("div", {
    ref: "contentRef",
    class: vue.normalizeClass("".concat(_ctx.boxClasses, "__content")),
    style: vue.normalizeStyle(_ctx.contentStyles)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.stickyContent
  }, null, 8, ["content"])], 6)], 6);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=sticky.js.map
