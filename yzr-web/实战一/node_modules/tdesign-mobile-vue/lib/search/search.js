/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var vue = require('vue');
var config = require('../config.js');
var button_index = require('../button/index.js');
var input_index = require('../input/index.js');
var search_props = require('./props.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_component = require('../shared/component.js');
require('../button/button.js');
require('../shared/constants.js');
require('../button/props.js');
require('../shared/render-tnode.js');
require('../shared/useEmitEvent/index.js');
require('lodash/camelCase');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('../input/input.js');
require('@vueuse/core');
require('../cell/index.js');
require('../cell/cell.js');
require('../cell/props.js');
require('../input/props.js');
require('../shared/util.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-search");
var script = vue.defineComponent({
  name: name,
  components: {
    TIconSearch: tdesignIconsVueNext.SearchIcon,
    TIconClear: tdesignIconsVueNext.CloseCircleFilledIcon,
    TButton: button_index["default"],
    TInput: input_index["default"]
  },
  props: search_props["default"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var classes = vue.computed(function () {
      var _ref2;
      return _ref2 = {}, _defineProperty__default["default"](_ref2, "".concat(name), true), _defineProperty__default["default"](_ref2, "".concat(prefix, "-is-focused"), !state.labelActive), _ref2;
    });
    var _useDefault = shared_useDefault_index.useDefault(props, emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      value = _useDefault2[0];
    var shapeStyle = vue.computed(function () {
      return {
        borderRadius: props.shape === "square" ? void 0 : "50px"
      };
    });
    var searchInput = vue.ref();
    var state = vue.reactive({
      labelActive: !value.value,
      inputVal: ""
    });
    var doFocus = function doFocus() {
      var _searchInput$value;
      (_searchInput$value = searchInput.value) === null || _searchInput$value === void 0 ? void 0 : _searchInput$value.focus();
    };
    var onBlur = function onBlur(value2, context) {
      var _props$onBlur;
      state.labelActive = !value2;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value2, {
        e: context.e
      });
    };
    var onClick = function onClick() {
      state.labelActive = !state.labelActive;
      doFocus();
    };
    var onFocus = function onFocus(value2, context) {
      var _props$onFocus;
      state.labelActive = false;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value2, {
        e: context.e
      });
    };
    var onClear = function onClear(e) {
      var _props$onClear;
      searchInput.value.innerValue = "";
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, {
        e: e
      });
    };
    var onCancel = function onCancel(e) {
      var _props$onActionClick;
      state.labelActive = !state.labelActive;
      (_props$onActionClick = props.onActionClick) === null || _props$onActionClick === void 0 ? void 0 : _props$onActionClick.call(props, {
        e: e
      });
    };
    var onChange = function onChange(value2, context) {
      var _props$onChange;
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, value2, {
        e: context === null || context === void 0 ? void 0 : context.e
      });
    };
    shared_component.extendAPI({
      doFocus: doFocus,
      blur: blur
    });
    return _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      name: vue.ref(name),
      classes: classes,
      shapeStyle: shapeStyle,
      onClick: onClick,
      onCancel: onCancel,
      onBlur: onBlur,
      onFocus: onFocus,
      onClear: onClear,
      onChange: onChange,
      state: state,
      value: value,
      searchInput: searchInput
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_icon_search = vue.resolveComponent("t-icon-search");
  var _component_t_input = vue.resolveComponent("t-input");
  var _component_t_icon_clear = vue.resolveComponent("t-icon-clear");
  var _component_t_button = vue.resolveComponent("t-button");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.classes)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__form")),
    style: vue.normalizeStyle(_ctx.shapeStyle)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__box"))
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__icon-search"))
  }, [vue.renderSlot(_ctx.$slots, "leftIcon", {}, function () {
    return [vue.createVNode(_component_t_icon_search)];
  })], 2), vue.createVNode(_component_t_input, {
    ref: "searchInput",
    modelValue: _ctx.value,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function ($event) {
      return _ctx.value = $event;
    }),
    type: "search",
    class: vue.normalizeClass("".concat(_ctx.name, "__input")),
    autofocus: _ctx.focus,
    placeholder: _ctx.placeholder,
    onBlur: _ctx.onBlur,
    onFocus: _ctx.onFocus,
    onChange: _ctx.onChange
  }, null, 8, ["modelValue", "class", "autofocus", "placeholder", "onBlur", "onFocus", "onChange"]), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__icon-close"))
  }, [vue.createVNode(_component_t_icon_clear, {
    onClick: _ctx.onClear
  }, null, 8, ["onClick"])], 2)], 2), vue.withDirectives(vue.createElementVNode("label", {
    class: vue.normalizeClass("".concat(_ctx.name, "__label")),
    style: vue.normalizeStyle(_ctx.shapeStyle),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__label-icon-search"))
  }, [vue.renderSlot(_ctx.$slots, "leftIcon", {}, function () {
    return [vue.createVNode(_component_t_icon_search)];
  })], 2), vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.name, "__label-text"))
  }, vue.toDisplayString(_ctx.placeholder), 3)], 6), [[vue.vShow, _ctx.state.labelActive]])], 6), vue.renderSlot(_ctx.$slots, "action", {}, function () {
    return [_ctx.action ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_t_button, {
      key: 0,
      variant: "text",
      class: vue.normalizeClass("".concat(_ctx.name, "__cancel-button")),
      onClick: _ctx.onCancel
    }, {
      default: vue.withCtx(function () {
        return [vue.createTextVNode(vue.toDisplayString(_ctx.action), 1)];
      }),
      _: 1
    }, 8, ["class", "onClick"])), [[vue.vShow, !_ctx.state.labelActive]]) : vue.createCommentVNode("", true)];
  })], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=search.js.map
