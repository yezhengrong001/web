import { InputValue } from '../input';
declare type InputBlurContext = {
    e: FocusEvent;
};
declare type InputFocusContent = {
    e: FocusEvent;
};
declare type InputChangeContext = {
    e?: MouseEvent | InputEvent | undefined;
} | undefined;
declare const _default: import("vue").DefineComponent<{
    action: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: string;
    };
    center: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    focus: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<"round" | "square" | undefined>;
        default: "round" | "square" | undefined;
        validator(val: "round" | "square" | undefined): boolean;
    };
    value: {
        type: StringConstructor;
    };
    modelValue: {
        type: StringConstructor;
    };
    defaultValue: {
        type: StringConstructor;
    };
    onActionClick: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onBlur: import("vue").PropType<((value: string, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onChange: import("vue").PropType<((value: string, context?: {
        e?: MouseEvent | InputEvent | undefined;
    } | undefined) => void) | undefined>;
    onClear: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onFocus: import("vue").PropType<((value: string, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onSubmit: import("vue").PropType<((value: string, context: {
        e: KeyboardEvent;
    }) => void) | undefined>;
}, {
    name: import("vue").Ref<string>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    shapeStyle: import("vue").ComputedRef<{
        borderRadius: string | undefined;
    }>;
    onClick: () => void;
    onCancel: (e: MouseEvent) => void;
    onBlur: (value: any, context: InputBlurContext) => void;
    onFocus: (value: InputValue, context: InputFocusContent) => void;
    onClear: (e: MouseEvent) => void;
    onChange: (value: InputValue, context: InputChangeContext) => void;
    state: {
        labelActive: boolean;
        inputVal: string;
    };
    value: import("vue").WritableComputedRef<unknown>;
    searchInput: import("vue").Ref<any>;
    label: import("vue").Ref<string>;
    modelValue: import("vue").Ref<string | undefined>;
    onSubmit: import("vue").Ref<((value: string, context: {
        e: KeyboardEvent;
    }) => void) | undefined>;
    center: import("vue").Ref<boolean>;
    shape: import("vue").Ref<"round" | "square" | undefined>;
    disabled: import("vue").Ref<boolean>;
    leftIcon: import("vue").Ref<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    defaultValue: import("vue").Ref<string | undefined>;
    focus: import("vue").Ref<boolean>;
    clearable: import("vue").Ref<boolean>;
    placeholder: import("vue").Ref<string>;
    action: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    onActionClick: import("vue").Ref<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    action: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: string;
    };
    center: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    focus: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<"round" | "square" | undefined>;
        default: "round" | "square" | undefined;
        validator(val: "round" | "square" | undefined): boolean;
    };
    value: {
        type: StringConstructor;
    };
    modelValue: {
        type: StringConstructor;
    };
    defaultValue: {
        type: StringConstructor;
    };
    onActionClick: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onBlur: import("vue").PropType<((value: string, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onChange: import("vue").PropType<((value: string, context?: {
        e?: MouseEvent | InputEvent | undefined;
    } | undefined) => void) | undefined>;
    onClear: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onFocus: import("vue").PropType<((value: string, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onSubmit: import("vue").PropType<((value: string, context: {
        e: KeyboardEvent;
    }) => void) | undefined>;
}>>, {
    label: string;
    center: boolean;
    shape: "round" | "square" | undefined;
    disabled: boolean;
    focus: boolean;
    clearable: boolean;
    placeholder: string;
    action: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined;
}>;
export default _default;
