/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var shared_constants = require('../shared/constants.js');
var config = require('../config.js');
var radio_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_functions = require('../shared/functions.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-radio");
var iconDefault = [vue.h(tdesignIconsVueNext.CheckIcon), ""];
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: _objectSpread(_objectSpread({}, radio_props["default"]), {}, {
    borderless: {
      type: Boolean,
      value: false
    }
  }),
  emits: ["update:checked", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var _toRefs = vue.toRefs(props),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(checked, modelValue, props.defaultChecked, props.onChange, "checked"),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var rootGroupProps = vue.inject("rootGroupProps", {});
    var rootGroupValue = vue.inject("rootGroupValue");
    var rootGroupChange = vue.inject("rootGroupChange", shared_functions.NOOP);
    var disabled = vue.computed(function () {
      return rootGroupProps.disabled !== void 0 ? rootGroupProps.disabled : props.disabled;
    });
    var radioChecked = vue.computed(function () {
      return rootGroupValue ? props.value === rootGroupValue.value : innerChecked.value;
    });
    var inputProps = vue.computed(function () {
      return {
        name: rootGroupProps.name || props.name,
        checked: radioChecked.value,
        disabled: disabled.value,
        value: props.value
      };
    });
    var internalInstance = vue.getCurrentInstance();
    var labelContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "label");
    });
    var radioContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "content");
    });
    var iconContent = vue.computed(function () {
      if (!props.icon) {
        return;
      }
      var iconIndex = radioChecked.value ? 0 : 1;
      var isIconArray = Array.isArray(props.icon);
      if (isIconArray) {
        return props.icon[iconIndex];
      }
      return iconDefault[iconIndex];
    });
    var radioClasses = vue.computed(function () {
      var _ref;
      return ["".concat(name), (_ref = {}, _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.checked, radioChecked.value), _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.disabled, disabled.value), _ref)];
    });
    var titleClasses = vue.computed(function () {
      var _ref2;
      return ["".concat(name, "__content-title"), (_ref2 = {}, _defineProperty__default["default"](_ref2, shared_constants["default"].STATUS.disabled, disabled.value), _defineProperty__default["default"](_ref2, "".concat(name, "__content-right-title"), props.align === "right"), _ref2)];
    });
    var iconClass = vue.computed(function () {
      var _ref3;
      return ["".concat(name, "__icon"), (_ref3 = {}, _defineProperty__default["default"](_ref3, "".concat(name, "__icon--checked"), radioChecked.value), _defineProperty__default["default"](_ref3, "".concat(name, "__icon--disabled"), disabled.value), _defineProperty__default["default"](_ref3, "".concat(name, "__icon--strock"), props.icon === "stroke-line"), _defineProperty__default["default"](_ref3, "".concat(name, "__icon--custom"), Array.isArray(props.icon)), _ref3)];
    });
    var radioContentChange = function radioContentChange(e) {
      if (props.contentDisabled) {
        return;
      }
      radioOrgChange(e);
    };
    var radioOrgChange = function radioOrgChange(e) {
      if (disabled.value) {
        return;
      }
      if (rootGroupChange !== shared_functions.NOOP && props.value !== void 0) {
        rootGroupChange(props.value, e);
      } else {
        setInnerChecked(!radioChecked.value, {
          e: e
        });
      }
    };
    return {
      name: name,
      iconClass: iconClass,
      radioContent: radioContent,
      labelContent: labelContent,
      iconContent: iconContent,
      radioContentChange: radioContentChange,
      radioOrgChange: radioOrgChange,
      radioClasses: radioClasses,
      titleClasses: titleClasses,
      inputProps: inputProps
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.radioClasses)
  }, [vue.createElementVNode("span", {
    class: vue.normalizeClass(["".concat(_ctx.name, "__content-wrap")])
  }, [_ctx.align === "left" ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__icon-wrap ").concat(_ctx.name, "__icon-left-wrap"))
  }, [vue.createElementVNode("input", vue.mergeProps({
    type: "radio",
    class: "".concat(_ctx.name, "__original-left")
  }, _ctx.inputProps, {
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.radioOrgChange && _ctx.radioOrgChange.apply(_ctx, arguments);
    })
  }), null, 16), vue.createElementVNode("div", {
    class: vue.normalizeClass(_ctx.iconClass)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2)], 2)) : vue.createCommentVNode("", true), _ctx.labelContent || _ctx.radioContent ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass(["".concat(_ctx.name, "__label-wrap")])
  }, [_ctx.labelContent ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass(_ctx.titleClasses),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.radioOrgChange && _ctx.radioOrgChange.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.labelContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), _ctx.radioContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__content-inner")),
    onClick: _cache[2] || (_cache[2] = function () {
      return _ctx.radioContentChange && _ctx.radioContentChange.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.radioContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2)) : vue.createCommentVNode("", true), _ctx.align === "right" ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 2,
    class: vue.normalizeClass("".concat(_ctx.name, "__icon-wrap ").concat(_ctx.name, "__icon-right-wrap"))
  }, [vue.createElementVNode("input", vue.mergeProps({
    type: "radio",
    class: "".concat(_ctx.name, "__original-right")
  }, _ctx.inputProps, {
    onClick: _cache[3] || (_cache[3] = function () {
      return _ctx.radioOrgChange && _ctx.radioOrgChange.apply(_ctx, arguments);
    })
  }), null, 16), vue.createElementVNode("div", {
    class: vue.normalizeClass(_ctx.iconClass)
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2)], 2)) : vue.createCommentVNode("", true)], 2), !_ctx.borderless ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__border ").concat(_ctx.name, "__border--").concat(_ctx.align))
  }, null, 2)) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=radio.js.map
