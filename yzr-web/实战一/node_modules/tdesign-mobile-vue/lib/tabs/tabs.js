/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var tabs_props = require('./props.js');
var tabs_tabNavItem = require('./tab-nav-item.js');
var shared_constants = require('../shared/constants.js');
var sticky_index = require('../sticky/index.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
require('./tab-panel-props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../sticky/sticky.js');
require('@vueuse/core');
require('../sticky/props.js');
require('../shared/useEmitEvent/index.js');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-tabs");
var script = vue.defineComponent({
  name: name,
  components: {
    TabNavItem: tabs_tabNavItem["default"],
    TSticky: sticky_index["default"]
  },
  props: tabs_props["default"],
  emits: ["update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var placement = vue.computed(function () {
      return props.placement;
    });
    var showBottomLine = vue.computed(function () {
      return props.showBottomLine;
    });
    var stickyProps = vue.computed(function () {
      return _objectSpread({
        disabled: true
      }, props.stickyProps);
    });
    var activeClass = shared_constants["default"].STATUS.active;
    var disabledClass = shared_constants["default"].STATUS.disabled;
    var classes = vue.computed(function () {
      return ["".concat(name), "".concat(prefix, "-is-").concat(placement.value), props.size ? shared_constants["default"].SIZE[props.size] : ""];
    });
    var navClasses = vue.ref(["".concat(name, "__nav")]);
    var isScroll = vue.ref(false);
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      currentValue = _useVModel2[0],
      setCurrentValue = _useVModel2[1];
    var itemProps = vue.computed(function () {
      if (props.list) {
        return props.list;
      }
      var children = context.slots.default ? context.slots.default() : [];
      var res = [];
      var _label = [];
      children.forEach(function (child) {
        var _child$children;
        if (child.type === vue.Fragment) {
          res.push.apply(res, _toConsumableArray__default["default"](child.children));
        } else {
          res.push(child);
        }
        if ((_child$children = child.children) !== null && _child$children !== void 0 && _child$children.label) {
          _label.push(child.children.label()[0] || null);
        }
      });
      children = res.filter(function (child) {
        return child.type.name === "".concat(prefix, "-tab-panel");
      });
      return children.map(function (item, index) {
        return _objectSpread(_objectSpread({}, item.props), {}, {
          label: function label() {
            return _label[index] || item.props.label;
          }
        });
      });
    });
    var navScroll = vue.ref(null);
    var navWrap = vue.ref(null);
    var navLine = vue.ref(null);
    var lineStyle = vue.ref("");
    var moveToActiveTab = function moveToActiveTab() {
      if (navWrap.value && navLine.value && showBottomLine.value) {
        var tab = navWrap.value.querySelector(".".concat(activeClass));
        if (!tab) return;
        var line = navLine.value;
        if (placement.value === "left") {
          lineStyle.value = "transform: translateY(".concat(tab.offsetTop, "px);").concat(props.animation ? "transition-duration:".concat(props.animation.duration, "ms") : "");
        } else {
          lineStyle.value = "transform: translateX(".concat(Number(tab.offsetLeft) + Number(tab.offsetWidth) / 2 - line.offsetWidth / 2, "px);").concat(props.animation ? "transition-duration:".concat(props.animation.duration, "ms") : "");
        }
      }
    };
    vue.onMounted(function () {
      var _navWrap$value, _navScroll$value;
      isScroll.value = (((_navWrap$value = navWrap.value) === null || _navWrap$value === void 0 ? void 0 : _navWrap$value.offsetWidth) || 0) > (((_navScroll$value = navScroll.value) === null || _navScroll$value === void 0 ? void 0 : _navScroll$value.offsetWidth) || 0);
      isScroll.value && navClasses.value.push("".concat(prefix, "-is-scrollable"));
      window.addEventListener("resize", moveToActiveTab, false);
      setTimeout(function () {
        moveToActiveTab();
      }, 300);
    });
    vue.onBeforeUnmount(function () {
      window.removeEventListener("resize", moveToActiveTab);
    });
    var tabClick = function tabClick(event, item) {
      var value2 = item.value,
        disabled = item.disabled;
      if (disabled || currentValue.value === value2) {
        return false;
      }
      setCurrentValue(value2);
      vue.nextTick(function () {
        moveToActiveTab();
      });
    };
    vue.provide("currentValue", vue.readonly(currentValue));
    return {
      name: name,
      prefix: prefix,
      classes: classes,
      navClasses: navClasses,
      activeClass: activeClass,
      disabledClass: disabledClass,
      currentValue: currentValue,
      tabClick: tabClick,
      showBottomLine: showBottomLine,
      itemProps: itemProps,
      navScroll: navScroll,
      navWrap: navWrap,
      navLine: navLine,
      lineStyle: lineStyle,
      moveToActiveTab: moveToActiveTab,
      stickyProps: stickyProps
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tab_nav_item = vue.resolveComponent("tab-nav-item");
  var _component_t_sticky = vue.resolveComponent("t-sticky");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.classes)
  }, [vue.createVNode(_component_t_sticky, vue.normalizeProps(vue.guardReactiveProps(_ctx.stickyProps)), {
    default: vue.withCtx(function () {
      return [vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.navClasses)
      }, [vue.createElementVNode("div", {
        ref: "navScroll",
        class: vue.normalizeClass("".concat(_ctx.name, "__nav-container"))
      }, [vue.createElementVNode("div", {
        ref: "navWrap",
        class: vue.normalizeClass("".concat(_ctx.name, "__nav-wrap"))
      }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.itemProps, function (item) {
        var _normalizeClass2;
        return vue.openBlock(), vue.createBlock(_component_tab_nav_item, {
          key: item.value,
          label: item.label,
          class: vue.normalizeClass((_normalizeClass2 = {}, _defineProperty__default["default"](_normalizeClass2, "".concat(_ctx.name, "__nav-item"), true), _defineProperty__default["default"](_normalizeClass2, _ctx.activeClass, item.value === _ctx.currentValue), _defineProperty__default["default"](_normalizeClass2, _ctx.disabledClass, item.disabled), _normalizeClass2)),
          onClick: function onClick(e) {
            return _ctx.tabClick(e, item);
          }
        }, null, 8, ["label", "class", "onClick"]);
      }), 128)), _ctx.showBottomLine ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        ref: "navLine",
        class: vue.normalizeClass("".concat(_ctx.name, "__nav-line")),
        style: vue.normalizeStyle(_ctx.lineStyle)
      }, null, 6)) : vue.createCommentVNode("", true)], 2)], 2)], 2)];
    }),
    _: 1
  }, 16), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__content"))
  }, [vue.renderSlot(_ctx.$slots, "default")], 2)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=tabs.js.map
