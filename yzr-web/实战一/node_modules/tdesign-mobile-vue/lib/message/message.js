/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var message_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-message");
var script = vue.defineComponent({
  name: name,
  components: {
    CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon,
    ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon,
    CloseIcon: tdesignIconsVueNext.CloseIcon,
    TNode: shared_renderTnode["default"]
  },
  props: message_props["default"],
  emits: ["visible-change", "open", "opened", "close", "closed"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var root = vue.ref(null);
    var internalInstance = vue.getCurrentInstance();
    var closeBtnContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "closeBtn");
    });
    var _toRefs = vue.toRefs(props),
      visible = _toRefs.visible,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(visible, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      currentVisible = _useVModel2[0],
      setVisible = _useVModel2[1];
    var rootClasses = vue.computed(function () {
      var _ref;
      return _ref = {}, _defineProperty__default["default"](_ref, name, true), _defineProperty__default["default"](_ref, "".concat(name, "--").concat(props.theme), true), _defineProperty__default["default"](_ref, "".concat(name, "-align--").concat(props.align), !!props.align), _ref;
    });
    var rootStyles = vue.computed(function () {
      return {
        zIndex: props.zIndex
      };
    });
    var onClose = function onClose() {
      emitEvent("close");
      setVisible(false);
    };
    vue.watch(function () {
      return currentVisible.value;
    }, function (val) {
      if (val === false) return;
      emitEvent("open");
      setVisible(true);
      if (props.duration > 0) {
        setTimeout(onClose, props.duration);
      }
    });
    return {
      name: vue.ref(name),
      root: root,
      currentVisible: currentVisible,
      rootClasses: rootClasses,
      rootStyles: rootStyles,
      closeBtnContent: closeBtnContent,
      onClose: onClose,
      afterEnter: function afterEnter() {
        return emitEvent("opened");
      },
      afterLeave: function afterLeave() {
        return emitEvent("closed");
      }
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_check_circle_filled_icon = vue.resolveComponent("check-circle-filled-icon");
  var _component_error_circle_filled_icon = vue.resolveComponent("error-circle-filled-icon");
  var _component_close_icon = vue.resolveComponent("close-icon");
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createBlock(vue.Transition, {
    name: "message",
    onAfterLeave: _ctx.afterLeave,
    onAfterEnter: _ctx.afterEnter
  }, {
    default: vue.withCtx(function () {
      return [_ctx.currentVisible ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        ref: "root",
        class: vue.normalizeClass(_ctx.rootClasses),
        style: vue.normalizeStyle(_ctx.rootStyles)
      }, [vue.renderSlot(_ctx.$slots, "default", {}, function () {
        return [vue.renderSlot(_ctx.$slots, "icon", {}, function () {
          return [_ctx.theme === "success" ? (vue.openBlock(), vue.createBlock(_component_check_circle_filled_icon, {
            key: 0
          })) : (vue.openBlock(), vue.createBlock(_component_error_circle_filled_icon, {
            key: 1
          }))];
        }), vue.createElementVNode("span", {
          class: vue.normalizeClass("".concat(_ctx.name, "--txt"))
        }, vue.toDisplayString(_ctx.content), 3), _ctx.closeBtn === true ? (vue.openBlock(), vue.createBlock(_component_close_icon, {
          key: 0,
          onClick: _ctx.onClose
        }, null, 8, ["onClick"])) : (vue.openBlock(), vue.createBlock(_component_t_node, {
          key: 1,
          content: _ctx.closeBtnContent
        }, null, 8, ["content"]))];
      })], 6)) : vue.createCommentVNode("", true)];
    }),
    _: 3
  }, 8, ["onAfterLeave", "onAfterEnter"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=message.js.map
