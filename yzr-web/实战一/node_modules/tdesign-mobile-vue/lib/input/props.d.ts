import { TdInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    align: {
        type: PropType<"left" | "center" | "right" | undefined>;
        default: "left" | "center" | "right" | undefined;
        validator(val: TdInputProps['align']): boolean;
    };
    autocomplete: BooleanConstructor;
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    errorMessage: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    prefixIcon: {
        type: PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    readonly: BooleanConstructor;
    required: BooleanConstructor;
    size: {
        type: PropType<"small" | "medium" | undefined>;
        default: "small" | "medium" | undefined;
        validator(val: TdInputProps['size']): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    suffixIcon: {
        type: PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    type: {
        type: PropType<"number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined>;
        default: "number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined;
        validator(val: TdInputProps['type']): boolean;
    };
    value: {
        type: PropType<import("./type").InputValue | undefined>;
    };
    modelValue: {
        type: PropType<import("./type").InputValue | undefined>;
    };
    defaultValue: {
        type: PropType<import("./type").InputValue | undefined>;
    };
    onBlur: PropType<((value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onChange: PropType<((value: import("./type").InputValue, context?: {
        e?: MouseEvent | InputEvent | undefined;
    } | undefined) => void) | undefined>;
    onClear: PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onFocus: PropType<((value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void) | undefined>;
};
export default _default;
