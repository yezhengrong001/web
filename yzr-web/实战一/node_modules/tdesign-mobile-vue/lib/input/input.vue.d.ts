import { InputValue } from './type';
declare const _default: import("vue").DefineComponent<{
    align: {
        type: import("vue").PropType<"left" | "center" | "right" | undefined>;
        default: "left" | "center" | "right" | undefined;
        validator(val: "left" | "center" | "right" | undefined): boolean;
    };
    autocomplete: BooleanConstructor;
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    errorMessage: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    prefixIcon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    readonly: BooleanConstructor;
    required: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | undefined>;
        default: "small" | "medium" | undefined;
        validator(val: "small" | "medium" | undefined): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    suffixIcon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined>;
        default: "number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined;
        validator(val: "number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<InputValue | undefined>;
    };
    modelValue: {
        type: import("vue").PropType<InputValue | undefined>;
    };
    defaultValue: {
        type: import("vue").PropType<InputValue | undefined>;
    };
    onBlur: import("vue").PropType<((value: InputValue, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onChange: import("vue").PropType<((value: InputValue, context?: {
        e?: MouseEvent | InputEvent | undefined;
    } | undefined) => void) | undefined>;
    onClear: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onFocus: import("vue").PropType<((value: InputValue, context: {
        e: FocusEvent;
    }) => void) | undefined>;
}, {
    styleLabel: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    styleWrapper: import("vue").ComputedRef<{
        [x: string]: boolean | "small" | "medium" | undefined;
    }>;
    styleControl: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    suffixContent: import("vue").ComputedRef<any>;
    suffixIconContent: import("vue").ComputedRef<any>;
    prefixIconContent: import("vue").ComputedRef<any>;
    labelContent: import("vue").ComputedRef<any>;
    innerValue: import("vue").WritableComputedRef<string>;
    inputRef: import("vue").Ref<any>;
    handleClear: (e: MouseEvent) => void;
    handleFocus: (e: FocusEvent) => void;
    handleBlur: (e: FocusEvent) => void;
    handleInput: (e: any) => void;
    handleCompositionend: (e: InputEvent | CompositionEvent) => void;
    readonly: import("vue").Ref<boolean>;
    label: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    type: import("vue").Ref<"number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined>;
    value: import("vue").Ref<InputValue | undefined>;
    modelValue: import("vue").Ref<InputValue | undefined>;
    name: import("vue").Ref<string>;
    required: import("vue").Ref<boolean>;
    size: import("vue").Ref<"small" | "medium" | undefined>;
    align: import("vue").Ref<"left" | "center" | "right" | undefined>;
    disabled: import("vue").Ref<boolean>;
    defaultValue: import("vue").Ref<InputValue | undefined>;
    prefixIcon: import("vue").Ref<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    suffix: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    suffixIcon: import("vue").Ref<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    autocomplete: import("vue").Ref<boolean>;
    autofocus: import("vue").Ref<boolean>;
    clearable: import("vue").Ref<boolean>;
    errorMessage: import("vue").Ref<string>;
    maxcharacter: import("vue").Ref<number | undefined>;
    maxlength: import("vue").Ref<number | undefined>;
    placeholder: import("vue").Ref<string | undefined>;
    componentName: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "update:value" | "change" | "clear" | "blur" | "focus" | "click-icon", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"left" | "center" | "right" | undefined>;
        default: "left" | "center" | "right" | undefined;
        validator(val: "left" | "center" | "right" | undefined): boolean;
    };
    autocomplete: BooleanConstructor;
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    errorMessage: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    prefixIcon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    readonly: BooleanConstructor;
    required: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | undefined>;
        default: "small" | "medium" | undefined;
        validator(val: "small" | "medium" | undefined): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    suffixIcon: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined>;
        default: "number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined;
        validator(val: "number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined): boolean;
    };
    value: {
        type: import("vue").PropType<InputValue | undefined>;
    };
    modelValue: {
        type: import("vue").PropType<InputValue | undefined>;
    };
    defaultValue: {
        type: import("vue").PropType<InputValue | undefined>;
    };
    onBlur: import("vue").PropType<((value: InputValue, context: {
        e: FocusEvent;
    }) => void) | undefined>;
    onChange: import("vue").PropType<((value: InputValue, context?: {
        e?: MouseEvent | InputEvent | undefined;
    } | undefined) => void) | undefined>;
    onClear: import("vue").PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onFocus: import("vue").PropType<((value: InputValue, context: {
        e: FocusEvent;
    }) => void) | undefined>;
}>>, {
    readonly: boolean;
    type: "number" | "search" | "text" | "hidden" | "submit" | "url" | "tel" | "password" | undefined;
    name: string;
    required: boolean;
    size: "small" | "medium" | undefined;
    align: "left" | "center" | "right" | undefined;
    disabled: boolean;
    autocomplete: boolean;
    autofocus: boolean;
    clearable: boolean;
    errorMessage: string;
    placeholder: string;
}>;
export default _default;
