/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var shared_constants = require('../shared/constants.js');
var button_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('lodash/camelCase');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-button");
var loadingContent = vue.h(tdesignIconsVueNext.LoadingIcon);
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: button_props["default"],
  emits: ["click"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var internalInstance = vue.getCurrentInstance();
    var buttonClass = vue.computed(function () {
      var _ref;
      return ["".concat(name), props.size ? shared_constants["default"].SIZE[props.size] : "", "".concat(name, "--").concat(props.variant), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--").concat(props.theme), props.theme), _defineProperty__default["default"](_ref, "".concat(name, "--shape-").concat(props.shape), props.shape), _defineProperty__default["default"](_ref, "".concat(name, "--ghost"), props.ghost), _defineProperty__default["default"](_ref, "".concat(prefix, "-is-block"), props.block), _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.disabled, props.disabled), _defineProperty__default["default"](_ref, shared_constants["default"].STATUS.loading, props.loading), _ref)];
    });
    var buttonContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var iconContent = vue.computed(function () {
      return props.loading ? loadingContent : shared_render.renderTNode(internalInstance, "icon");
    });
    var onClick = function onClick(e) {
      if (!props.loading && !props.disabled) {
        emitEvent("click", e);
      } else {
        e.stopPropagation();
      }
    };
    return _objectSpread(_objectSpread({
      name: name
    }, vue.toRefs(props)), {}, {
      buttonContent: buttonContent,
      iconContent: iconContent,
      buttonClass: buttonClass,
      onClick: onClick
    });
  }
});

var _hoisted_1 = ["disabled", "aria-disabled"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.openBlock(), vue.createElementBlock("button", {
    class: vue.normalizeClass(_ctx.buttonClass),
    disabled: _ctx.disabled,
    role: "button",
    "aria-disabled": _ctx.disabled,
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"]), vue.createElementVNode("span", {
    class: vue.normalizeClass("".concat(_ctx.name, "__text"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.buttonContent
  }, null, 8, ["content"])], 2)], 10, _hoisted_1);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=button.js.map
