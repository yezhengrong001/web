/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { SearchIcon, CloseCircleFilledIcon } from 'tdesign-icons-vue-next';
import { defineComponent, computed, ref, reactive, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, createVNode, withDirectives, toDisplayString, vShow, createBlock, withCtx, createTextVNode, createCommentVNode } from 'vue';
import config from '../config.js';
import _Button from '../button/index.js';
import _Input from '../input/index.js';
import '../shared/index.js';
import searchProps from './props.js';
import { useDefault } from '../shared/useDefault/index.js';
import { extendAPI } from '../shared/component.js';
import '../button/button.js';
import '../shared/constants.js';
import '../button/props.js';
import '../shared/render-tnode.js';
import '../shared/useEmitEvent/index.js';
import 'lodash/camelCase';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../button/style';
import '../button/type.js';
import '../input/input.js';
import '../cell/index.js';
import '../cell/cell.js';
import '../cell/props.js';
import '../cell/style';
import '../cell/type.js';
import '../input/props.js';
import '../input/style';
import '../input/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-search");
var script = defineComponent({
  name: name,
  components: {
    TIconSearch: SearchIcon,
    TIconClear: CloseCircleFilledIcon,
    TButton: _Button,
    TInput: _Input
  },
  props: searchProps,
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var classes = computed(function () {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(name), true), _defineProperty(_ref2, "".concat(prefix, "-is-focused"), !state.labelActive), _ref2;
    });
    var _useDefault = useDefault(props, emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      value = _useDefault2[0];
    var shapeStyle = computed(function () {
      return {
        borderRadius: props.shape === "square" ? void 0 : "50px"
      };
    });
    var searchInput = ref();
    var state = reactive({
      labelActive: !value.value,
      inputVal: ""
    });
    var doFocus = function doFocus() {
      var _searchInput$value;
      (_searchInput$value = searchInput.value) === null || _searchInput$value === void 0 ? void 0 : _searchInput$value.focus();
    };
    var onBlur = function onBlur(value2, context) {
      var _props$onBlur;
      state.labelActive = !value2;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value2, {
        e: context.e
      });
    };
    var onClick = function onClick() {
      state.labelActive = !state.labelActive;
      doFocus();
    };
    var onFocus = function onFocus(value2, context) {
      var _props$onFocus;
      state.labelActive = false;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value2, {
        e: context.e
      });
    };
    var onClear = function onClear(e) {
      var _props$onClear;
      searchInput.value.innerValue = "";
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, {
        e: e
      });
    };
    var onCancel = function onCancel(e) {
      var _props$onActionClick;
      state.labelActive = !state.labelActive;
      (_props$onActionClick = props.onActionClick) === null || _props$onActionClick === void 0 ? void 0 : _props$onActionClick.call(props, {
        e: e
      });
    };
    var onChange = function onChange(value2, context) {
      var _props$onChange;
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, value2, {
        e: context === null || context === void 0 ? void 0 : context.e
      });
    };
    extendAPI({
      doFocus: doFocus,
      blur: blur
    });
    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {
      name: ref(name),
      classes: classes,
      shapeStyle: shapeStyle,
      onClick: onClick,
      onCancel: onCancel,
      onBlur: onBlur,
      onFocus: onFocus,
      onClear: onClear,
      onChange: onChange,
      state: state,
      value: value,
      searchInput: searchInput
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_icon_search = resolveComponent("t-icon-search");
  var _component_t_input = resolveComponent("t-input");
  var _component_t_icon_clear = resolveComponent("t-icon-clear");
  var _component_t_button = resolveComponent("t-button");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__form")),
    style: normalizeStyle(_ctx.shapeStyle)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__box"))
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__icon-search"))
  }, [renderSlot(_ctx.$slots, "leftIcon", {}, function () {
    return [createVNode(_component_t_icon_search)];
  })], 2), createVNode(_component_t_input, {
    ref: "searchInput",
    modelValue: _ctx.value,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function ($event) {
      return _ctx.value = $event;
    }),
    type: "search",
    class: normalizeClass("".concat(_ctx.name, "__input")),
    autofocus: _ctx.focus,
    placeholder: _ctx.placeholder,
    onBlur: _ctx.onBlur,
    onFocus: _ctx.onFocus,
    onChange: _ctx.onChange
  }, null, 8, ["modelValue", "class", "autofocus", "placeholder", "onBlur", "onFocus", "onChange"]), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__icon-close"))
  }, [createVNode(_component_t_icon_clear, {
    onClick: _ctx.onClear
  }, null, 8, ["onClick"])], 2)], 2), withDirectives(createElementVNode("label", {
    class: normalizeClass("".concat(_ctx.name, "__label")),
    style: normalizeStyle(_ctx.shapeStyle),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__label-icon-search"))
  }, [renderSlot(_ctx.$slots, "leftIcon", {}, function () {
    return [createVNode(_component_t_icon_search)];
  })], 2), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__label-text"))
  }, toDisplayString(_ctx.placeholder), 3)], 6), [[vShow, _ctx.state.labelActive]])], 6), renderSlot(_ctx.$slots, "action", {}, function () {
    return [_ctx.action ? withDirectives((openBlock(), createBlock(_component_t_button, {
      key: 0,
      variant: "text",
      class: normalizeClass("".concat(_ctx.name, "__cancel-button")),
      onClick: _ctx.onCancel
    }, {
      default: withCtx(function () {
        return [createTextVNode(toDisplayString(_ctx.action), 1)];
      }),
      _: 1
    }, 8, ["class", "onClick"])), [[vShow, !_ctx.state.labelActive]]) : createCommentVNode("", true)];
  })], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=search.js.map
