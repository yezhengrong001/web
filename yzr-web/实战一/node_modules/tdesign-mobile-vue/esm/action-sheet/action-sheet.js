/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, computed, watch, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, renderSlot, createElementBlock, Fragment, createCommentVNode, toDisplayString } from 'vue';
import '../shared/index.js';
import script$1 from './menu-list.js';
import script$2 from './menu-grid.js';
import _Popup from '../popup/index.js';
import config from '../config.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../grid/index.js';
import '../grid/grid.js';
import '../grid/props.js';
import '../grid/grid-item.js';
import '../badge/index.js';
import '../badge/badge.js';
import '@babel/runtime/helpers/slicedToArray';
import '../badge/props.js';
import '../badge/style';
import '../badge/type.js';
import '../grid/grid-item-props.js';
import '../grid/style';
import '../grid/type.js';
import '../popup/popup.js';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../overlay/style';
import '../popup/style';
import '../popup/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-action-sheet");
var script = defineComponent({
  name: name,
  components: {
    TPopup: _Popup,
    MenuList: script$1,
    MenuGrid: script$2
  },
  props: {
    modelValue: Boolean,
    visible: {
      type: Boolean,
      default: false
    },
    items: {
      type: Array,
      required: true
    },
    type: {
      type: String,
      default: "list"
    },
    count: {
      type: Number,
      default: 8
    },
    showCancel: {
      type: Boolean,
      default: true
    },
    cancelText: {
      type: String,
      default: "\u53D6\u6D88"
    }
  },
  emits: ["selected", "update:modelValue", "cancel", "close"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var actionItems = ref([]);
    var currentVisible = computed(function () {
      return props.modelValue || props.visible;
    });
    var rootClasses = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name, "__panel"), true), _defineProperty(_ref, "".concat(name, "__panel-list"), props.type === "list"), _defineProperty(_ref, "".concat(name, "__panel-grid"), props.type === "grid"), _ref;
    });
    watch(function () {
      return props.items;
    }, function (val) {
      var items = JSON.parse(JSON.stringify(val));
      items = items.map(function (item) {
        if (typeof item === "string") {
          return {
            label: item
          };
        }
        return item;
      });
      actionItems.value = items;
    }, {
      immediate: true,
      deep: true
    });
    var handleCancel = function handleCancel() {
      emitEvent("cancel");
      context.emit("update:modelValue", false);
    };
    var handleSelected = function handleSelected(index) {
      emitEvent("selected", props.items[index], index);
    };
    var handleClose = function handleClose() {
      emitEvent("close");
      context.emit("update:modelValue", false);
    };
    return {
      name: ref(name),
      rootClasses: rootClasses,
      actionItems: actionItems,
      currentVisible: currentVisible,
      handleCancel: handleCancel,
      handleSelected: handleSelected,
      handleClose: handleClose
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_menu_list = resolveComponent("menu-list");
  var _component_menu_grid = resolveComponent("menu-grid");
  var _component_t_popup = resolveComponent("t-popup");
  return openBlock(), createBlock(_component_t_popup, {
    class: normalizeClass(_ctx.name),
    visible: _ctx.currentVisible,
    placement: "bottom",
    onClose: _ctx.handleClose
  }, {
    default: withCtx(function () {
      return [createElementVNode("div", {
        class: normalizeClass(_ctx.rootClasses)
      }, [_ctx.type === "list" ? (openBlock(), createBlock(_component_menu_list, {
        key: 0,
        items: _ctx.actionItems,
        onSelected: _ctx.handleSelected
      }, {
        cell: withCtx(function (slotProps) {
          return [renderSlot(_ctx.$slots, "cell", {
            item: slotProps.item
          })];
        }),
        _: 3
      }, 8, ["items", "onSelected"])) : (openBlock(), createBlock(_component_menu_grid, {
        key: 1,
        items: _ctx.actionItems,
        count: _ctx.count,
        onSelected: _ctx.handleSelected
      }, {
        cell: withCtx(function (slotProps) {
          return [renderSlot(_ctx.$slots, "cell", {
            item: slotProps.item
          })];
        }),
        _: 3
      }, 8, ["items", "count", "onSelected"])), _ctx.showCancel ? (openBlock(), createElementBlock(Fragment, {
        key: 2
      }, [_ctx.type === "list" ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass("".concat(_ctx.name, "__separation"))
      }, null, 2)) : createCommentVNode("", true), createElementVNode("button", {
        class: normalizeClass("".concat(_ctx.name, "__action")),
        onClick: _cache[0] || (_cache[0] = function () {
          return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);
        })
      }, toDisplayString(_ctx.cancelText), 3)], 64)) : createCommentVNode("", true)], 2)];
    }),
    _: 3
  }, 8, ["class", "visible", "onClose"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=action-sheet.js.map
