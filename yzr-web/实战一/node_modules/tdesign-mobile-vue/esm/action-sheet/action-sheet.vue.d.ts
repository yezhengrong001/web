import { PropType, ComputedRef } from 'vue';
import { ActionSheetItem } from './type';
declare const _default: import("vue").DefineComponent<{
    modelValue: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    items: {
        type: PropType<(string | ActionSheetItem)[]>;
        required: true;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    showCancel: {
        type: BooleanConstructor;
        default: boolean;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
}, {
    name: import("vue").Ref<string>;
    rootClasses: ComputedRef<{
        [x: string]: boolean;
    }>;
    actionItems: import("vue").Ref<never[]>;
    currentVisible: ComputedRef<boolean>;
    handleCancel: () => void;
    handleSelected: (index: number) => void;
    handleClose: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "selected" | "close" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    items: {
        type: PropType<(string | ActionSheetItem)[]>;
        required: true;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    showCancel: {
        type: BooleanConstructor;
        default: boolean;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    type: string;
    modelValue: boolean;
    count: number;
    visible: boolean;
    showCancel: boolean;
    cancelText: string;
}>;
export default _default;
