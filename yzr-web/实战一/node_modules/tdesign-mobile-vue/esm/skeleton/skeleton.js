/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import { defineComponent, toRefs, computed, getCurrentInstance, ref, watchEffect, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, Fragment, renderList, normalizeStyle, createCommentVNode } from 'vue';
import '../shared/index.js';
import config from '../config.js';
import SkeletonProps from './props.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderContent } from '../shared/render.js';
import { isNumber } from '../shared/util.js';
import '../shared/functions.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-skeleton");
var ThemeMap = {
  avatar: [{
    type: "circle",
    height: "64px",
    width: "64px"
  }],
  image: [{
    type: "rect",
    height: "64px",
    width: "64px"
  }],
  text: [1, [{
    width: "24%",
    height: "16px",
    marginRight: "16px"
  }, {
    width: "76%",
    height: "16px"
  }]],
  paragraph: [1, 1, 1, {
    width: "55%"
  }]
};
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: SkeletonProps,
  setup: function setup(props) {
    var _toRefs = toRefs(props),
      loading = _toRefs.loading,
      animation = _toRefs.animation;
    var showContent = computed(function () {
      return !loading.value;
    });
    var internalInstance = getCurrentInstance();
    var skeletonContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var baseClass = name;
    var rootClasses = computed(function () {
      return ["".concat(name)];
    });
    var rowCols = ref([]);
    watchEffect(function () {
      var _props$rowCol;
      if ((_props$rowCol = props.rowCol) !== null && _props$rowCol !== void 0 && _props$rowCol.length) {
        rowCols.value = _toConsumableArray(props.rowCol);
      } else {
        rowCols.value = _toConsumableArray(ThemeMap[props.theme || "text"]);
      }
    });
    var getColItemClass = function getColItemClass(obj) {
      return ["".concat(name, "__col"), "".concat(name, "--type-").concat(obj.type || "text"), _defineProperty({}, "".concat(name, "--animation-").concat(animation.value), animation.value)];
    };
    var getColItemStyle = function getColItemStyle(obj) {
      var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor", "borderRadius"];
      var style = {};
      styleName.forEach(function (name2) {
        if (name2 in obj) {
          var px = isNumber(obj[name2]) ? "".concat(obj[name2], "px") : obj[name2];
          if (name2 === "size") {
            var _ref2 = [px, px];
            style.width = _ref2[0];
            style.height = _ref2[1];
          } else {
            style[name2] = px;
          }
        }
      });
      return style;
    };
    var parsedRowcols = computed(function () {
      return rowCols.value.map(function (item) {
        if (isNumber(item)) {
          return [{
            class: getColItemClass({
              type: "text"
            }),
            style: {}
          }];
        }
        if (Array.isArray(item)) {
          return item.map(function (col) {
            return _objectSpread(_objectSpread({}, col), {}, {
              class: getColItemClass(col),
              style: getColItemStyle(col)
            });
          });
        }
        var nItem = item;
        return [_objectSpread(_objectSpread({}, nItem), {}, {
          class: getColItemClass(nItem),
          style: getColItemStyle(nItem)
        })];
      });
    });
    return {
      baseClass: baseClass,
      rootClasses: rootClasses,
      parsedRowcols: parsedRowcols,
      showContent: showContent,
      skeletonContent: skeletonContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.rootClasses)
  }, [_ctx.showContent ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.skeletonContent
  }, null, 8, ["content"])) : (openBlock(), createElementBlock(Fragment, {
    key: 1
  }, [_ctx.parsedRowcols.length ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.baseClass, "__content"))
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.parsedRowcols, function (row, index) {
    return openBlock(), createElementBlock("div", {
      key: "row-".concat(index),
      class: normalizeClass("".concat(_ctx.baseClass, "__row"))
    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, function (col, idx) {
      return openBlock(), createElementBlock("div", {
        key: "col-".concat(idx),
        class: normalizeClass(col.class),
        style: normalizeStyle(col.style)
      }, null, 6);
    }), 128))], 2);
  }), 128))], 2)) : createCommentVNode("", true)], 64))], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=skeleton.js.map
