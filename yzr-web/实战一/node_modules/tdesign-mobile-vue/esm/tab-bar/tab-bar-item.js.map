{"version":3,"file":"tab-bar-item.js","sources":["../../src/tab-bar/tab-bar-item.vue","../../src/tab-bar/tab-bar-item.vue?vue&type=template&id=79ef2260&lang.js"],"sourcesContent":["<template>\n  <div\n    role=\"tab\"\n    aria-label=\"TabBar\"\n    :aria-selected=\"isChecked\"\n    :aria-haspopup=\"subTabBar && subTabBar.length > 0\"\n    :class=\"[componentName, iconContent && `${prefix}-no-border`]\"\n  >\n    <div\n      :class=\"{\n        [`${componentName}__content`]: true,\n        [`${prefix}-is-checked`]: isChecked,\n        [`${componentName}--onlytext`]: !iconContent,\n      }\"\n      @click=\"toggle\"\n    >\n      <div v-if=\"iconContent\" :class=\"`${componentName}__icon`\">\n        <t-badge\n          v-if=\"badgeProps && (badgeProps.dot || badgeProps.count)\"\n          :count=\"badgeProps.count\"\n          :max-count=\"badgeProps.maxCount || 99\"\n          :dot=\"badgeProps.dot\"\n          :content=\"badgeProps.content\"\n          :size=\"badgeProps.size\"\n          :offset=\"badgeProps.offset || [0, 5]\"\n        >\n          <t-node :content=\"iconContent\"></t-node>\n        </t-badge>\n        <t-node v-else :content=\"iconContent\"></t-node>\n      </div>\n      <div v-if=\"itemContent\" :class=\"`${componentName}__text`\">\n        <div v-if=\"subTabBar && subTabBar.length > 0\" :class=\"`${componentName}__icon-menu`\"></div>\n        <t-node :content=\"itemContent\"></t-node>\n      </div>\n    </div>\n    <transition name=\"spread\">\n      <ul v-if=\"subTabBar && subTabBar.length > 0 && isSpread\" role=\"menu\" :class=\"`${componentName}__spread`\">\n        <li\n          v-for=\"(child, index) in subTabBar\"\n          :key=\"child.value || index\"\n          role=\"menuitem\"\n          :aria-label=\"child.label\"\n          :class=\"`${componentName}__spread-item`\"\n          @click=\"selectChild(child.value || index)\"\n        >\n          {{ child.label }}\n        </li>\n      </ul>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, computed, ref, watch, Ref, getCurrentInstance, toRefs } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport { initName } from './useTabBar';\nimport TabBarItemProps from './tab-bar-item-props';\nimport { renderContent, renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-tab-bar-item`;\n\nexport default defineComponent({\n  name: componentName,\n  components: { TNode, TBadge },\n  props: TabBarItemProps,\n  setup(props) {\n    const { defaultIndex, activeValue, updateChild } = inject<any>('tab-bar');\n    const currentName = initName(defaultIndex);\n    const hasSubTabBar = !!props.subTabBar;\n    const isSpread: Ref<boolean> = ref(false);\n\n    const isChecked = computed(() => {\n      if (hasSubTabBar && Array.isArray(activeValue.value)) {\n        return activeValue.value.includes(currentName);\n      }\n      return currentName === activeValue.value;\n    });\n\n    watch(isChecked, (newValue) => {\n      if (!newValue) {\n        isSpread.value = false;\n      }\n    });\n\n    const isToggleCurrent = computed(() => Array.isArray(activeValue.value) && activeValue.value[0] === currentName);\n\n    const toggle = () => {\n      if (hasSubTabBar) {\n        isSpread.value = !isSpread.value;\n        if (!isToggleCurrent.value) {\n          updateChild([currentName]);\n          return;\n        }\n      }\n      updateChild(currentName);\n    };\n\n    const selectChild = (childName: number | string) => {\n      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {\n        updateChild([currentName, childName]);\n      }\n      isSpread.value = false;\n    };\n    const internalInstance = getCurrentInstance();\n    const itemContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      ...toRefs(props),\n      prefix,\n      componentName,\n      isChecked,\n      toggle,\n      isSpread,\n      selectChild,\n      itemContent,\n      iconContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div\n    role=\"tab\"\n    aria-label=\"TabBar\"\n    :aria-selected=\"isChecked\"\n    :aria-haspopup=\"subTabBar && subTabBar.length > 0\"\n    :class=\"[componentName, iconContent && `${prefix}-no-border`]\"\n  >\n    <div\n      :class=\"{\n        [`${componentName}__content`]: true,\n        [`${prefix}-is-checked`]: isChecked,\n        [`${componentName}--onlytext`]: !iconContent,\n      }\"\n      @click=\"toggle\"\n    >\n      <div v-if=\"iconContent\" :class=\"`${componentName}__icon`\">\n        <t-badge\n          v-if=\"badgeProps && (badgeProps.dot || badgeProps.count)\"\n          :count=\"badgeProps.count\"\n          :max-count=\"badgeProps.maxCount || 99\"\n          :dot=\"badgeProps.dot\"\n          :content=\"badgeProps.content\"\n          :size=\"badgeProps.size\"\n          :offset=\"badgeProps.offset || [0, 5]\"\n        >\n          <t-node :content=\"iconContent\"></t-node>\n        </t-badge>\n        <t-node v-else :content=\"iconContent\"></t-node>\n      </div>\n      <div v-if=\"itemContent\" :class=\"`${componentName}__text`\">\n        <div v-if=\"subTabBar && subTabBar.length > 0\" :class=\"`${componentName}__icon-menu`\"></div>\n        <t-node :content=\"itemContent\"></t-node>\n      </div>\n    </div>\n    <transition name=\"spread\">\n      <ul v-if=\"subTabBar && subTabBar.length > 0 && isSpread\" role=\"menu\" :class=\"`${componentName}__spread`\">\n        <li\n          v-for=\"(child, index) in subTabBar\"\n          :key=\"child.value || index\"\n          role=\"menuitem\"\n          :aria-label=\"child.label\"\n          :class=\"`${componentName}__spread-item`\"\n          @click=\"selectChild(child.value || index)\"\n        >\n          {{ child.label }}\n        </li>\n      </ul>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, computed, ref, watch, Ref, getCurrentInstance, toRefs } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport { initName } from './useTabBar';\nimport TabBarItemProps from './tab-bar-item-props';\nimport { renderContent, renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-tab-bar-item`;\n\nexport default defineComponent({\n  name: componentName,\n  components: { TNode, TBadge },\n  props: TabBarItemProps,\n  setup(props) {\n    const { defaultIndex, activeValue, updateChild } = inject<any>('tab-bar');\n    const currentName = initName(defaultIndex);\n    const hasSubTabBar = !!props.subTabBar;\n    const isSpread: Ref<boolean> = ref(false);\n\n    const isChecked = computed(() => {\n      if (hasSubTabBar && Array.isArray(activeValue.value)) {\n        return activeValue.value.includes(currentName);\n      }\n      return currentName === activeValue.value;\n    });\n\n    watch(isChecked, (newValue) => {\n      if (!newValue) {\n        isSpread.value = false;\n      }\n    });\n\n    const isToggleCurrent = computed(() => Array.isArray(activeValue.value) && activeValue.value[0] === currentName);\n\n    const toggle = () => {\n      if (hasSubTabBar) {\n        isSpread.value = !isSpread.value;\n        if (!isToggleCurrent.value) {\n          updateChild([currentName]);\n          return;\n        }\n      }\n      updateChild(currentName);\n    };\n\n    const selectChild = (childName: number | string) => {\n      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {\n        updateChild([currentName, childName]);\n      }\n      isSpread.value = false;\n    };\n    const internalInstance = getCurrentInstance();\n    const itemContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      ...toRefs(props),\n      prefix,\n      componentName,\n      isChecked,\n      toggle,\n      isSpread,\n      selectChild,\n      itemContent,\n      iconContent,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","componentName","defineComponent","name","components","TNode","TBadge","props","TabBarItemProps","setup","inject","defaultIndex","activeValue","updateChild","currentName","initName","hasSubTabBar","subTabBar","isSpread","ref","isChecked","computed","Array","isArray","value","includes","watch","newValue","isToggleCurrent","toggle","selectChild","childName","internalInstance","getCurrentInstance","itemContent","renderContent","iconContent","renderTNode","toRefs","_createElementBlock","role","_ctx","length","class","_normalizeClass","_createElementVNode","onClick","badgeProps","dot","count","_createBlock","_component_t_badge","maxCount","content","size","offset","_createVNode","_component_t_node","_Transition","_openBlock","_Fragment","_renderList","child","index","key","label","$event","_toDisplayString","_hoisted_2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,IAAQA,SAAWC,MAAA,CAAXD;AACR,IAAME,gBAAmBF,EAAAA,CAAAA,MAAAA,CAAAA,MAAA,EAAA,eAAA,CAAA,CAAA;AAEzB,aAAeG,eAAgB,CAAA;AAC7BC,EAAAA,IAAM,EAAAF,aAAA;AACNG,EAAAA,UAAA,EAAY;AAAEC,IAAAA,KAAA,EAAAA,cAAA;AAAOC,IAAAA,MAAO,EAAPA,MAAAA;GAAO;AAC5BC,EAAAA,KAAO,EAAAC,eAAA;EACPC,sBAAMF,KAAO,EAAA;IACX,IAAmDG,OAAAA,GAAAA,OAAY,SAAS,CAAA;AAAhEC,MAAAA,YAAc,WAAdA,YAAc;AAAAC,MAAAA,WAAA,WAAAA,WAAA;AAAaC,MAAAA,WAAY,WAAZA,WAAY,CAAA;AACzC,IAAA,IAAAC,WAAA,GAAcC,SAASJ,YAAY,CAAA,CAAA;AACnC,IAAA,IAAAK,YAAA,GAAe,CAAC,CAACT,KAAM,CAAAU,SAAA,CAAA;AACvB,IAAA,IAAAC,QAAA,GAAyBC,IAAI,KAAK,CAAA,CAAA;AAElC,IAAA,IAAAC,SAAA,GAAYC,SAAS,YAAM;MAC/B,IAAIL,YAAgB,IAAAM,KAAA,CAAMC,OAAQ,CAAAX,WAAA,CAAYY,KAAK,CAAG,EAAA;AAC7C,QAAA,OAAAZ,WAAA,CAAYY,KAAM,CAAAC,QAAA,CAASX,WAAW,CAAA,CAAA;AAC/C,OAAA;AACA,MAAA,OAAOA,gBAAgBF,WAAY,CAAAY,KAAA,CAAA;AACrC,KAAC,CAAA,CAAA;AAEKE,IAAAA,KAAA,CAAAN,SAAA,EAAW,UAACO,QAAa,EAAA;MAC7B,IAAI,CAACA,QAAU,EAAA;QACbT,QAAA,CAASM,KAAQ,GAAA,KAAA,CAAA;AACnB,OAAA;AACF,KAAC,CAAA,CAAA;IAEK,IAAAI,eAAA,GAAkBP,QAAS,CAAA,YAAA;AAAA,MAAA,OAAMC,KAAM,CAAAC,OAAA,CAAQX,WAAY,CAAAY,KAAK,CAAK,IAAAZ,WAAA,CAAYY,KAAM,CAAA,CAAA,CAAA,KAAOV,WAAW,CAAA;KAAA,CAAA,CAAA;AAE/G,IAAA,IAAMe,SAAS,SAATA,SAAe;AACnB,MAAA,IAAIb,YAAc,EAAA;AACPE,QAAAA,QAAA,CAAAM,KAAA,GAAQ,CAACN,QAAS,CAAAM,KAAA,CAAA;AACvB,QAAA,IAAA,CAACI,gBAAgBJ,KAAO,EAAA;AACdX,UAAAA,WAAA,CAAA,CAACC,WAAW,CAAC,CAAA,CAAA;AACzB,UAAA,OAAA;AACF,SAAA;AACF,OAAA;MACAD,WAAA,CAAYC,WAAW,CAAA,CAAA;KACzB,CAAA;AAEM,IAAA,IAAAgB,WAAA,GAAc,SAAdA,WAAA,CAAeC,SAA+B,EAAA;AAC9C,MAAA,IAAA,EAAET,MAAMC,OAAQ,CAAAX,WAAA,CAAYY,KAAK,CAAK,IAAAZ,WAAA,CAAYY,KAAM,CAAA,CAAA,CAAA,KAAOO,SAAY,CAAA,EAAA;AACjElB,QAAAA,WAAA,CAAA,CAACC,WAAa,EAAAiB,SAAS,CAAC,CAAA,CAAA;AACtC,OAAA;MACAb,QAAA,CAASM,KAAQ,GAAA,KAAA,CAAA;KACnB,CAAA;IACA,IAAMQ,mBAAmBC,kBAAmB,EAAA,CAAA;IAC5C,IAAMC,cAAcb,QAAS,CAAA,YAAA;AAAA,MAAA,OAAMc,cAAcH,gBAAkB,EAAA,SAAA,EAAW,SAAS,CAAC,CAAA;KAAA,CAAA,CAAA;IACxF,IAAMI,cAAcf,QAAS,CAAA,YAAA;AAAA,MAAA,OAAMgB,WAAY,CAAAL,gBAAA,EAAkB,MAAM,CAAC,CAAA;KAAA,CAAA,CAAA;IAEjE,OACFM,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,OAAO/B,KAAK,CAAA,CAAA,EAAA,EAAA,EAAA;AACfR,MAAAA,MAAA,EAAAA,MAAA;AACAE,MAAAA,aAAA,EAAAA,aAAA;AACAmB,MAAAA,SAAA,EAAAA,SAAA;AACAS,MAAAA,MAAA,EAAAA,MAAA;AACAX,MAAAA,QAAA,EAAAA,QAAA;AACAY,MAAAA,WAAA,EAAAA,WAAA;AACAI,MAAAA,WAAA,EAAAA,WAAA;AACAE,MAAAA,WAAA,EAAAA,WAAAA;AAAA,KAAA,CAAA,CAAA;AAEJ,GAAA;AACF,CAAC,CAAA;;;;;;;;oBCxHC,EAAAG,kBAAA,CAgDK,KAAA,EAAA;AA/CHC,IAAAA,IAAK,EAAA,KAAA;AACL,IAAA,YAAW,EAAA,QAAA;IACV,iBAAeC,IAAS,CAAArB,SAAA;IACxB,eAAe,EAAAqB,IAAA,CAAAxB,SAAa,IAAAwB,IAAA,CAAAxB,UAAUyB,MAAK,GAAA,CAAA;AAC3CC,IAAAA,KAAA,EAAQC,cAAA,CAAA,CAAAH,IAAA,CAAAxC,aAAA,EAAewC,KAAAL,eAAkBK,EAAAA,CAAAA,MAAAA,CAAAA,IAAM,CAAA1C,MAAA,eAAA,CAAA,CAAA;MAEhD8C,mBA0BK,KAAA,EAAA;IAzBFF,OAAKC,cAAA,EAAA,gBAAA,GAAA,EAAA,EAAA,eAAA,CAAA,gBAAA,EAAA,EAAA,CAAA,MAAA,CAAEH,IAAA,CAAAxC,aAAA,EAAA,WAAA,CAAA,EAAA,IAAA,CAAAwC,EAAAA,eAAAA,CAAAA,gBAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,IAAA,CAAA1C,MAAA,kBAAA0C,IAAA,CAAArB,SAAA,CAAA,EAAA,eAAA,CAAA,gBAAA,EAAA,EAAA,CAAA,MAAA,CAAAqB,IAAA,CAAAxC,aAAA,EAAA,YAAA,CAAA,GAAAwC,IAAA,CAAAL,WAAA;IAKPU;aAAOL,IAAA,CAAMZ,MAAA,IAAAY,IAAA,CAAAZ,MAAA,CAAAY,KAAAA,CAAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;MAEHA,IAAW,CAAAL,WAAA,iBAAtBG,mBAaK,KAAA,EAAA;;AAboBI,IAAAA,sBAAUF,EAAAA,CAAAA,MAAAA,CAAAA,IAAA,CAAaxC,aAAA,EAAA,QAAA,CAAA,CAAA;MAEtCwC,IAAA,CAAAM,UAAe,KAAAN,IAAA,CAAUM,UAAC,CAAAC,GAAA,IAAOP,IAAA,CAAAM,UAAA,CAAWE,qBADpD,EAAAC,WAAA,CAUSC,kBAAA,EAAA;;AARNF,IAAAA,KAAA,EAAOR,KAAUM,UAAC,CAAAE,KAAA;AAClB,IAAA,WAAA,EAAWR,IAAU,CAAAM,UAAA,CAACK,QAAO,IAAA,EAAA;AAC7BJ,IAAAA,GAAA,EAAKP,KAAUM,UAAC,CAAAC,GAAA;AAChBK,IAAAA,OAAA,EAASZ,KAAUM,UAAC,CAAAM,OAAA;AACpBC,IAAAA,IAAA,EAAMb,KAAUM,UAAC,CAAAO,IAAA;IACjBC,QAAQd,IAAU,CAAAM,UAAA,CAACQ,MAAO,IAAA,CAAA,GAAA,CAAA,CAAA;;qBAE3B,YAAA;AAAA,MAAA,OAAuC,CAAvCC,WAAA,CAAuCC,iBAAA,EAAA;QAA9BJ,OAAS,EAAAZ,IAAA,CAAWL,WAAAA;OAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAA;;;qFAE/Bc,YAA8CO,iBAAA,EAAA;;IAA9BJ,SAASZ,IAAW,CAAAL,WAAAA;kEAE3BK,IAAW,CAAAP,WAAA,iBAAtBK,mBAGK,KAAA,EAAA;;AAHoBI,IAAAA,sBAAUF,EAAAA,CAAAA,MAAAA,CAAAA,IAAA,CAAaxC,aAAA,EAAA,QAAA,CAAA,CAAA;MACnCwC,IAAA,CAAUxB,aAAGwB,IAAS,CAAAxB,SAAA,CAACyB,yBAAlC,EAAAH,kBAAA,CAA0F,KAAA,EAAA;;AAA3CI,IAAAA,sBAAUF,EAAAA,CAAAA,MAAAA,CAAAA,IAAA,CAAaxC,aAAA,EAAA,aAAA,CAAA,CAAA;+CACtEuD,WAAA,CAAuCC,iBAAA,EAAA;IAA9BJ,OAAS,EAAAZ,IAAA,CAAWP,WAAAA;AAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAA,4CAGjCsB,WAaY,CAAAE,UAAA,EAAA;AAbAvD,IAAAA,IAAA,EAAK,QAAA;AAAQ,GAAA,EAAA;qBACvB,YAAA;MAAA,OAWI,CAXMsC,IAAA,CAAAxB,SAAa,IAAAwB,IAAA,CAAAxB,SAAU,CAAAyB,MAAA,IAAc,IAAAD,IAAA,CAAQvB,uBAAvD,EAAAqB,kBAAA,CAWI,IAAA,EAAA;;AAXqDC,QAAAA,IAAK,EAAA,MAAA;AAAQG,QAAAA,sBAAUF,EAAAA,CAAAA,MAAAA,CAAAA,IAAA,CAAaxC,aAAA,EAAA,UAAA,CAAA,CAAA;WAC3F0D,SAAA,CAAA,IAAA,CAAA,EAAApB,kBASI,CAAAqB,QAAA,EARuB,IAAA,EAAAC,UAAA,CAAApB,IAAA,CAAAxB,SAAA,EAAjB,UAAA6C,KAAA,EAAOC,KAAK,EAAA;0BADtB,EAAAxB,kBAAA,CASI,IAAA,EAAA;AAPDyB,UAAAA,GAAA,EAAKF,MAAMtC,KAAS,IAAAuC,KAAA;AACrBvB,UAAAA,IAAK,EAAA,UAAA;UACJ,cAAYsB,KAAM,CAAAG,KAAA;AAClBtB,UAAAA,gCAAUF,IAAA,CAAaxC,aAAA,EAAA,eAAA,CAAA,CAAA;UACvB6C,0BAAOoB,MAAA,EAAA;YAAA,OAAAzB,IAAA,CAAWX,WAAC,CAAAgC,KAAA,CAAMtC,SAASuC,KAAK,CAAA,CAAA;AAAA,WAAA;WAErCI,eAAA,CAAAL,KAAA,CAAMG,KAAI,CAAA,EAAA,IAAAG,UAAA,CAAA,CAAA;;;;;;;;;;;"}