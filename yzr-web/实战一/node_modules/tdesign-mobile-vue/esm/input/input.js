/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';
import { defineComponent, ref, toRefs, getCurrentInstance, computed, nextTick, watch, resolveComponent, openBlock, createBlock, normalizeClass, createSlots, withCtx, createElementVNode, createElementBlock, createVNode, createCommentVNode, toDisplayString } from 'vue';
import { useFocus } from '@vueuse/core';
import _Cell from '../cell/index.js';
import config from '../config.js';
import InputProps from './props.js';
import ClASSNAMES from '../shared/constants.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useDefault } from '../shared/useDefault/index.js';
import { renderTNode } from '../shared/render.js';
import { getCharacterLength } from '../shared/util.js';
import { extendAPI } from '../shared/component.js';
import '../cell/cell.js';
import '../cell/props.js';
import '../shared/functions.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '../cell/style';
import '../cell/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var componentName = "".concat(prefix, "-input");
var script = defineComponent({
  name: componentName,
  components: {
    TNode: TNodeComponent,
    TCell: _Cell,
    CloseCircleFilledIcon: CloseCircleFilledIcon
  },
  props: InputProps,
  emits: ["update:value", "update:modelValue", "click-icon", "focus", "blur", "change", "clear"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var inputRef = ref();
    var _toRefs = toRefs(props),
      autofocus = _toRefs.autofocus;
    var internalInstance = getCurrentInstance();
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      innerValue = _useDefault2[0];
    var styleLabel = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(componentName, "--label"), true), _defineProperty(_ref, ClASSNAMES.STATUS.disabled, props.disabled), _ref;
    });
    var _useFocus = useFocus(inputRef, {
        initialValue: props.autofocus
      }),
      focused = _useFocus.focused;
    var labelContent = computed(function () {
      return renderTNode(internalInstance, "label");
    });
    var suffixIconContent = computed(function () {
      return renderTNode(internalInstance, "suffixIcon");
    });
    var prefixIconContent = computed(function () {
      return renderTNode(internalInstance, "prefixIcon");
    });
    var suffixContent = computed(function () {
      return renderTNode(internalInstance, "suffix");
    });
    var styleControl = computed(function () {
      return ["".concat(componentName, "__control"), _defineProperty({}, "".concat(componentName, "__control--").concat(props.align), props.align !== "left")];
    });
    var styleWrapper = computed(function () {
      var _ref3;
      return _ref3 = {}, _defineProperty(_ref3, componentName, true), _defineProperty(_ref3, "".concat(componentName, "--size-").concat(props.size), props.size), _defineProperty(_ref3, "".concat(componentName, "__error"), !!props.errorMessage), _ref3;
    });
    var setInputValue = function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var input = inputRef.value;
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        input.value = sV;
      }
    };
    var handleInput = function handleInput(e) {
      var checkInputType = e.inputType && e.inputType === "insertCompositionText";
      if (e.isComposing || checkInputType) return;
      inputValueChangeHandle(e);
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var value = e.target.value;
      var maxcharacter = props.maxcharacter;
      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {
        var _getCharacterLength = getCharacterLength(value, maxcharacter),
          _getCharacterLength$l = _getCharacterLength.length,
          length = _getCharacterLength$l === void 0 ? 0 : _getCharacterLength$l,
          _getCharacterLength$c = _getCharacterLength.characters,
          characters = _getCharacterLength$c === void 0 ? "" : _getCharacterLength$c;
        innerValue.value = characters;
      } else {
        innerValue.value = value;
      }
      nextTick(function () {
        return setInputValue(innerValue.value);
      });
    };
    var focus = function focus() {
      focused.value = true;
    };
    var blur = function blur() {
      focused.value = false;
    };
    extendAPI({
      focus: focus,
      blur: blur
    });
    var handleClear = function handleClear(e) {
      innerValue.value = "";
      focused.value = true;
      emitEvent("clear", {
        e: e
      });
    };
    var handleFocus = function handleFocus(e) {
      emitEvent("focus", innerValue.value, {
        e: e
      });
    };
    var handleBlur = function handleBlur(e) {
      emitEvent("blur", innerValue.value, {
        e: e
      });
    };
    var handleCompositionend = function handleCompositionend(e) {
      inputValueChangeHandle(e);
    };
    watch(autofocus, function (autofocus2, prevAutofocus) {
      if (autofocus2 === true) {
        nextTick(function () {
          focused.value = true;
        });
      }
    });
    return _objectSpread(_objectSpread({
      componentName: componentName
    }, toRefs(props)), {}, {
      styleLabel: styleLabel,
      styleWrapper: styleWrapper,
      styleControl: styleControl,
      suffixContent: suffixContent,
      suffixIconContent: suffixIconContent,
      prefixIconContent: prefixIconContent,
      labelContent: labelContent,
      innerValue: innerValue,
      inputRef: inputRef,
      handleClear: handleClear,
      handleFocus: handleFocus,
      handleBlur: handleBlur,
      handleInput: handleInput,
      handleCompositionend: handleCompositionend
    });
  }
});

var _hoisted_1 = ["value", "name", "type", "disabled", "autocomplete", "placeholder", "readonly", "maxlength"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_close_circle_filled_icon = resolveComponent("close-circle-filled-icon");
  var _component_t_cell = resolveComponent("t-cell");
  return openBlock(), createBlock(_component_t_cell, {
    required: _ctx.required,
    class: normalizeClass(_ctx.styleWrapper)
  }, createSlots({
    note: withCtx(function () {
      return [createElementVNode("div", {
        class: normalizeClass("".concat(_ctx.componentName, "__wrap"))
      }, [createElementVNode("input", {
        ref: "inputRef",
        value: _ctx.innerValue,
        name: _ctx.name,
        class: normalizeClass(_ctx.styleControl),
        type: _ctx.type,
        disabled: _ctx.disabled,
        autocomplete: _ctx.autocomplete ? "On" : "Off",
        placeholder: _ctx.placeholder,
        readonly: _ctx.readonly,
        maxlength: _ctx.maxlength || -1,
        onFocus: _cache[0] || (_cache[0] = function () {
          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
        }),
        onBlur: _cache[1] || (_cache[1] = function () {
          return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
        }),
        onInput: _cache[2] || (_cache[2] = function () {
          return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
        }),
        onCompositionend: _cache[3] || (_cache[3] = function () {
          return _ctx.handleCompositionend && _ctx.handleCompositionend.apply(_ctx, arguments);
        })
      }, null, 42, _hoisted_1), _ctx.clearable && _ctx.innerValue && _ctx.innerValue.length > 0 ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass("".concat(_ctx.componentName, "__wrap--icon")),
        onClick: _cache[4] || (_cache[4] = function () {
          return _ctx.handleClear && _ctx.handleClear.apply(_ctx, arguments);
        })
      }, [createVNode(_component_close_circle_filled_icon)], 2)) : createCommentVNode("", true), _ctx.suffixContent ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass("".concat(_ctx.componentName, "__wrap--suffix"))
      }, [createVNode(_component_t_node, {
        content: _ctx.suffixContent
      }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 2), _ctx.errorMessage ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass("".concat(_ctx.componentName, "__error-msg"))
      }, toDisplayString(_ctx.errorMessage), 3)) : createCommentVNode("", true)];
    }),
    _: 2
  }, [_ctx.labelContent ? {
    name: "title",
    fn: withCtx(function () {
      return [createElementVNode("div", {
        class: normalizeClass(_ctx.styleLabel)
      }, [createVNode(_component_t_node, {
        content: _ctx.labelContent
      }, null, 8, ["content"])], 2)];
    }),
    key: "0"
  } : void 0, _ctx.prefixIconContent ? {
    name: "leftIcon",
    fn: withCtx(function () {
      return [createVNode(_component_t_node, {
        content: _ctx.prefixIconContent
      }, null, 8, ["content"])];
    }),
    key: "1"
  } : void 0, _ctx.suffixIconContent ? {
    name: "rightIcon",
    fn: withCtx(function () {
      return [createVNode(_component_t_node, {
        content: _ctx.suffixIconContent
      }, null, 8, ["content"])];
    }),
    key: "2"
  } : void 0]), 1032, ["required", "class"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=input.js.map
