{"version":3,"file":"input.js","sources":["../../src/input/input.vue","../../src/input/input.vue?vue&type=template&id=7976e3cc&lang.js"],"sourcesContent":["<template>\n  <t-cell :required=\"required\" :class=\"styleWrapper\">\n    <template v-if=\"labelContent\" #title>\n      <div :class=\"styleLabel\">\n        <t-node :content=\"labelContent\"></t-node>\n      </div>\n    </template>\n    <template v-if=\"prefixIconContent\" #leftIcon>\n      <t-node :content=\"prefixIconContent\"></t-node>\n    </template>\n    <template #note>\n      <div :class=\"`${componentName}__wrap`\">\n        <input\n          ref=\"inputRef\"\n          :value=\"innerValue\"\n          :name=\"name\"\n          :class=\"styleControl\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          :autocomplete=\"autocomplete ? 'On' : 'Off'\"\n          :placeholder=\"placeholder\"\n          :readonly=\"readonly\"\n          :maxlength=\"maxlength || -1\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n          @compositionend=\"handleCompositionend\"\n        />\n        <div\n          v-if=\"clearable && innerValue && innerValue.length > 0\"\n          :class=\"`${componentName}__wrap--icon`\"\n          @click=\"handleClear\"\n        >\n          <close-circle-filled-icon />\n        </div>\n        <div v-if=\"suffixContent\" :class=\"`${componentName}__wrap--suffix`\">\n          <t-node :content=\"suffixContent\" />\n        </div>\n      </div>\n      <div v-if=\"errorMessage\" :class=\"`${componentName}__error-msg`\">{{ errorMessage }}</div>\n    </template>\n    <template v-if=\"suffixIconContent\" #rightIcon>\n      <t-node :content=\"suffixIconContent\"></t-node>\n    </template>\n  </t-cell>\n</template>\n\n<script lang=\"ts\">\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport { ref, computed, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick, watch } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport TCell from '../cell';\nimport config from '../config';\nimport InputProps from './props';\nimport ClASSNAMES from '../shared/constants';\nimport { InputValue, TdInputProps } from './type';\nimport { useEmitEvent, getCharacterLength, renderTNode, TNode, useDefault, extendAPI } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-input`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n    TCell,\n    CloseCircleFilledIcon,\n  },\n  props: InputProps,\n  emits: ['update:value', 'update:modelValue', 'click-icon', 'focus', 'blur', 'change', 'clear'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const inputRef = ref();\n    const { autofocus } = toRefs(props);\n    const internalInstance = getCurrentInstance();\n    const [innerValue] = useDefault<string, TdInputProps>(props, context.emit, 'value', 'change');\n\n    const styleLabel = computed(() => ({\n      [`${componentName}--label`]: true,\n      [ClASSNAMES.STATUS.disabled]: props.disabled,\n    }));\n    const { focused } = useFocus(inputRef, { initialValue: props.autofocus });\n\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n    const suffixIconContent = computed(() => renderTNode(internalInstance, 'suffixIcon'));\n    const prefixIconContent = computed(() => renderTNode(internalInstance, 'prefixIcon'));\n    const suffixContent = computed(() => renderTNode(internalInstance, 'suffix'));\n\n    const styleControl = computed(() => [\n      `${componentName}__control`,\n      {\n        [`${componentName}__control--${props.align}`]: props.align !== 'left',\n      },\n    ]);\n\n    const styleWrapper = computed(() => ({\n      [componentName]: true,\n      [`${componentName}--size-${props.size}`]: props.size,\n      [`${componentName}__error`]: !!props.errorMessage,\n    }));\n\n    const setInputValue = (v: InputValue = '') => {\n      const input = inputRef.value as HTMLInputElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const handleInput = (e: any) => {\n      // 中文输入的时候inputType是insertCompositionText所以中文输入的时候禁止触发。\n      const checkInputType = e.inputType && e.inputType === 'insertCompositionText';\n      if (e.isComposing || checkInputType) return;\n      inputValueChangeHandle(e);\n    };\n\n    const inputValueChangeHandle = (e: Event) => {\n      const { value } = e.target as HTMLInputElement;\n      const { maxcharacter } = props;\n      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        innerValue.value = characters;\n      } else {\n        innerValue.value = value;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n    };\n\n    const focus = () => {\n      focused.value = true;\n    };\n\n    const blur = () => {\n      focused.value = false;\n      // inputRef.value?.blur();\n    };\n\n    extendAPI({ focus, blur });\n\n    const handleClear = (e: MouseEvent) => {\n      innerValue.value = '';\n      focused.value = true;\n      emitEvent('clear', { e });\n    };\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      inputValueChangeHandle(e as InputEvent);\n    };\n\n    watch(autofocus, (autofocus, prevAutofocus) => {\n      if (autofocus === true) {\n        nextTick(() => {\n          focused.value = true;\n        });\n      }\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      styleLabel,\n      styleWrapper,\n      styleControl,\n      suffixContent,\n      suffixIconContent,\n      prefixIconContent,\n      labelContent,\n      innerValue,\n      inputRef,\n      handleClear,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n","<template>\n  <t-cell :required=\"required\" :class=\"styleWrapper\">\n    <template v-if=\"labelContent\" #title>\n      <div :class=\"styleLabel\">\n        <t-node :content=\"labelContent\"></t-node>\n      </div>\n    </template>\n    <template v-if=\"prefixIconContent\" #leftIcon>\n      <t-node :content=\"prefixIconContent\"></t-node>\n    </template>\n    <template #note>\n      <div :class=\"`${componentName}__wrap`\">\n        <input\n          ref=\"inputRef\"\n          :value=\"innerValue\"\n          :name=\"name\"\n          :class=\"styleControl\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          :autocomplete=\"autocomplete ? 'On' : 'Off'\"\n          :placeholder=\"placeholder\"\n          :readonly=\"readonly\"\n          :maxlength=\"maxlength || -1\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n          @compositionend=\"handleCompositionend\"\n        />\n        <div\n          v-if=\"clearable && innerValue && innerValue.length > 0\"\n          :class=\"`${componentName}__wrap--icon`\"\n          @click=\"handleClear\"\n        >\n          <close-circle-filled-icon />\n        </div>\n        <div v-if=\"suffixContent\" :class=\"`${componentName}__wrap--suffix`\">\n          <t-node :content=\"suffixContent\" />\n        </div>\n      </div>\n      <div v-if=\"errorMessage\" :class=\"`${componentName}__error-msg`\">{{ errorMessage }}</div>\n    </template>\n    <template v-if=\"suffixIconContent\" #rightIcon>\n      <t-node :content=\"suffixIconContent\"></t-node>\n    </template>\n  </t-cell>\n</template>\n\n<script lang=\"ts\">\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport { ref, computed, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick, watch } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport TCell from '../cell';\nimport config from '../config';\nimport InputProps from './props';\nimport ClASSNAMES from '../shared/constants';\nimport { InputValue, TdInputProps } from './type';\nimport { useEmitEvent, getCharacterLength, renderTNode, TNode, useDefault, extendAPI } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-input`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n    TCell,\n    CloseCircleFilledIcon,\n  },\n  props: InputProps,\n  emits: ['update:value', 'update:modelValue', 'click-icon', 'focus', 'blur', 'change', 'clear'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const inputRef = ref();\n    const { autofocus } = toRefs(props);\n    const internalInstance = getCurrentInstance();\n    const [innerValue] = useDefault<string, TdInputProps>(props, context.emit, 'value', 'change');\n\n    const styleLabel = computed(() => ({\n      [`${componentName}--label`]: true,\n      [ClASSNAMES.STATUS.disabled]: props.disabled,\n    }));\n    const { focused } = useFocus(inputRef, { initialValue: props.autofocus });\n\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n    const suffixIconContent = computed(() => renderTNode(internalInstance, 'suffixIcon'));\n    const prefixIconContent = computed(() => renderTNode(internalInstance, 'prefixIcon'));\n    const suffixContent = computed(() => renderTNode(internalInstance, 'suffix'));\n\n    const styleControl = computed(() => [\n      `${componentName}__control`,\n      {\n        [`${componentName}__control--${props.align}`]: props.align !== 'left',\n      },\n    ]);\n\n    const styleWrapper = computed(() => ({\n      [componentName]: true,\n      [`${componentName}--size-${props.size}`]: props.size,\n      [`${componentName}__error`]: !!props.errorMessage,\n    }));\n\n    const setInputValue = (v: InputValue = '') => {\n      const input = inputRef.value as HTMLInputElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const handleInput = (e: any) => {\n      // 中文输入的时候inputType是insertCompositionText所以中文输入的时候禁止触发。\n      const checkInputType = e.inputType && e.inputType === 'insertCompositionText';\n      if (e.isComposing || checkInputType) return;\n      inputValueChangeHandle(e);\n    };\n\n    const inputValueChangeHandle = (e: Event) => {\n      const { value } = e.target as HTMLInputElement;\n      const { maxcharacter } = props;\n      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        innerValue.value = characters;\n      } else {\n        innerValue.value = value;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n    };\n\n    const focus = () => {\n      focused.value = true;\n    };\n\n    const blur = () => {\n      focused.value = false;\n      // inputRef.value?.blur();\n    };\n\n    extendAPI({ focus, blur });\n\n    const handleClear = (e: MouseEvent) => {\n      innerValue.value = '';\n      focused.value = true;\n      emitEvent('clear', { e });\n    };\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      inputValueChangeHandle(e as InputEvent);\n    };\n\n    watch(autofocus, (autofocus, prevAutofocus) => {\n      if (autofocus === true) {\n        nextTick(() => {\n          focused.value = true;\n        });\n      }\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      styleLabel,\n      styleWrapper,\n      styleControl,\n      suffixContent,\n      suffixIconContent,\n      prefixIconContent,\n      labelContent,\n      innerValue,\n      inputRef,\n      handleClear,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","componentName","defineComponent","name","components","TNode","TCell","CloseCircleFilledIcon","props","InputProps","emits","setup","context","emitEvent","useEmitEvent","emit","inputRef","ref","toRefs","autofocus","internalInstance","getCurrentInstance","useDefault","innerValue","styleLabel","computed","ClASSNAMES","STATUS","disabled","useFocus","initialValue","focused","labelContent","renderTNode","suffixIconContent","prefixIconContent","suffixContent","styleControl","align","styleWrapper","size","errorMessage","setInputValue","v","input","value","sV","String","handleInput","e","checkInputType","inputType","isComposing","inputValueChangeHandle","target","maxcharacter","Number","isNaN","getCharacterLength","length","characters","nextTick","focus","blur","extendAPI","handleClear","handleFocus","handleBlur","handleCompositionend","watch","prevAutofocus","_createBlock","_component_t_cell","required","_ctx","class","note","_createElementVNode","type","autocomplete","placeholder","readonly","maxlength","onFocus","onBlur","onInput","onCompositionend","clearable","_createElementBlock","onClick","_createVNode","_component_close_circle_filled_icon","_component_t_node","content"],"mappings":"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"}