/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, normalizeStyle, renderSlot, createBlock, resolveDynamicComponent, createVNode, toDisplayString, createCommentVNode } from 'vue';
import { StarFilledIcon, StarIcon } from 'tdesign-icons-vue-next';
import rateProps from './props.js';
import config from '../config.js';
import '../shared/index.js';
import { useDefault } from '../shared/useDefault/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-rate");
var script = defineComponent({
  name: name,
  components: {
    StarFilledIcon: StarFilledIcon,
    StarIcon: StarIcon
  },
  props: rateProps,
  emits: ["change", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var rateWrapper = ref(null);
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      actualVal = _useDefault2[0];
    var rateText = computed(function () {
      if (Array.isArray(props.texts) && props.texts.length > 0) {
        return props.texts[actualVal.value - 1];
      }
      return actualVal.value > 0 ? "".concat(actualVal.value, " \u5206") : "";
    });
    var colors = computed(function () {
      if (Array.isArray(props.color)) return props.color;
      return [props.color, void 0];
    });
    var iconHalfStyle = function iconHalfStyle(n) {
      return {
        color: actualVal.value + 0.5 === n || actualVal.value >= n ? colors.value[0] : "transparent"
      };
    };
    var iconFullStyle = function iconFullStyle(n) {
      return {
        color: actualVal.value >= n ? colors.value[0] : "transparent"
      };
    };
    var startComponent = props.variant === "filled" ? StarFilledIcon : StarIcon;
    var classes = function classes(n) {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name, "--item"), true), _defineProperty(_ref, "".concat(name, "-full"), actualVal.value >= n), _defineProperty(_ref, "".concat(name, "-half"), actualVal.value + 0.5 === n), _ref;
    };
    function onClick(current) {
      if (props.disabled) return;
      actualVal.value = props.clearable && actualVal.value === current ? 0 : current;
    }
    var ranges = [];
    function onTouchstart() {
      ranges = [];
      if (rateWrapper.value) {
        var items = rateWrapper.value.children;
        Array.from(items).forEach(function (node, index) {
          var _node$getBoundingClie = node.getBoundingClientRect(),
            left = _node$getBoundingClie.left,
            width = _node$getBoundingClie.width;
          if (props.allowHalf) {
            ranges.push({
              score: index + 0.5,
              left: left
            }, {
              score: index + 1,
              left: left + width / 2
            });
          } else {
            ranges.push({
              score: index + 1,
              left: left
            });
          }
        });
      }
    }
    function onTouchmove(e) {
      if (props.disabled) return;
      var clientX = e.touches[0].clientX;
      var score = props.allowHalf ? 0.5 : 1;
      for (var i = ranges.length - 1; i >= 0; i--) {
        if (clientX > ranges[i].left) {
          score = ranges[i].score;
          break;
        } else {
          score = 0;
        }
      }
      actualVal.value = score;
    }
    return {
      name: ref(name),
      classes: classes,
      rateWrapper: rateWrapper,
      actualVal: actualVal,
      iconHalfStyle: iconHalfStyle,
      iconFullStyle: iconFullStyle,
      colors: colors,
      startComponent: startComponent,
      rateText: rateText,
      onClick: onClick,
      onTouchstart: onTouchstart,
      onTouchmove: onTouchmove
    };
  }
});

var _hoisted_1 = ["onClick"];
var _hoisted_2 = ["onClick"];
var _hoisted_3 = ["onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_star_filled_icon = resolveComponent("star-filled-icon");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass("".concat(_ctx.name))
  }, [createElementVNode("ul", {
    ref: "rateWrapper",
    class: normalizeClass("".concat(_ctx.name, "--list")),
    onTouchstart: _cache[0] || (_cache[0] = function () {
      return _ctx.onTouchstart && _ctx.onTouchstart.apply(_ctx, arguments);
    }),
    onTouchmove: _cache[1] || (_cache[1] = function () {
      return _ctx.onTouchmove && _ctx.onTouchmove.apply(_ctx, arguments);
    })
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, function (n) {
    return openBlock(), createElementBlock("li", {
      key: n,
      class: normalizeClass(_ctx.classes(n)),
      style: normalizeStyle({
        marginRight: "".concat(_ctx.count > n ? _ctx.gap : 0, "px")
      })
    }, [createElementVNode("span", {
      class: normalizeClass("".concat(_ctx.name, "--placeholder"))
    }, [renderSlot(_ctx.$slots, "icon", {}, function () {
      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.startComponent), {
        size: _ctx.size,
        style: normalizeStyle({
          color: _ctx.colors[1]
        })
      }, null, 8, ["size", "style"]))];
    })], 2), _ctx.allowHalf ? (openBlock(), createElementBlock(Fragment, {
      key: 0
    }, [createElementVNode("span", {
      class: normalizeClass("".concat(_ctx.name, "--icon-left")),
      onClick: function onClick($event) {
        return _ctx.onClick(n - 0.5);
      }
    }, [renderSlot(_ctx.$slots, "icon", {}, function () {
      return [createVNode(_component_star_filled_icon, {
        size: _ctx.size,
        style: normalizeStyle(_ctx.iconHalfStyle(n))
      }, null, 8, ["size", "style"])];
    })], 10, _hoisted_1), createElementVNode("span", {
      class: normalizeClass("".concat(_ctx.name, "--icon-right")),
      onClick: function onClick($event) {
        return _ctx.onClick(n);
      }
    }, [renderSlot(_ctx.$slots, "icon", {}, function () {
      return [createVNode(_component_star_filled_icon, {
        size: _ctx.size,
        style: normalizeStyle(_ctx.iconFullStyle(n))
      }, null, 8, ["size", "style"])];
    })], 10, _hoisted_2)], 64)) : (openBlock(), createElementBlock("span", {
      key: 1,
      class: normalizeClass("".concat(_ctx.name, "--icon")),
      onClick: function onClick($event) {
        return _ctx.onClick(n);
      }
    }, [renderSlot(_ctx.$slots, "icon", {}, function () {
      return [createVNode(_component_star_filled_icon, {
        size: _ctx.size,
        style: normalizeStyle(_ctx.iconFullStyle(n))
      }, null, 8, ["size", "style"])];
    })], 10, _hoisted_3))], 6);
  }), 128))], 34), _ctx.showText ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "--text"))
  }, toDisplayString(_ctx.rateText), 3)) : createCommentVNode("", true)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=rate.js.map
