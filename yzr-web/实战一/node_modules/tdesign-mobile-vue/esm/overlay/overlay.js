/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, renderSlot, vShow } from 'vue';
import config from '../config.js';
import props from './props.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-overlay");
var script = defineComponent({
  name: name,
  props: props,
  setup: function setup(props2) {
    var classes = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name), true), _defineProperty(_ref, "".concat(name, "--active"), props2.visible), _defineProperty(_ref, "".concat(name, "--transparent"), props2.transparent), _ref;
    });
    var rootStyles = computed(function () {
      return props2.customStyle || props2.zIndex || props2.duration ? (props2.customStyle && "".concat(props2.customStyle, ";")) + (props2.zIndex && "z-index:".concat(props2.zIndex, ";")) + (props2.duration && "transition-duration:".concat(props2.duration, "ms;")) : void 0;
    });
    var handleTouchMove = function handleTouchMove(e) {
      if (props2.preventScrollThrough) {
        e.stopPropagation();
        e.preventDefault();
      }
    };
    var handleClick = function handleClick(e) {
      var _props2$onClick;
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
        e: e
      });
    };
    return {
      name: name,
      classes: classes,
      rootStyles: rootStyles,
      handleClick: handleClick,
      handleTouchMove: handleTouchMove
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: _ctx.name
  }, {
    default: withCtx(function () {
      return [withDirectives(createElementVNode("div", {
        class: normalizeClass(_ctx.classes),
        style: normalizeStyle(_ctx.rootStyles),
        onClick: _cache[0] || (_cache[0] = function () {
          return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
        }),
        onTouchmove: _cache[1] || (_cache[1] = function () {
          return _ctx.handleTouchMove && _ctx.handleTouchMove.apply(_ctx, arguments);
        })
      }, [renderSlot(_ctx.$slots, "default")], 38), [[vShow, _ctx.visible]])];
    }),
    _: 3
  }, 8, ["name"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=overlay.js.map
