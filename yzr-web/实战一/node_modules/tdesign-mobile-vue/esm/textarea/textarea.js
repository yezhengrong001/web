/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, toRefs, computed, getCurrentInstance, nextTick, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createCommentVNode, createElementVNode, normalizeStyle, toDisplayString } from 'vue';
import '../shared/index.js';
import config from '../config.js';
import TextareaProps from './props.js';
import calcTextareaHeight from '../_common/js/utils/calcTextareaHeight.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import { renderTNode } from '../shared/render.js';
import { getCharacterLength } from '../shared/util.js';
import '../shared/functions.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var componentName = "".concat(prefix, "-textarea");
var script = defineComponent({
  name: componentName,
  components: {
    TNode: TNodeComponent
  },
  props: TextareaProps,
  emits: ["update:value", "update:modelValue", "focus", "blur", "change"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var textareaRef = ref(null);
    var textareaStyle = ref();
    var textareaLength = ref(0);
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var textareaClassNames = computed(function () {
      return ["".concat(componentName, "__wrapper"), _defineProperty({}, "".concat(componentName, "-is-disabled"), props.disabled)];
    });
    var internalInstance = getCurrentInstance();
    var labelContent = computed(function () {
      return renderTNode(internalInstance, "label");
    });
    var setInputValue = function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var input = textareaRef.value;
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        input.value = sV;
      }
    };
    var adjustTextareaHeight = function adjustTextareaHeight() {
      if (props.autosize === true) {
        textareaStyle.value = calcTextareaHeight(textareaRef.value);
      } else if (_typeof(props.autosize) === "object") {
        var _props$autosize = props.autosize,
          minRows = _props$autosize.minRows,
          maxRows = _props$autosize.maxRows;
        textareaStyle.value = calcTextareaHeight(textareaRef.value, minRows, maxRows);
      } else if (context.attrs.rows) {
        textareaStyle.value = {
          height: "auto",
          minHeight: "auto"
        };
      }
    };
    var handleInput = function handleInput(e) {
      if (e.isComposing || e.inputType === "insertCompositionText") return;
      textareaValueChangeHandle(e);
    };
    var textareaValueChangeHandle = function textareaValueChangeHandle(e) {
      var target = e.target;
      var value2 = target.value;
      if (props.maxcharacter && props.maxcharacter > 0 && !Number.isNaN(props.maxcharacter)) {
        var _getCharacterLength = getCharacterLength(value2, props.maxcharacter),
          _getCharacterLength$l = _getCharacterLength.length,
          length = _getCharacterLength$l === void 0 ? 0 : _getCharacterLength$l,
          _getCharacterLength$c = _getCharacterLength.characters,
          characters = _getCharacterLength$c === void 0 ? "" : _getCharacterLength$c;
        setInnerValue(characters);
        textareaLength.value = length;
      } else {
        setInnerValue(value2);
        textareaLength.value = String(innerValue.value).length;
      }
      nextTick(function () {
        return setInputValue(innerValue.value);
      });
      adjustTextareaHeight();
    };
    var handleCompositionend = function handleCompositionend(e) {
      textareaValueChangeHandle(e);
    };
    var handleFocus = function handleFocus(e) {
      emitEvent("focus", innerValue.value, {
        e: e
      });
    };
    var handleBlur = function handleBlur(e) {
      emitEvent("blur", innerValue.value, {
        e: e
      });
    };
    onMounted(function () {
      if (props.autofocus) {
        var _textareaRef$value;
        (_textareaRef$value = textareaRef.value) === null || _textareaRef$value === void 0 ? void 0 : _textareaRef$value.focus();
      }
      adjustTextareaHeight();
    });
    return _objectSpread(_objectSpread({
      componentName: componentName
    }, toRefs(props)), {}, {
      labelContent: labelContent,
      innerValue: innerValue,
      textareaRef: textareaRef,
      textareaStyle: textareaStyle,
      textareaClassNames: textareaClassNames,
      textareaLength: textareaLength,
      handleFocus: handleFocus,
      handleBlur: handleBlur,
      handleInput: handleInput,
      handleCompositionend: handleCompositionend
    });
  }
});

var _hoisted_1 = ["value", "name", "maxlength", "disabled", "placeholder"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.componentName)
  }, [_ctx.labelContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.componentName, "__name"))
  }, [createVNode(_component_t_node, {
    content: _ctx.labelContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true), createElementVNode("div", {
    class: normalizeClass(_ctx.textareaClassNames)
  }, [createElementVNode("textarea", {
    ref: "textareaRef",
    value: _ctx.innerValue,
    style: normalizeStyle(_ctx.textareaStyle),
    name: _ctx.name,
    maxlength: _ctx.maxlength || -1,
    disabled: _ctx.disabled,
    placeholder: _ctx.placeholder,
    onFocus: _cache[0] || (_cache[0] = function () {
      return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
    }),
    onBlur: _cache[1] || (_cache[1] = function () {
      return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
    }),
    onInput: _cache[2] || (_cache[2] = function () {
      return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
    }),
    onCompositionend: _cache[3] || (_cache[3] = function () {
      return _ctx.handleCompositionend && _ctx.handleCompositionend.apply(_ctx, arguments);
    })
  }, null, 44, _hoisted_1), _ctx.maxcharacter || _ctx.maxlength ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.componentName, "__count"))
  }, toDisplayString("".concat(_ctx.textareaLength, "/").concat(_ctx.maxcharacter || _ctx.maxlength)), 3)) : createCommentVNode("", true)], 2)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=textarea.js.map
