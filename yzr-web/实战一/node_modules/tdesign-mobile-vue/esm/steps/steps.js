/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, reactive, provide, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, renderList, createBlock } from 'vue';
import StepsProps from './props.js';
import script$1 from './step-item.js';
import config from '../config.js';
import '../shared/index.js';
import { useDefault } from '../shared/useDefault/index.js';
import 'tdesign-icons-vue-next';
import './step-item-props.js';
import '../shared/render-tnode.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-steps");
var script = defineComponent({
  name: name,
  components: {
    TStepItem: script$1
  },
  props: StepsProps,
  emits: ["update:current", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var baseClass = computed(function () {
      return [name, "".concat(name, "--").concat(props.layout), _defineProperty({}, "".concat(name, "--readonly"), props.readonly), "".concat(name, "--").concat(props.theme, "-anchor")];
    });
    var _useDefault = useDefault(props, context.emit, "current", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      current = _useDefault2[0],
      setCurrent = _useDefault2[1];
    var state = reactive({
      children: []
    });
    var relation = function relation(child) {
      child && state.children.push(child);
    };
    var onClickItem = function onClickItem(cur, prev, e) {
      setCurrent(cur, prev, {
        e: e
      });
    };
    provide("stepsProvide", _objectSpread(_objectSpread({}, props), {}, {
      state: state,
      current: current,
      relation: relation,
      onClickItem: onClickItem
    }));
    return _objectSpread({
      baseClass: baseClass,
      onClickItem: onClickItem
    }, toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_step_item = resolveComponent("t-step-item");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.baseClass)
  }, [renderSlot(_ctx.$slots, "default", {}, function () {
    return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (item, index) {
      return openBlock(), createBlock(_component_t_step_item, {
        key: index,
        title: item.title,
        content: item.content,
        icon: item.icon,
        status: item.status
      }, null, 8, ["title", "content", "icon", "status"]);
    }), 128))];
  })], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=steps.js.map
