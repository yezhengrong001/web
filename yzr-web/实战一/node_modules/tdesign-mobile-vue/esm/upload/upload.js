/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _typeof from '@babel/runtime/helpers/typeof';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { defineComponent, getCurrentInstance, computed, ref, toRefs, resolveComponent, openBlock, createElementBlock, createElementVNode, normalizeClass, Fragment, renderList, normalizeStyle, createBlock, createVNode, createCommentVNode } from 'vue';
import { AddIcon, CloseIcon, RefreshIcon } from 'tdesign-icons-vue-next';
import findIndex from 'lodash/findIndex';
import xhr from '../_common/js/upload/xhr.js';
import '../shared/index.js';
import UploadProps from './props.js';
import config from '../config.js';
import { isOverSizeLimit } from './util.js';
import _ImageViewer from '../image-viewer/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useDefault } from '../shared/useDefault/index.js';
import { renderTNode } from '../shared/render.js';
import { isArray, isObject, isFunction } from '../shared/util.js';
import '../_common/js/upload/utils.js';
import '../_common/js/log/log.js';
import '../shared/functions.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import 'lodash/camelCase';
import '../image-viewer/image-viewer.js';
import '../image-viewer/props.js';
import '../swiper/index.js';
import '../swiper/swiper.js';
import '../swiper/props.js';
import '../swiper/swiper-item.js';
import '../swiper/style';
import '../swiper/type.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../overlay/style';
import '../image-viewer/style';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-upload");
var script = defineComponent({
  name: name,
  components: {
    AddIcon: AddIcon,
    TNode: TNodeComponent,
    CloseIcon: CloseIcon,
    RefreshIcon: RefreshIcon,
    TImageViewer: _ImageViewer
  },
  props: UploadProps,
  emits: ["update:files", "update:modelValue", "change", "fail", "preview", "progress", "remove", "success", "select-change"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var _useDefault = useDefault(props, context.emit, "files", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerFiles = _useDefault2[0],
      setInnerFiles = _useDefault2[1];
    var internalInstance = getCurrentInstance();
    var defaultContent = computed(function () {
      return renderTNode(internalInstance, "default");
    });
    var deleteBtnContent = computed(function () {
      return renderTNode(internalInstance, "deleteBtn");
    });
    var images = ref([]);
    var showViewer = ref(false);
    var initialIndex = ref(0);
    var UPLOAD_NAME = name;
    var xhrReq = ref(null);
    var toUploadFiles = ref([]);
    var uploadedFiles = computed(function () {
      if (innerFiles.value && isArray(innerFiles.value)) {
        return innerFiles.value.filter(function (file) {
          return file.status === "success" || file.status === "fail";
        });
      }
      return [];
    });
    var errorMsg = ref("");
    var inputRef = ref(null);
    var itemStyle = computed(function () {
      var _toRefs = toRefs(props),
        gridConfig = _toRefs.gridConfig;
      var column = 4;
      if (isObject(gridConfig.value)) {
        column = gridConfig.value.column;
      }
      return {
        flexBasis: "".concat(100 / +column, "%")
      };
    });
    var itemContentStyle = computed(function () {
      var width = 80;
      var height = 80;
      var _toRefs2 = toRefs(props),
        gridConfig = _toRefs2.gridConfig;
      if (isObject(gridConfig.value)) {
        var _gridConfig$value = gridConfig.value;
        width = _gridConfig$value.width;
        height = _gridConfig$value.height;
      }
      return {
        height: "".concat(height, "px"),
        width: "".concat(width, "px")
      };
    });
    var triggerUpload = function triggerUpload() {
      var input = inputRef.value;
      if (props.disabled) return;
      input.click();
    };
    var handlePreview = function handlePreview(e, file) {
      showViewer.value = true;
      emitEvent("preview", {
        e: e,
        file: file
      });
    };
    var handleReload = function handleReload(file) {
      uploadFiles([file.fileRaw]);
    };
    var handleChange = function handleChange() {
      var input = inputRef.value;
      if (props.disabled || !input || !input.files) return;
      var formatFiles = formatFileToUploadFile(input.files);
      emitEvent("select-change", _toConsumableArray(formatFiles));
      uploadFiles(formatFiles);
      input.value = "";
    };
    var formatFileToUploadFile = function formatFileToUploadFile(files) {
      var format = props.format;
      if (!format || !isFunction(format)) {
        var res = [];
        for (var i = 0; i < files.length; i++) {
          res.push(files[i]);
        }
        return res;
      }
      var NewFiles = _toConsumableArray(files);
      NewFiles.forEach(function (item) {
        item = format(item);
      });
      return NewFiles;
    };
    var handleBeforeUpload = function handleBeforeUpload(file) {
      if (props.beforeUpload && isFunction(props.beforeUpload)) {
        var beforeUpload = props.beforeUpload(file);
        if (beforeUpload instanceof Promise) return beforeUpload;
        return Promise.resolve(beforeUpload);
      }
      return new Promise(function (resolve) {
        if (props.sizeLimit) {
          resolve(handleSizeLimit(file.size));
        }
        resolve(true);
      });
    };
    var handleSizeLimit = function handleSizeLimit(fileSize) {
      var sizeLimit;
      if (typeof props.sizeLimit === "number") {
        sizeLimit = {
          size: props.sizeLimit,
          unit: "KB"
        };
      } else if (_typeof(props.sizeLimit) === "object") {
        sizeLimit = props.sizeLimit;
      } else {
        sizeLimit = {
          size: 0,
          unit: "KB"
        };
      }
      var isOverSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);
      if (isOverSize) {
        errorMsg.value = sizeLimit.message ? sizeLimit.message : "TDesign Upoad Error: uploaded picture exceeds ".concat(props.sizeLimit).concat(sizeLimit.unit, " restrictions");
      }
      return isOverSize;
    };
    var uploadFiles = function uploadFiles(files) {
      var _toRefs3 = toRefs(props),
        max = _toRefs3.max;
      var tmpFiles = _toConsumableArray(files);
      if (max.value) {
        tmpFiles = tmpFiles.slice(0, max.value - uploadedFiles.value.length);
        if (tmpFiles.length !== files.length) {
          console.warn("TDesign Upload Warn: you can only upload ".concat(max.value, " files"));
        }
      }
      tmpFiles.forEach(function (fileRaw) {
        var uploadFile = _objectSpread(_objectSpread({}, fileRaw), {}, {
          fileRaw: fileRaw,
          lastModified: fileRaw.lastModified,
          name: fileRaw.name,
          size: fileRaw.size,
          type: fileRaw.type,
          percent: 0,
          status: "waiting"
        });
        var reader = new FileReader();
        reader.readAsDataURL(fileRaw);
        reader.onload = function (event) {
          var _event$target;
          uploadFile.url = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;
        };
        handleBeforeUpload(fileRaw).then(function (canUpload) {
          if (!canUpload) return;
          var newFiles = toUploadFiles.value.concat();
          if (props.allowUploadDuplicateFile || !toUploadFiles.value.find(function (file) {
            return file.name === uploadFile.name;
          })) {
            newFiles.push(uploadFile);
          }
          toUploadFiles.value = newFiles;
          if (props.autoUpload) {
            upload(uploadFile);
          }
        });
      });
    };
    var handleMockProgress = function handleMockProgress(file) {
      var timer = setInterval(function () {
        if (file.status === "success" || file.percent >= 99) {
          clearInterval(timer);
          return;
        }
        file.percent += 1;
        handleProgress({
          file: file,
          percent: file.percent,
          type: "mock"
        });
      }, 10);
    };
    var handleProgress = function handleProgress(_ref) {
      var event = _ref.event,
        file = _ref.file,
        percent = _ref.percent,
        _ref$type = _ref.type,
        type = _ref$type === void 0 ? "real" : _ref$type;
      if (!file) throw new Error("Error file");
      file.percent = Math.min(percent, 100);
      var progressCtx = {
        percent: percent,
        e: event,
        file: file,
        type: type
      };
      emitEvent("progress", progressCtx);
    };
    var handleRemove = function handleRemove(e, file, index) {
      errorMsg.value = "";
      var files = uploadedFiles.value.concat();
      files.splice(index, 1);
      setInnerFiles(files, {
        e: e,
        trigger: "remove",
        index: index,
        file: file
      });
      emitEvent("remove", {
        e: e,
        index: index,
        file: file
      });
      images.value.splice(index, 1);
    };
    var upload = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {
        var request;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!props.action && !props.requestMethod)) {
                  _context.next = 3;
                  break;
                }
                console.error("TDesign Upload Error: one of action and requestMethod must be exist.");
                return _context.abrupt("return");
              case 3:
                errorMsg.value = "";
                file.status = "progress";
                if (props.requestMethod) {
                  handleRequestMethod(file);
                } else {
                  if (props.useMockProgress) {
                    handleMockProgress(file);
                  }
                  request = xhr;
                  xhrReq.value = request({
                    action: props.action,
                    data: _objectSpread({
                      file: file.fileRaw
                    }, props.data),
                    file: file,
                    method: props.method,
                    headers: props.headers || {},
                    withCredentials: props.withCredentials,
                    onError: handleError,
                    onProgress: handleProgress,
                    onSuccess: handleSuccess
                  });
                }
              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function upload(_x) {
        return _ref2.apply(this, arguments);
      };
    }();
    var handleRequestMethod = function handleRequestMethod(file) {
      var _props$requestMethod;
      if (!isFunction(props.requestMethod)) {
        console.warn("TDesign Upload Warn: `requestMethod` must be a function.");
        return;
      }
      (_props$requestMethod = props.requestMethod) === null || _props$requestMethod === void 0 ? void 0 : _props$requestMethod.call(props, file).then(function (res) {
        if (!handleRequestMethodResponse(res)) return;
        if (res.status === "success") {
          handleSuccess({
            file: file,
            response: res.response
          });
        } else if (res.status === "fail") {
          var r = res.response || {};
          handleError({
            event: void 0,
            file: file,
            response: _objectSpread(_objectSpread({}, r), {}, {
              error: res.error
            })
          });
        }
      });
    };
    var handleRequestMethodResponse = function handleRequestMethodResponse(res) {
      if (!res) {
        console.error("TDesign Upoad Error: `requestMethodResponse` is required.");
        return false;
      }
      if (!res.status) {
        console.error("TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`");
        return false;
      }
      if (!["success", "fail"].includes(res.status)) {
        console.error("TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`");
        return false;
      }
      if (res.status === "success" && (!res.response || !res.response.url)) {
        console.warn("TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`");
      }
      return true;
    };
    var handleSuccess = function handleSuccess(_ref3) {
      var _res, _res2;
      var event = _ref3.event,
        file = _ref3.file,
        response = _ref3.response;
      if (!file) throw new Error("Error file");
      file.status = "success";
      var res = response;
      if (props.formatResponse && isFunction(props.formatResponse)) {
        res = props.formatResponse(response, {
          file: file
        });
      }
      if ((_res = res) !== null && _res !== void 0 && _res.error) {
        handleError({
          event: event,
          file: file,
          response: res,
          resFormatted: true
        });
        return;
      }
      file.url = ((_res2 = res) === null || _res2 === void 0 ? void 0 : _res2.url) || file.url;
      var index = findIndex(toUploadFiles.value, function (o) {
        return o.name === file.name;
      });
      toUploadFiles.value.splice(index, 1);
      var newFile = _objectSpread(_objectSpread({}, file), {}, {
        response: res
      });
      var files = uploadedFiles.value.concat(newFile);
      setInnerFiles(files, {
        e: event,
        response: res,
        trigger: "upload-success"
      });
      emitEvent("success", {
        file: file,
        fileList: files,
        e: event,
        response: res
      });
      images.value.push(newFile.url);
    };
    var handleError = function handleError(options) {
      var _res3;
      var event = options.event,
        file = options.file,
        response = options.response,
        resFormatted = options.resFormatted;
      file.status = "fail";
      var res = response;
      if (!resFormatted && props.formatResponse && isFunction(props.formatResponse)) {
        res = props.formatResponse(response, {
          file: file
        });
      }
      errorMsg.value = (_res3 = res) === null || _res3 === void 0 ? void 0 : _res3.error;
      if (!uploadedFiles.value.find(function (item) {
        return item.name === file.name;
      })) {
        var files = uploadedFiles.value.concat(file);
        setInnerFiles(files, {
          e: event,
          response: res,
          trigger: "upload-fail"
        });
      }
      emitEvent("fail", {
        e: event,
        file: file
      });
    };
    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {
      UPLOAD_NAME: UPLOAD_NAME,
      images: images,
      showViewer: showViewer,
      initialIndex: initialIndex,
      prefix: prefix,
      innerFiles: innerFiles,
      xhrReq: xhrReq,
      toUploadFiles: toUploadFiles,
      errorMsg: errorMsg,
      inputRef: inputRef,
      uploadedFiles: uploadedFiles,
      deleteBtnContent: deleteBtnContent,
      defaultContent: defaultContent,
      itemStyle: itemStyle,
      itemContentStyle: itemContentStyle,
      emitEvent: emitEvent,
      setInnerFiles: setInnerFiles,
      triggerUpload: triggerUpload,
      handleChange: handleChange,
      handlePreview: handlePreview,
      handleReload: handleReload,
      handleBeforeUpload: handleBeforeUpload,
      handleSizeLimit: handleSizeLimit,
      uploadFiles: uploadFiles,
      handleMockProgress: handleMockProgress,
      handleProgress: handleProgress,
      handleRemove: handleRemove,
      upload: upload,
      handleRequestMethodResponse: handleRequestMethodResponse,
      handleSuccess: handleSuccess,
      handleError: handleError
    });
  }
});

var _hoisted_1 = ["onClick"];
var _hoisted_2 = ["src", "onClick"];
var _hoisted_3 = ["value", "multiple", "accept"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_close_icon = resolveComponent("close-icon");
  var _component_refresh_icon = resolveComponent("refresh-icon");
  var _component_add_icon = resolveComponent("add-icon");
  var _component_t_image_viewer = resolveComponent("t-image-viewer");
  return openBlock(), createElementBlock("div", null, [createElementVNode("ul", {
    class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card"))
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.uploadedFiles, function (file, index) {
    return openBlock(), createElementBlock("li", {
      key: index,
      class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-item")),
      style: normalizeStyle(_ctx.itemStyle)
    }, [createElementVNode("div", {
      class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-content ").concat(_ctx.UPLOAD_NAME, "__card-box")),
      style: normalizeStyle(_ctx.itemContentStyle)
    }, [createElementVNode("div", {
      key: "delete-icon",
      class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-delete-item")),
      onClick: function onClick(e) {
        return _ctx.handleRemove(e, file, index);
      }
    }, [_ctx.deleteBtnContent ? (openBlock(), createBlock(_component_t_node, {
      key: 0,
      content: _ctx.deleteBtnContent
    }, null, 8, ["content"])) : (openBlock(), createBlock(_component_close_icon, {
      key: 1,
      class: "close-icon"
    }))], 10, _hoisted_1), createElementVNode("img", {
      class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-image")),
      src: file.url,
      onClick: function onClick(e) {
        return _ctx.handlePreview(e, file);
      }
    }, null, 10, _hoisted_2), file.status === "fail" ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-mask"))
    }, [createElementVNode("span", {
      key: "refresh-icon",
      class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-mask-item"))
    }, [createVNode(_component_refresh_icon, {
      onClick: function onClick($event) {
        return _ctx.handleReload(file);
      }
    }, null, 8, ["onClick"])], 2)], 2)) : createCommentVNode("", true)], 6)], 6);
  }), 128)), _ctx.defaultContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.triggerUpload && _ctx.triggerUpload.apply(_ctx, arguments);
    })
  }, [createVNode(_component_t_node, {
    content: _ctx.defaultContent
  }, null, 8, ["content"])])) : (openBlock(), createElementBlock("li", {
    key: 1,
    class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-item")),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.triggerUpload && _ctx.triggerUpload.apply(_ctx, arguments);
    })
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.UPLOAD_NAME, "__card-container ").concat(_ctx.UPLOAD_NAME, "__card-box"))
  }, [createVNode(_component_add_icon)], 2)], 2))], 2), createElementVNode("input", {
    ref: "inputRef",
    value: _ctx.files,
    type: "file",
    multiple: _ctx.multiple,
    hidden: "",
    accept: _ctx.accept,
    onChange: _cache[2] || (_cache[2] = function () {
      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
    })
  }, null, 40, _hoisted_3), createVNode(_component_t_image_viewer, {
    images: _ctx.images,
    "onUpdate:images": _cache[3] || (_cache[3] = function ($event) {
      return _ctx.images = $event;
    }),
    modelValue: _ctx.showViewer,
    "onUpdate:modelValue": _cache[4] || (_cache[4] = function ($event) {
      return _ctx.showViewer = $event;
    }),
    "initial-index": _ctx.initialIndex
  }, null, 8, ["images", "modelValue", "initial-index"])]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=upload.js.map
