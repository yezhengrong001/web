{"version":3,"file":"upload.js","sources":["../../src/upload/upload.vue","../../src/upload/upload.vue?vue&type=template&id=0676869e&lang.js"],"sourcesContent":["<template>\n  <div>\n    <ul :class=\"`${UPLOAD_NAME}__card`\">\n      <li v-for=\"(file, index) in uploadedFiles\" :key=\"index\" :class=\"`${UPLOAD_NAME}__card-item`\" :style=\"itemStyle\">\n        <div :class=\"`${UPLOAD_NAME}__card-content ${UPLOAD_NAME}__card-box`\" :style=\"itemContentStyle\">\n          <div\n            key=\"delete-icon\"\n            :class=\"`${UPLOAD_NAME}__card-delete-item`\"\n            @click=\"(e) => handleRemove(e, file, index)\"\n          >\n            <template v-if=\"deleteBtnContent\">\n              <t-node :content=\"deleteBtnContent\"></t-node>\n            </template>\n            <template v-else>\n              <close-icon class=\"close-icon\" />\n            </template>\n          </div>\n          <img :class=\"`${UPLOAD_NAME}__card-image`\" :src=\"file.url\" @click=\"(e) => handlePreview(e, file)\" />\n          <!--上传失败时，reload重试-->\n          <div v-if=\"file.status === 'fail'\" :class=\"`${UPLOAD_NAME}__card-mask`\">\n            <span key=\"refresh-icon\" :class=\"`${UPLOAD_NAME}__card-mask-item`\">\n              <refresh-icon @click=\"handleReload(file)\" />\n            </span>\n          </div>\n        </div>\n      </li>\n      <template v-if=\"defaultContent\">\n        <div @click=\"triggerUpload\">\n          <t-node :content=\"defaultContent\"></t-node>\n        </div>\n      </template>\n      <template v-else>\n        <li :class=\"`${UPLOAD_NAME}__card-item`\" @click=\"triggerUpload\">\n          <div :class=\"`${UPLOAD_NAME}__card-container ${UPLOAD_NAME}__card-box`\">\n            <add-icon></add-icon>\n          </div>\n        </li>\n      </template>\n    </ul>\n    <input\n      ref=\"inputRef\"\n      :value=\"files\"\n      type=\"file\"\n      :multiple=\"multiple\"\n      hidden\n      :accept=\"accept\"\n      @change=\"handleChange\"\n    />\n    <t-image-viewer v-model:images=\"images\" v-model=\"showViewer\" :initial-index=\"initialIndex\"></t-image-viewer>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, SetupContext, getCurrentInstance, ref, Ref, toRefs, computed, ComputedRef } from 'vue';\nimport { AddIcon, CloseIcon, RefreshIcon } from 'tdesign-icons-vue-next';\nimport findIndex from 'lodash/findIndex';\nimport xhr from '../_common/js/upload/xhr';\nimport { useDefault, useEmitEvent, isFunction, isArray, isObject, renderTNode, TNode } from '../shared';\nimport { TdUploadProps, UploadFile, RequestMethodResponse, SizeLimitObj } from './type';\nimport { SuccessContext, InnerProgressContext } from './interface';\nimport UploadProps from './props';\nimport config from '../config';\nimport { isOverSizeLimit } from './util';\nimport TImageViewer from '../image-viewer';\n\nconst { prefix } = config;\nconst name = `${prefix}-upload`;\nexport default defineComponent({\n  name,\n  components: {\n    AddIcon,\n    TNode,\n    CloseIcon,\n    RefreshIcon,\n    TImageViewer,\n  },\n  props: UploadProps,\n  emits: [\n    'update:files',\n    'update:modelValue',\n    'change',\n    'fail',\n    'preview',\n    'progress',\n    'remove',\n    'success',\n    'select-change',\n  ],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [innerFiles, setInnerFiles] = useDefault<TdUploadProps['files'], TdUploadProps>(\n      props,\n      context.emit,\n      'files',\n      'change',\n    );\n    const internalInstance = getCurrentInstance();\n    const defaultContent = computed(() => renderTNode(internalInstance, 'default'));\n    const deleteBtnContent = computed(() => renderTNode(internalInstance, 'deleteBtn'));\n    const images: Ref<Array<string>> = ref([]);\n    const showViewer = ref(false);\n    const initialIndex = ref(0);\n    const UPLOAD_NAME = name;\n    const xhrReq = ref<XMLHttpRequest | null>(null);\n    // 等待上传的文件\n    const toUploadFiles: Ref<Array<UploadFile>> = ref([]);\n    // 上传成功的文件\n    const uploadedFiles: ComputedRef<UploadFile[]> = computed(() => {\n      if (innerFiles.value && isArray(innerFiles.value)) {\n        // 上传失败的文件用localUrl展示，并且可上传重试\n        return innerFiles.value.filter((file) => file.status === 'success' || file.status === 'fail');\n      }\n      return [];\n    });\n    const errorMsg = ref('');\n    const inputRef = ref<null | HTMLInputElement>(null);\n\n    const itemStyle = computed(() => {\n      const { gridConfig } = toRefs(props);\n      let column = 4;\n      if (isObject(gridConfig.value)) {\n        ({ column } = gridConfig.value as any);\n      }\n      return {\n        flexBasis: `${100 / +column}%`,\n      };\n    });\n\n    const itemContentStyle = computed(() => {\n      let width = 80;\n      let height = 80;\n      const { gridConfig } = toRefs(props);\n      if (isObject(gridConfig.value)) {\n        ({ width, height } = gridConfig.value as any);\n      }\n      return {\n        height: `${height}px`,\n        width: `${width}px`,\n      };\n    });\n\n    const triggerUpload = () => {\n      const input = inputRef.value as HTMLInputElement;\n      if (props.disabled) return;\n      input.click();\n    };\n\n    const handlePreview = (e: MouseEvent, file: UploadFile) => {\n      showViewer.value = true;\n      emitEvent('preview', {\n        e,\n        file,\n      });\n    };\n\n    const handleReload = (file: UploadFile) => {\n      uploadFiles([file.fileRaw]);\n    };\n\n    const handleChange = () => {\n      const input = inputRef.value;\n      if (props.disabled || !input || !input.files) return;\n      const formatFiles = formatFileToUploadFile(input.files);\n      emitEvent('select-change', [...formatFiles]);\n      uploadFiles(formatFiles);\n      input.value = '';\n    };\n\n    const formatFileToUploadFile = (files: FileList): File[] => {\n      const { format } = props;\n      if (!format || !isFunction(format)) {\n        const res = [];\n        for (let i = 0; i < files.length; i++) {\n          res.push(files[i]);\n        }\n        return res;\n      }\n\n      const NewFiles = [...files];\n      NewFiles.forEach((item) => {\n        item = format(item) as any;\n      });\n      return NewFiles;\n    };\n\n    const handleBeforeUpload = (file: File | UploadFile): Promise<boolean> => {\n      if (props.beforeUpload && isFunction(props.beforeUpload)) {\n        const beforeUpload = props.beforeUpload(file);\n        if (beforeUpload instanceof Promise) return beforeUpload;\n        return Promise.resolve(beforeUpload);\n      }\n      return new Promise((resolve) => {\n        if (props.sizeLimit) {\n          resolve(handleSizeLimit(file.size));\n        }\n        resolve(true);\n      });\n    };\n\n    const handleSizeLimit = (fileSize: number) => {\n      let sizeLimit: SizeLimitObj;\n      if (typeof props.sizeLimit === 'number') {\n        sizeLimit = { size: props.sizeLimit, unit: 'KB' };\n      } else if (typeof props.sizeLimit === 'object') {\n        sizeLimit = props.sizeLimit;\n      } else {\n        sizeLimit = { size: 0, unit: 'KB' };\n      }\n      const isOverSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);\n      if (isOverSize) {\n        errorMsg.value = sizeLimit.message\n          ? sizeLimit.message\n          : `TDesign Upoad Error: uploaded picture exceeds ${props.sizeLimit}${sizeLimit.unit} restrictions`;\n      }\n      return isOverSize;\n    };\n\n    const uploadFiles = (files: File[]) => {\n      const { max } = toRefs(props);\n      let tmpFiles = [...files];\n      if (max.value) {\n        tmpFiles = tmpFiles.slice(0, max.value - uploadedFiles.value.length);\n        if (tmpFiles.length !== files.length) {\n          console.warn(`TDesign Upload Warn: you can only upload ${max.value} files`);\n        }\n      }\n      tmpFiles.forEach((fileRaw: any) => {\n        const uploadFile: UploadFile = {\n          ...fileRaw,\n          fileRaw,\n          lastModified: fileRaw.lastModified,\n          name: fileRaw.name,\n          size: fileRaw.size,\n          type: fileRaw.type,\n          percent: 0,\n          status: 'waiting',\n        };\n        const reader = new FileReader();\n        reader.readAsDataURL(fileRaw);\n        reader.onload = (event: ProgressEvent<FileReader>) => {\n          uploadFile.url = event.target?.result as string;\n        };\n        handleBeforeUpload(fileRaw).then((canUpload) => {\n          if (!canUpload) return;\n          const newFiles: Array<UploadFile> = toUploadFiles.value.concat();\n\n          // 判断是否为重复文件条件，已选是否存在检验\n          if (props.allowUploadDuplicateFile || !toUploadFiles.value.find((file) => file.name === uploadFile.name)) {\n            newFiles.push(uploadFile);\n          }\n          toUploadFiles.value = newFiles;\n          if (props.autoUpload) {\n            upload(uploadFile);\n          }\n        });\n      });\n    };\n\n    /** 模拟进度条 Mock Progress */\n    const handleMockProgress = (file: UploadFile) => {\n      const timer = setInterval(() => {\n        if (file.status === 'success' || file.percent >= 99) {\n          clearInterval(timer);\n          return;\n        }\n        file.percent += 1;\n        handleProgress({\n          file,\n          percent: file.percent,\n          type: 'mock',\n        });\n      }, 10);\n    };\n\n    const handleProgress = ({ event, file, percent, type = 'real' }: InnerProgressContext) => {\n      if (!file) throw new Error('Error file');\n      file.percent = Math.min(percent, 100);\n      const progressCtx = {\n        percent,\n        e: event,\n        file,\n        type,\n      };\n      emitEvent('progress', progressCtx);\n    };\n\n    const handleRemove = (e: MouseEvent, file: UploadFile, index: number) => {\n      errorMsg.value = '';\n      const files = uploadedFiles.value.concat();\n      files.splice(index, 1);\n      setInnerFiles(files, { e, trigger: 'remove', index, file });\n      emitEvent('remove', { e, index, file });\n      images.value.splice(index, 1);\n    };\n\n    const upload = async (file: UploadFile): Promise<void> => {\n      if (!props.action && !props.requestMethod) {\n        console.error('TDesign Upload Error: one of action and requestMethod must be exist.');\n        return;\n      }\n      errorMsg.value = '';\n      file.status = 'progress';\n      // requestMethod 为父组件定义的自定义上传方法\n      if (props.requestMethod) {\n        handleRequestMethod(file);\n      } else {\n        // 模拟进度条\n        if (props.useMockProgress) {\n          handleMockProgress(file);\n        }\n        const request = xhr;\n        xhrReq.value = request({\n          action: props.action,\n          data: {\n            file: file.fileRaw,\n            ...props.data,\n          },\n          file,\n          method: props.method,\n          headers: props.headers || {},\n          withCredentials: props.withCredentials,\n          onError: handleError,\n          onProgress: handleProgress,\n          onSuccess: handleSuccess,\n        } as any);\n      }\n    };\n\n    const handleRequestMethod = (file: UploadFile) => {\n      if (!isFunction(props.requestMethod)) {\n        console.warn('TDesign Upload Warn: `requestMethod` must be a function.');\n        return;\n      }\n      props.requestMethod?.(file).then((res: RequestMethodResponse) => {\n        if (!handleRequestMethodResponse(res)) return;\n        if (res.status === 'success') {\n          handleSuccess({ file, response: res.response });\n        } else if (res.status === 'fail') {\n          const r = res.response || {};\n          handleError({ event: undefined, file, response: { ...r, error: res.error } });\n        }\n      });\n    };\n\n    const handleRequestMethodResponse = (res: RequestMethodResponse) => {\n      if (!res) {\n        console.error('TDesign Upoad Error: `requestMethodResponse` is required.');\n        return false;\n      }\n      if (!res.status) {\n        console.error(\n          'TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`',\n        );\n        return false;\n      }\n      if (!['success', 'fail'].includes(res.status)) {\n        console.error('TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`');\n        return false;\n      }\n      if (res.status === 'success' && (!res.response || !res.response.url)) {\n        console.warn(\n          'TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`',\n        );\n      }\n      return true;\n    };\n\n    const handleSuccess = ({ event, file, response }: SuccessContext) => {\n      if (!file) throw new Error('Error file');\n      file.status = 'success';\n      let res = response;\n      if (props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file: file as UploadFile });\n      }\n      // 如果返回值存在 error，则认为当前接口上传失败\n      if (res?.error) {\n        handleError({\n          event,\n          file: file as UploadFile,\n          response: res,\n          resFormatted: true,\n        });\n        return;\n      }\n      file.url = res?.url || file.url;\n      // 从待上传文件队列中移除上传成功的文件\n      const index = findIndex(toUploadFiles.value, (o: UploadFile) => o.name === file.name);\n      toUploadFiles.value.splice(index, 1);\n      // 上传成功的文件发送到 files\n      const newFile = { ...file, response: res };\n      const files = uploadedFiles.value.concat(newFile as UploadFile);\n      setInnerFiles(files, { e: event, response: res, trigger: 'upload-success' });\n      emitEvent('success', {\n        file,\n        fileList: files,\n        e: event,\n        response: res,\n      });\n      images.value.push(newFile.url as string);\n    };\n\n    const handleError = (options: {\n      event?: ProgressEvent;\n      file: UploadFile;\n      response?: any;\n      resFormatted?: boolean;\n    }) => {\n      const { event, file, response, resFormatted } = options;\n      file.status = 'fail';\n      let res = response;\n      if (!resFormatted && props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file });\n      }\n      errorMsg.value = res?.error;\n      if (\n        !uploadedFiles.value.find((item) => {\n          return item.name === file.name;\n        })\n      ) {\n        const files = uploadedFiles.value.concat(file);\n        setInnerFiles(files, { e: event, response: res, trigger: 'upload-fail' });\n      }\n      emitEvent('fail', { e: event, file });\n    };\n\n    return {\n      ...toRefs(props),\n      UPLOAD_NAME,\n      images,\n      showViewer,\n      initialIndex,\n      prefix,\n      innerFiles,\n      xhrReq,\n      toUploadFiles,\n      errorMsg,\n      inputRef,\n      uploadedFiles,\n      deleteBtnContent,\n      defaultContent,\n      itemStyle,\n      itemContentStyle,\n      emitEvent,\n      setInnerFiles,\n      triggerUpload,\n      handleChange,\n      handlePreview,\n      handleReload,\n      handleBeforeUpload,\n      handleSizeLimit,\n      uploadFiles,\n      handleMockProgress,\n      handleProgress,\n      handleRemove,\n      upload,\n      handleRequestMethodResponse,\n      handleSuccess,\n      handleError,\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <ul :class=\"`${UPLOAD_NAME}__card`\">\n      <li v-for=\"(file, index) in uploadedFiles\" :key=\"index\" :class=\"`${UPLOAD_NAME}__card-item`\" :style=\"itemStyle\">\n        <div :class=\"`${UPLOAD_NAME}__card-content ${UPLOAD_NAME}__card-box`\" :style=\"itemContentStyle\">\n          <div\n            key=\"delete-icon\"\n            :class=\"`${UPLOAD_NAME}__card-delete-item`\"\n            @click=\"(e) => handleRemove(e, file, index)\"\n          >\n            <template v-if=\"deleteBtnContent\">\n              <t-node :content=\"deleteBtnContent\"></t-node>\n            </template>\n            <template v-else>\n              <close-icon class=\"close-icon\" />\n            </template>\n          </div>\n          <img :class=\"`${UPLOAD_NAME}__card-image`\" :src=\"file.url\" @click=\"(e) => handlePreview(e, file)\" />\n          <!--上传失败时，reload重试-->\n          <div v-if=\"file.status === 'fail'\" :class=\"`${UPLOAD_NAME}__card-mask`\">\n            <span key=\"refresh-icon\" :class=\"`${UPLOAD_NAME}__card-mask-item`\">\n              <refresh-icon @click=\"handleReload(file)\" />\n            </span>\n          </div>\n        </div>\n      </li>\n      <template v-if=\"defaultContent\">\n        <div @click=\"triggerUpload\">\n          <t-node :content=\"defaultContent\"></t-node>\n        </div>\n      </template>\n      <template v-else>\n        <li :class=\"`${UPLOAD_NAME}__card-item`\" @click=\"triggerUpload\">\n          <div :class=\"`${UPLOAD_NAME}__card-container ${UPLOAD_NAME}__card-box`\">\n            <add-icon></add-icon>\n          </div>\n        </li>\n      </template>\n    </ul>\n    <input\n      ref=\"inputRef\"\n      :value=\"files\"\n      type=\"file\"\n      :multiple=\"multiple\"\n      hidden\n      :accept=\"accept\"\n      @change=\"handleChange\"\n    />\n    <t-image-viewer v-model:images=\"images\" v-model=\"showViewer\" :initial-index=\"initialIndex\"></t-image-viewer>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, SetupContext, getCurrentInstance, ref, Ref, toRefs, computed, ComputedRef } from 'vue';\nimport { AddIcon, CloseIcon, RefreshIcon } from 'tdesign-icons-vue-next';\nimport findIndex from 'lodash/findIndex';\nimport xhr from '../_common/js/upload/xhr';\nimport { useDefault, useEmitEvent, isFunction, isArray, isObject, renderTNode, TNode } from '../shared';\nimport { TdUploadProps, UploadFile, RequestMethodResponse, SizeLimitObj } from './type';\nimport { SuccessContext, InnerProgressContext } from './interface';\nimport UploadProps from './props';\nimport config from '../config';\nimport { isOverSizeLimit } from './util';\nimport TImageViewer from '../image-viewer';\n\nconst { prefix } = config;\nconst name = `${prefix}-upload`;\nexport default defineComponent({\n  name,\n  components: {\n    AddIcon,\n    TNode,\n    CloseIcon,\n    RefreshIcon,\n    TImageViewer,\n  },\n  props: UploadProps,\n  emits: [\n    'update:files',\n    'update:modelValue',\n    'change',\n    'fail',\n    'preview',\n    'progress',\n    'remove',\n    'success',\n    'select-change',\n  ],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [innerFiles, setInnerFiles] = useDefault<TdUploadProps['files'], TdUploadProps>(\n      props,\n      context.emit,\n      'files',\n      'change',\n    );\n    const internalInstance = getCurrentInstance();\n    const defaultContent = computed(() => renderTNode(internalInstance, 'default'));\n    const deleteBtnContent = computed(() => renderTNode(internalInstance, 'deleteBtn'));\n    const images: Ref<Array<string>> = ref([]);\n    const showViewer = ref(false);\n    const initialIndex = ref(0);\n    const UPLOAD_NAME = name;\n    const xhrReq = ref<XMLHttpRequest | null>(null);\n    // 等待上传的文件\n    const toUploadFiles: Ref<Array<UploadFile>> = ref([]);\n    // 上传成功的文件\n    const uploadedFiles: ComputedRef<UploadFile[]> = computed(() => {\n      if (innerFiles.value && isArray(innerFiles.value)) {\n        // 上传失败的文件用localUrl展示，并且可上传重试\n        return innerFiles.value.filter((file) => file.status === 'success' || file.status === 'fail');\n      }\n      return [];\n    });\n    const errorMsg = ref('');\n    const inputRef = ref<null | HTMLInputElement>(null);\n\n    const itemStyle = computed(() => {\n      const { gridConfig } = toRefs(props);\n      let column = 4;\n      if (isObject(gridConfig.value)) {\n        ({ column } = gridConfig.value as any);\n      }\n      return {\n        flexBasis: `${100 / +column}%`,\n      };\n    });\n\n    const itemContentStyle = computed(() => {\n      let width = 80;\n      let height = 80;\n      const { gridConfig } = toRefs(props);\n      if (isObject(gridConfig.value)) {\n        ({ width, height } = gridConfig.value as any);\n      }\n      return {\n        height: `${height}px`,\n        width: `${width}px`,\n      };\n    });\n\n    const triggerUpload = () => {\n      const input = inputRef.value as HTMLInputElement;\n      if (props.disabled) return;\n      input.click();\n    };\n\n    const handlePreview = (e: MouseEvent, file: UploadFile) => {\n      showViewer.value = true;\n      emitEvent('preview', {\n        e,\n        file,\n      });\n    };\n\n    const handleReload = (file: UploadFile) => {\n      uploadFiles([file.fileRaw]);\n    };\n\n    const handleChange = () => {\n      const input = inputRef.value;\n      if (props.disabled || !input || !input.files) return;\n      const formatFiles = formatFileToUploadFile(input.files);\n      emitEvent('select-change', [...formatFiles]);\n      uploadFiles(formatFiles);\n      input.value = '';\n    };\n\n    const formatFileToUploadFile = (files: FileList): File[] => {\n      const { format } = props;\n      if (!format || !isFunction(format)) {\n        const res = [];\n        for (let i = 0; i < files.length; i++) {\n          res.push(files[i]);\n        }\n        return res;\n      }\n\n      const NewFiles = [...files];\n      NewFiles.forEach((item) => {\n        item = format(item) as any;\n      });\n      return NewFiles;\n    };\n\n    const handleBeforeUpload = (file: File | UploadFile): Promise<boolean> => {\n      if (props.beforeUpload && isFunction(props.beforeUpload)) {\n        const beforeUpload = props.beforeUpload(file);\n        if (beforeUpload instanceof Promise) return beforeUpload;\n        return Promise.resolve(beforeUpload);\n      }\n      return new Promise((resolve) => {\n        if (props.sizeLimit) {\n          resolve(handleSizeLimit(file.size));\n        }\n        resolve(true);\n      });\n    };\n\n    const handleSizeLimit = (fileSize: number) => {\n      let sizeLimit: SizeLimitObj;\n      if (typeof props.sizeLimit === 'number') {\n        sizeLimit = { size: props.sizeLimit, unit: 'KB' };\n      } else if (typeof props.sizeLimit === 'object') {\n        sizeLimit = props.sizeLimit;\n      } else {\n        sizeLimit = { size: 0, unit: 'KB' };\n      }\n      const isOverSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);\n      if (isOverSize) {\n        errorMsg.value = sizeLimit.message\n          ? sizeLimit.message\n          : `TDesign Upoad Error: uploaded picture exceeds ${props.sizeLimit}${sizeLimit.unit} restrictions`;\n      }\n      return isOverSize;\n    };\n\n    const uploadFiles = (files: File[]) => {\n      const { max } = toRefs(props);\n      let tmpFiles = [...files];\n      if (max.value) {\n        tmpFiles = tmpFiles.slice(0, max.value - uploadedFiles.value.length);\n        if (tmpFiles.length !== files.length) {\n          console.warn(`TDesign Upload Warn: you can only upload ${max.value} files`);\n        }\n      }\n      tmpFiles.forEach((fileRaw: any) => {\n        const uploadFile: UploadFile = {\n          ...fileRaw,\n          fileRaw,\n          lastModified: fileRaw.lastModified,\n          name: fileRaw.name,\n          size: fileRaw.size,\n          type: fileRaw.type,\n          percent: 0,\n          status: 'waiting',\n        };\n        const reader = new FileReader();\n        reader.readAsDataURL(fileRaw);\n        reader.onload = (event: ProgressEvent<FileReader>) => {\n          uploadFile.url = event.target?.result as string;\n        };\n        handleBeforeUpload(fileRaw).then((canUpload) => {\n          if (!canUpload) return;\n          const newFiles: Array<UploadFile> = toUploadFiles.value.concat();\n\n          // 判断是否为重复文件条件，已选是否存在检验\n          if (props.allowUploadDuplicateFile || !toUploadFiles.value.find((file) => file.name === uploadFile.name)) {\n            newFiles.push(uploadFile);\n          }\n          toUploadFiles.value = newFiles;\n          if (props.autoUpload) {\n            upload(uploadFile);\n          }\n        });\n      });\n    };\n\n    /** 模拟进度条 Mock Progress */\n    const handleMockProgress = (file: UploadFile) => {\n      const timer = setInterval(() => {\n        if (file.status === 'success' || file.percent >= 99) {\n          clearInterval(timer);\n          return;\n        }\n        file.percent += 1;\n        handleProgress({\n          file,\n          percent: file.percent,\n          type: 'mock',\n        });\n      }, 10);\n    };\n\n    const handleProgress = ({ event, file, percent, type = 'real' }: InnerProgressContext) => {\n      if (!file) throw new Error('Error file');\n      file.percent = Math.min(percent, 100);\n      const progressCtx = {\n        percent,\n        e: event,\n        file,\n        type,\n      };\n      emitEvent('progress', progressCtx);\n    };\n\n    const handleRemove = (e: MouseEvent, file: UploadFile, index: number) => {\n      errorMsg.value = '';\n      const files = uploadedFiles.value.concat();\n      files.splice(index, 1);\n      setInnerFiles(files, { e, trigger: 'remove', index, file });\n      emitEvent('remove', { e, index, file });\n      images.value.splice(index, 1);\n    };\n\n    const upload = async (file: UploadFile): Promise<void> => {\n      if (!props.action && !props.requestMethod) {\n        console.error('TDesign Upload Error: one of action and requestMethod must be exist.');\n        return;\n      }\n      errorMsg.value = '';\n      file.status = 'progress';\n      // requestMethod 为父组件定义的自定义上传方法\n      if (props.requestMethod) {\n        handleRequestMethod(file);\n      } else {\n        // 模拟进度条\n        if (props.useMockProgress) {\n          handleMockProgress(file);\n        }\n        const request = xhr;\n        xhrReq.value = request({\n          action: props.action,\n          data: {\n            file: file.fileRaw,\n            ...props.data,\n          },\n          file,\n          method: props.method,\n          headers: props.headers || {},\n          withCredentials: props.withCredentials,\n          onError: handleError,\n          onProgress: handleProgress,\n          onSuccess: handleSuccess,\n        } as any);\n      }\n    };\n\n    const handleRequestMethod = (file: UploadFile) => {\n      if (!isFunction(props.requestMethod)) {\n        console.warn('TDesign Upload Warn: `requestMethod` must be a function.');\n        return;\n      }\n      props.requestMethod?.(file).then((res: RequestMethodResponse) => {\n        if (!handleRequestMethodResponse(res)) return;\n        if (res.status === 'success') {\n          handleSuccess({ file, response: res.response });\n        } else if (res.status === 'fail') {\n          const r = res.response || {};\n          handleError({ event: undefined, file, response: { ...r, error: res.error } });\n        }\n      });\n    };\n\n    const handleRequestMethodResponse = (res: RequestMethodResponse) => {\n      if (!res) {\n        console.error('TDesign Upoad Error: `requestMethodResponse` is required.');\n        return false;\n      }\n      if (!res.status) {\n        console.error(\n          'TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`',\n        );\n        return false;\n      }\n      if (!['success', 'fail'].includes(res.status)) {\n        console.error('TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`');\n        return false;\n      }\n      if (res.status === 'success' && (!res.response || !res.response.url)) {\n        console.warn(\n          'TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`',\n        );\n      }\n      return true;\n    };\n\n    const handleSuccess = ({ event, file, response }: SuccessContext) => {\n      if (!file) throw new Error('Error file');\n      file.status = 'success';\n      let res = response;\n      if (props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file: file as UploadFile });\n      }\n      // 如果返回值存在 error，则认为当前接口上传失败\n      if (res?.error) {\n        handleError({\n          event,\n          file: file as UploadFile,\n          response: res,\n          resFormatted: true,\n        });\n        return;\n      }\n      file.url = res?.url || file.url;\n      // 从待上传文件队列中移除上传成功的文件\n      const index = findIndex(toUploadFiles.value, (o: UploadFile) => o.name === file.name);\n      toUploadFiles.value.splice(index, 1);\n      // 上传成功的文件发送到 files\n      const newFile = { ...file, response: res };\n      const files = uploadedFiles.value.concat(newFile as UploadFile);\n      setInnerFiles(files, { e: event, response: res, trigger: 'upload-success' });\n      emitEvent('success', {\n        file,\n        fileList: files,\n        e: event,\n        response: res,\n      });\n      images.value.push(newFile.url as string);\n    };\n\n    const handleError = (options: {\n      event?: ProgressEvent;\n      file: UploadFile;\n      response?: any;\n      resFormatted?: boolean;\n    }) => {\n      const { event, file, response, resFormatted } = options;\n      file.status = 'fail';\n      let res = response;\n      if (!resFormatted && props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file });\n      }\n      errorMsg.value = res?.error;\n      if (\n        !uploadedFiles.value.find((item) => {\n          return item.name === file.name;\n        })\n      ) {\n        const files = uploadedFiles.value.concat(file);\n        setInnerFiles(files, { e: event, response: res, trigger: 'upload-fail' });\n      }\n      emitEvent('fail', { e: event, file });\n    };\n\n    return {\n      ...toRefs(props),\n      UPLOAD_NAME,\n      images,\n      showViewer,\n      initialIndex,\n      prefix,\n      innerFiles,\n      xhrReq,\n      toUploadFiles,\n      errorMsg,\n      inputRef,\n      uploadedFiles,\n      deleteBtnContent,\n      defaultContent,\n      itemStyle,\n      itemContentStyle,\n      emitEvent,\n      setInnerFiles,\n      triggerUpload,\n      handleChange,\n      handlePreview,\n      handleReload,\n      handleBeforeUpload,\n      handleSizeLimit,\n      uploadFiles,\n      handleMockProgress,\n      handleProgress,\n      handleRemove,\n      upload,\n      handleRequestMethodResponse,\n      handleSuccess,\n      handleError,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","AddIcon","TNode","CloseIcon","RefreshIcon","TImageViewer","props","UploadProps","emits","setup","context","emitEvent","useEmitEvent","emit","useDefault","innerFiles","setInnerFiles","internalInstance","getCurrentInstance","defaultContent","computed","renderTNode","deleteBtnContent","images","ref","showViewer","initialIndex","UPLOAD_NAME","xhrReq","toUploadFiles","uploadedFiles","value","isArray","filter","file","status","errorMsg","inputRef","itemStyle","toRefs","gridConfig","column","isObject","flexBasis","itemContentStyle","width","height","triggerUpload","input","disabled","click","handlePreview","e","handleReload","uploadFiles","fileRaw","handleChange","files","formatFiles","formatFileToUploadFile","format","isFunction","res","i","length","push","NewFiles","forEach","item","handleBeforeUpload","beforeUpload","Promise","resolve","sizeLimit","handleSizeLimit","size","fileSize","unit","isOverSize","isOverSizeLimit","message","max","tmpFiles","slice","console","warn","uploadFile","lastModified","type","percent","reader","FileReader","readAsDataURL","onload","event","url","target","result","then","canUpload","newFiles","concat","allowUploadDuplicateFile","find","autoUpload","upload","handleMockProgress","timer","setInterval","clearInterval","handleProgress","Error","Math","min","progressCtx","handleRemove","index","splice","trigger","action","requestMethod","error","handleRequestMethod","useMockProgress","request","xhr","data","method","headers","withCredentials","onError","handleError","onProgress","onSuccess","handleSuccess","handleRequestMethodResponse","response","r","includes","formatResponse","resFormatted","findIndex","o","newFile","fileList","options","_createElementBlock","_createElementVNode","class","_ctx","_openBlock","_Fragment","_renderList","key","style","_normalizeClass","onClick","_createBlock","_component_t_node","content","_component_close_icon","src","_createVNode","_component_refresh_icon","$event","_component_add_icon","multiple","hidden","accept","onChange","_component_t_image_viewer"],"mappings":"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"}