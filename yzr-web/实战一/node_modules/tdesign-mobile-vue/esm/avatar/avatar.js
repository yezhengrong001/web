/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, inject, computed, ref, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createVNode, createCommentVNode } from 'vue';
import _Badge from '../badge/index.js';
import config from '../config.js';
import AvatarProps from './props.js';
import ClASSNAMES from '../shared/constants.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { renderContent, renderTNode } from '../shared/render.js';
import '../badge/badge.js';
import '@babel/runtime/helpers/slicedToArray';
import '../badge/props.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '../badge/style';
import '../badge/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-avatar");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent,
    TBadge: _Badge
  },
  props: AvatarProps,
  emits: ["error"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var internalInstance = getCurrentInstance();
    var avatarGroupProps = inject("avatarGroup", {});
    var avatarContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var iconContent = computed(function () {
      return renderTNode(internalInstance, "icon");
    });
    var sizeValue = ref(props.size || avatarGroupProps && avatarGroupProps.size);
    var avatarClass = computed(function () {
      return ["".concat(name), sizeValue.value ? ClASSNAMES.SIZE[sizeValue.value] : "", _defineProperty({}, "".concat(name, "--").concat(props.shape), props.shape)];
    });
    var isCustomSize = computed(function () {
      return sizeValue.value && !ClASSNAMES.SIZE[sizeValue.value];
    });
    var customSize = computed(function () {
      return isCustomSize.value ? {
        height: sizeValue.value,
        width: sizeValue.value
      } : {};
    });
    var handleImgLoadError = function handleImgLoadError(e) {
      emitEvent("error", e);
    };
    return _objectSpread(_objectSpread({
      name: name
    }, toRefs(props)), {}, {
      avatarContent: avatarContent,
      iconContent: iconContent,
      avatarClass: avatarClass,
      customSize: customSize,
      handleImgLoadError: handleImgLoadError
    });
  }
});

var _hoisted_1 = ["src", "alt"];
var _hoisted_2 = {
  key: 2
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_t_badge = resolveComponent("t-badge");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.avatarClass),
    style: normalizeStyle(_ctx.customSize)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__inner"))
  }, [_ctx.image && !_ctx.hideOnLoadFailed ? (openBlock(), createElementBlock("img", {
    key: 0,
    src: _ctx.image,
    alt: _ctx.alt,
    style: normalizeStyle(_ctx.customSize),
    onError: _cache[0] || (_cache[0] = function () {
      return _ctx.handleImgLoadError && _ctx.handleImgLoadError.apply(_ctx, arguments);
    })
  }, null, 44, _hoisted_1)) : _ctx.iconContent !== void 0 ? (openBlock(), createElementBlock("div", {
    key: 1,
    class: normalizeClass("".concat(_ctx.name, "__icon"))
  }, [createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2)) : (openBlock(), createElementBlock("span", _hoisted_2, [createVNode(_component_t_node, {
    content: _ctx.avatarContent
  }, null, 8, ["content"])]))], 2), _ctx.badgeProps ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__badge"))
  }, [createVNode(_component_t_badge, {
    count: _ctx.badgeProps.count,
    "max-count": _ctx.badgeProps.maxCount,
    dot: _ctx.badgeProps.dot,
    content: _ctx.badgeProps.content,
    size: _ctx.badgeProps.size,
    offset: _ctx.badgeProps.offset
  }, null, 8, ["count", "max-count", "dot", "content", "size", "offset"])], 2)) : createCommentVNode("", true)], 6);
}

script.render = render;

export { script as default };
//# sourceMappingURL=avatar.js.map
