{"version":3,"file":"avatar-group.js","sources":["../../src/avatar/avatar-group.vue","../../src/avatar/avatar-group.vue?vue&type=template&id=4a7942c6&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\">\n    <component :is=\"avatarItems\" />\n    <avatar v-if=\"isShowEllipsisContent\" :size=\"size\">\n      <t-node :content=\"ellipsisContent\"></t-node>\n    </avatar>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, Fragment, getCurrentInstance, provide, ref } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport AvatarGroupProps from './avatar-group-props';\nimport { TdAvatarProps } from './type';\nimport config from '../config';\nimport Avatar from './avatar.vue';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar-group`;\n\nexport default defineComponent({\n  name,\n  components: {\n    Avatar,\n    TNode,\n  },\n  props: AvatarGroupProps,\n  setup(props, { slots }) {\n    provide('avatarGroup', { ...props });\n\n    const internalInstance = getCurrentInstance();\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-avatar--offset-right`]: props.cascading === 'right-up',\n        [`${prefix}-avatar--offset-left`]: props.cascading === 'left-up',\n      },\n    ]);\n\n    const isShowEllipsisContent = ref(false);\n    const ellipsisContent = ref(null);\n    const size = ref(props.size);\n\n    const collapseAvatar = computed(() => renderTNode(internalInstance, 'collapseAvatar'));\n\n    const avatarItems = () => {\n      const childContent: any[] = slots.default ? slots.default() : [];\n      const children: TdAvatarProps[] = [];\n      childContent.forEach((child) => {\n        if (child.type === Fragment) {\n          children.push(...child.children);\n        } else {\n          children.push(child);\n        }\n      });\n      let childrenShow: TdAvatarProps[] = [];\n      const max = props.max || 0;\n      if (max && max < children.length) {\n        childrenShow = children.slice(0, max);\n        isShowEllipsisContent.value = true;\n        ellipsisContent.value = collapseAvatar.value || `+${children.length - max}`;\n      } else {\n        childrenShow = children;\n      }\n      size.value = childrenShow[0].size || props.size;\n      return childrenShow;\n    };\n    return {\n      classes,\n      size,\n      isShowEllipsisContent,\n      ellipsisContent,\n      avatarItems,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\">\n    <component :is=\"avatarItems\" />\n    <avatar v-if=\"isShowEllipsisContent\" :size=\"size\">\n      <t-node :content=\"ellipsisContent\"></t-node>\n    </avatar>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, Fragment, getCurrentInstance, provide, ref } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport AvatarGroupProps from './avatar-group-props';\nimport { TdAvatarProps } from './type';\nimport config from '../config';\nimport Avatar from './avatar.vue';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar-group`;\n\nexport default defineComponent({\n  name,\n  components: {\n    Avatar,\n    TNode,\n  },\n  props: AvatarGroupProps,\n  setup(props, { slots }) {\n    provide('avatarGroup', { ...props });\n\n    const internalInstance = getCurrentInstance();\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-avatar--offset-right`]: props.cascading === 'right-up',\n        [`${prefix}-avatar--offset-left`]: props.cascading === 'left-up',\n      },\n    ]);\n\n    const isShowEllipsisContent = ref(false);\n    const ellipsisContent = ref(null);\n    const size = ref(props.size);\n\n    const collapseAvatar = computed(() => renderTNode(internalInstance, 'collapseAvatar'));\n\n    const avatarItems = () => {\n      const childContent: any[] = slots.default ? slots.default() : [];\n      const children: TdAvatarProps[] = [];\n      childContent.forEach((child) => {\n        if (child.type === Fragment) {\n          children.push(...child.children);\n        } else {\n          children.push(child);\n        }\n      });\n      let childrenShow: TdAvatarProps[] = [];\n      const max = props.max || 0;\n      if (max && max < children.length) {\n        childrenShow = children.slice(0, max);\n        isShowEllipsisContent.value = true;\n        ellipsisContent.value = collapseAvatar.value || `+${children.length - max}`;\n      } else {\n        childrenShow = children;\n      }\n      size.value = childrenShow[0].size || props.size;\n      return childrenShow;\n    };\n    return {\n      classes,\n      size,\n      isShowEllipsisContent,\n      ellipsisContent,\n      avatarItems,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","Avatar","TNode","props","AvatarGroupProps","setup","slots","provide","internalInstance","getCurrentInstance","classes","computed","cascading","isShowEllipsisContent","ref","ellipsisContent","size","collapseAvatar","renderTNode","avatarItems","childContent","default","children","forEach","child","type","Fragment","push","childrenShow","max","length","slice","value","_createElementBlock","class","_ctx","_openBlock","_createBlock","_resolveDynamicComponent","_component_avatar","_createVNode","_component_t_node","content"],"mappings":"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"}