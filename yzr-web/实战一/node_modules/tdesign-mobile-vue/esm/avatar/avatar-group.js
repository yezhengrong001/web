/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, provide, getCurrentInstance, computed, ref, Fragment, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, resolveDynamicComponent, withCtx, createVNode, createCommentVNode } from 'vue';
import '../shared/index.js';
import AvatarGroupProps from './avatar-group-props.js';
import config from '../config.js';
import script$1 from './avatar.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '../badge/index.js';
import '../badge/badge.js';
import '@babel/runtime/helpers/slicedToArray';
import '../badge/props.js';
import '../badge/style';
import '../badge/type.js';
import './props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-avatar-group");
var script = defineComponent({
  name: name,
  components: {
    Avatar: script$1,
    TNode: TNodeComponent
  },
  props: AvatarGroupProps,
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    provide("avatarGroup", _objectSpread({}, props));
    var internalInstance = getCurrentInstance();
    var classes = computed(function () {
      var _ref2;
      return ["".concat(name), (_ref2 = {}, _defineProperty(_ref2, "".concat(prefix, "-avatar--offset-right"), props.cascading === "right-up"), _defineProperty(_ref2, "".concat(prefix, "-avatar--offset-left"), props.cascading === "left-up"), _ref2)];
    });
    var isShowEllipsisContent = ref(false);
    var ellipsisContent = ref(null);
    var size = ref(props.size);
    var collapseAvatar = computed(function () {
      return renderTNode(internalInstance, "collapseAvatar");
    });
    var avatarItems = function avatarItems() {
      var childContent = slots.default ? slots.default() : [];
      var children = [];
      childContent.forEach(function (child) {
        if (child.type === Fragment) {
          children.push.apply(children, _toConsumableArray(child.children));
        } else {
          children.push(child);
        }
      });
      var childrenShow = [];
      var max = props.max || 0;
      if (max && max < children.length) {
        childrenShow = children.slice(0, max);
        isShowEllipsisContent.value = true;
        ellipsisContent.value = collapseAvatar.value || "+".concat(children.length - max);
      } else {
        childrenShow = children;
      }
      size.value = childrenShow[0].size || props.size;
      return childrenShow;
    };
    return {
      classes: classes,
      size: size,
      isShowEllipsisContent: isShowEllipsisContent,
      ellipsisContent: ellipsisContent,
      avatarItems: avatarItems
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_avatar = resolveComponent("avatar");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.avatarItems))), _ctx.isShowEllipsisContent ? (openBlock(), createBlock(_component_avatar, {
    key: 0,
    size: _ctx.size
  }, {
    default: withCtx(function () {
      return [createVNode(_component_t_node, {
        content: _ctx.ellipsisContent
      }, null, 8, ["content"])];
    }),
    _: 1
  }, 8, ["size"])) : createCommentVNode("", true)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=avatar-group.js.map
