/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode } from 'vue';
import '../shared/index.js';
import DividerProps from './props.js';
import config from '../config.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderContent } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-divider");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: DividerProps,
  setup: function setup(props) {
    var internalInstance = getCurrentInstance();
    var dividerContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var dividerClass = computed(function () {
      var _ref;
      return ["".concat(name), "".concat(name, "--hairline"), (_ref = {}, _defineProperty(_ref, "".concat(name, "--content-").concat(props.align), dividerContent.value), _defineProperty(_ref, "".concat(name, "--dashed"), props.dashed), _defineProperty(_ref, "".concat(name, "-vertical"), props.layout === "vertical"), _ref)];
    });
    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {
      dividerContent: dividerContent,
      dividerClass: dividerClass
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    role: "separator",
    class: normalizeClass(_ctx.dividerClass),
    style: normalizeStyle("border-color:".concat(_ctx.lineColor))
  }, [createVNode(_component_t_node, {
    content: _ctx.dividerContent
  }, null, 8, ["content"])], 6);
}

script.render = render;

export { script as default };
//# sourceMappingURL=divider.js.map
