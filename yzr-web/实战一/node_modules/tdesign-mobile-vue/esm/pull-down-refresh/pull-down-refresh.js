/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, ref, toRefs, watch, onUnmounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, withModifiers, createVNode, mergeProps, toDisplayString, renderSlot } from 'vue';
import { useElementSize } from '@vueuse/core';
import PullDownRefreshProps from './props.js';
import '../shared/index.js';
import config from '../config.js';
import _Loading from '../loading/index.js';
import { useTouch, isReachTop, easeDistance } from './useTouch.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../loading/style';
import '../loading/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-pull-down-refresh");
var ANIMATION_DURATION = 300;
var statusName = ["pulling", "loosing", "loading", "success", "initial"];
var script = defineComponent({
  name: name,
  components: {
    TLoading: _Loading
  },
  props: PullDownRefreshProps,
  emits: ["refresh", "timeout", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var _props$loadingTexts;
    var emitEvent = useEmitEvent(props, context.emit);
    var trackStyle = computed(function () {
      return {
        transitionDuration: "".concat(ANIMATION_DURATION, "ms"),
        transform: "translate3d(0, ".concat(distance.value, "px, 0)")
      };
    });
    var loadingBarStyles = computed(function () {
      return {
        height: typeof props.loadingBarHeight === "number" ? "".concat(props.loadingBarHeight, "px") : props.loadingBarHeight
      };
    });
    var maxBarStyles = computed(function () {
      return {
        height: typeof props.maxBarHeight === "number" ? "".concat(props.maxBarHeight, "px") : props.maxBarHeight
      };
    });
    var loadingIconProps = computed(function () {
      return _objectSpread({}, props.loadingProps);
    });
    var isLoading = ref(false);
    var distance = ref(0);
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      statusValue = _useVModel2[0],
      setStatusValue = _useVModel2[1];
    var status = computed(function () {
      if (!statusValue.value && isLoading.value) {
        return "success";
      }
      if (!statusValue.value || distance.value === 0) {
        return "initial";
      }
      if (distance.value < loadingBarHeight.value) {
        return "pulling";
      }
      if (isLoading.value) {
        return "loading";
      }
      return "loosing";
    });
    watch(status, function (newVal) {
      if (newVal === "success" || newVal === "initial") {
        setTimeout(function () {
          distance.value = 0;
          isLoading.value = false;
        }, 300);
      }
    });
    var loadingTexts = ref((_props$loadingTexts = props.loadingTexts) !== null && _props$loadingTexts !== void 0 && _props$loadingTexts.length ? props.loadingTexts : ["\u4E0B\u62C9\u5237\u65B0", "\u677E\u624B\u5237\u65B0", "\u6B63\u5728\u5237\u65B0", "\u5237\u65B0\u5B8C\u6210"]);
    var loadingText = computed(function () {
      var index = statusName.indexOf(status.value);
      return index >= 0 ? loadingTexts.value[index] : "";
    });
    var touch = useTouch();
    var loadingBar = ref(null);
    var maxBar = ref(null);
    var _useElementSize = useElementSize(loadingBar),
      loadingBarHeight = _useElementSize.height;
    var _useElementSize2 = useElementSize(maxBar),
      maxBarHeight = _useElementSize2.height;
    var onTouchStart = function onTouchStart(e) {
      if (!isReachTop(e) || isLoading.value) return;
      setStatusValue(true);
      distance.value = 0;
      touch.start(e);
    };
    var onTouchMove = function onTouchMove(e) {
      if (!isReachTop(e) || isLoading.value) return;
      var deltaY = touch.deltaY;
      var nextDistance = easeDistance(deltaY.value, loadingBarHeight.value);
      if (deltaY.value > 0) {
        e.preventDefault();
      }
      if (nextDistance >= 0 && nextDistance < maxBarHeight.value) {
        distance.value = nextDistance;
      }
      touch.move(e);
    };
    var timer = null;
    var onTouchEnd = function onTouchEnd(e) {
      if (!isReachTop(e) || isLoading.value) return;
      if (status.value === "loosing") {
        distance.value = loadingBarHeight.value;
        isLoading.value = true;
        emitEvent("refresh");
        timer = setTimeout(function () {
          if (isLoading.value) {
            emitEvent("timeout");
            setStatusValue(false);
          }
        }, props.refreshTimeout);
      } else {
        setStatusValue(false);
      }
    };
    onUnmounted(function () {
      clearTimeout(timer);
    });
    return {
      name: name,
      status: status,
      trackStyle: trackStyle,
      loadingText: loadingText,
      maxBarStyles: maxBarStyles,
      loadingBarStyles: loadingBarStyles,
      loadingIconProps: loadingIconProps,
      loadingBar: loadingBar,
      maxBar: maxBar,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd
    };
  }
});

var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 1
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_loading = resolveComponent("t-loading");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.name)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__track")),
    style: normalizeStyle(_ctx.trackStyle),
    onTouchstart: _cache[0] || (_cache[0] = withModifiers(function () {
      return _ctx.onTouchStart && _ctx.onTouchStart.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchmove: _cache[1] || (_cache[1] = withModifiers(function () {
      return _ctx.onTouchMove && _ctx.onTouchMove.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchend: _cache[2] || (_cache[2] = withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"])),
    onTouchcancel: _cache[3] || (_cache[3] = withModifiers(function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }, ["stop"]))
  }, [createElementVNode("div", {
    ref: "maxBar",
    class: normalizeClass("".concat(_ctx.name, "__max")),
    style: normalizeStyle(_ctx.maxBarStyles)
  }, [createElementVNode("div", {
    ref: "loadingBar",
    class: normalizeClass("".concat(_ctx.name, "__loading")),
    style: normalizeStyle(_ctx.loadingBarStyles)
  }, [_ctx.status === "loading" ? (openBlock(), createElementBlock("div", _hoisted_1, [createVNode(_component_t_loading, mergeProps({
    text: _ctx.loadingText,
    class: "".concat(_ctx.name, "__loading-icon")
  }, _ctx.loadingIconProps), null, 16, ["text", "class"])])) : (openBlock(), createElementBlock("div", _hoisted_2, toDisplayString(_ctx.loadingText), 1))], 6)], 6), renderSlot(_ctx.$slots, "default")], 38)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=pull-down-refresh.js.map
