/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { LoadingIcon, CheckCircleIcon, ErrorCircleIcon } from 'tdesign-icons-vue-next';
import { defineComponent, getCurrentInstance, computed, h, ref, toRefs, resolveComponent, openBlock, createElementBlock, createVNode, normalizeProps, guardReactiveProps, createElementVNode, normalizeClass, createCommentVNode } from 'vue';
import '../shared/index.js';
import Overlay from '../overlay/index.js';
import ToastProps from './props.js';
import config from '../config.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../overlay/style';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-toast");
var script = defineComponent({
  name: name,
  components: {
    TOverlay: Overlay,
    TNode: TNodeComponent
  },
  props: ToastProps,
  setup: function setup(props) {
    var toastTypeIcon = {
      loading: LoadingIcon,
      success: CheckCircleIcon,
      fail: ErrorCircleIcon
    };
    var internalInstance = getCurrentInstance();
    var messageContent = computed(function () {
      return renderTNode(internalInstance, "message");
    });
    var iconContent = computed(function () {
      var iconNode = renderTNode(internalInstance, "icon");
      if (iconNode === void 0 && props.theme) {
        iconNode = h(toastTypeIcon[props.theme]);
      }
      return iconNode;
    });
    var classes = computed(function () {
      var _ref;
      return ["".concat(name), (_ref = {}, _defineProperty(_ref, "".concat(name, "--").concat(props.direction), props.direction), _defineProperty(_ref, "".concat(name, "--text"), !iconContent.value), _defineProperty(_ref, "".concat(name, "--icononly"), !messageContent.value && iconContent.value), _defineProperty(_ref, "".concat(name, "--top"), props.placement === "top"), _defineProperty(_ref, "".concat(name, "--middle"), props.placement === "middle"), _defineProperty(_ref, "".concat(name, "--bottom"), props.placement === "bottom"), _ref)];
    });
    var customOverlayProps = computed(function () {
      var toastOverlayProps = {
        preventScrollThrough: props.preventScrollThrough,
        visible: props.showOverlay
      };
      return _objectSpread(_objectSpread({}, props.overlayProps), toastOverlayProps);
    });
    return _objectSpread({
      name: ref(name),
      classes: classes,
      iconContent: iconContent,
      messageContent: messageContent,
      customOverlayProps: customOverlayProps
    }, toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = resolveComponent("t-overlay");
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", null, [createVNode(_component_t_overlay, normalizeProps(guardReactiveProps(_ctx.customOverlayProps)), null, 16), createElementVNode("div", {
    class: normalizeClass(_ctx.classes)
  }, [createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"]), _ctx.messageContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__text"))
  }, [createVNode(_component_t_node, {
    content: _ctx.messageContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 2)]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=toast.js.map
