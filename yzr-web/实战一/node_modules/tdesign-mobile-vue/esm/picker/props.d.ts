import { TdPickerProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    cancelBtn: {
        type: PropType<string | import("../button").TdButtonProps | undefined>;
        default: string;
    };
    columns: {
        type: PropType<import("./type").PickerColumn[] | ((item: import("./type").PickerValue[]) => import("./type").PickerColumn[])>;
        default: () => TdPickerProps['columns'];
        required: boolean;
    };
    confirmBtn: {
        type: PropType<string | import("../button").TdButtonProps | undefined>;
        default: string;
    };
    renderLabel: {
        type: PropType<((item: import("./type").PickerColumnItem) => string) | undefined>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: PropType<import("./type").PickerValue[] | undefined>;
    };
    modelValue: {
        type: PropType<import("./type").PickerValue[] | undefined>;
    };
    defaultValue: {
        type: PropType<import("./type").PickerValue[] | undefined>;
    };
    visible: BooleanConstructor;
    onCancel: PropType<((context: {
        e: MouseEvent;
    }) => void) | undefined>;
    onChange: PropType<((value: import("./type").PickerValue[], context: {
        columns: import("./type").PickerContext[];
        e: MouseEvent;
    }) => void) | undefined>;
    onConfirm: PropType<((value: import("./type").PickerValue[], context: {
        index: number[];
    }) => void) | undefined>;
    onPick: PropType<((value: import("./type").PickerValue[], context: import("./type").PickerContext) => void) | undefined>;
};
export default _default;
