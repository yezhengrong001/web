declare const _default: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: number;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[] | undefined>;
    };
    shape: {
        type: import("vue").PropType<"circle" | "round" | "ribbon" | undefined>;
        default: "circle" | "round" | "ribbon" | undefined;
        validator(val: "circle" | "round" | "ribbon" | undefined): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | undefined>;
        default: "small" | "medium" | undefined;
        validator(val: "small" | "medium" | undefined): boolean;
    };
}, {
    countContent: import("vue").ComputedRef<any>;
    content: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    color: import("vue").Ref<string>;
    count: import("vue").Ref<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    offset: import("vue").Ref<(string | number)[] | undefined>;
    shape: import("vue").Ref<"circle" | "round" | "ribbon" | undefined>;
    size: import("vue").Ref<"small" | "medium" | undefined>;
    dot: import("vue").Ref<boolean>;
    maxCount: import("vue").Ref<number>;
    showZero: import("vue").Ref<boolean>;
    badgeContent: import("vue").ComputedRef<any>;
    showDot: import("vue").ComputedRef<boolean>;
    badgeStyles: import("vue").ComputedRef<{
        background: string;
        right?: undefined;
        top?: undefined;
    } | {
        background: string;
        right: string | number;
        top: string | number;
    }>;
    badgeClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    badgeInnerClasses: import("vue").ComputedRef<{
        [x: string]: boolean | "small" | "medium" | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: number;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[] | undefined>;
    };
    shape: {
        type: import("vue").PropType<"circle" | "round" | "ribbon" | undefined>;
        default: "circle" | "round" | "ribbon" | undefined;
        validator(val: "circle" | "round" | "ribbon" | undefined): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | undefined>;
        default: "small" | "medium" | undefined;
        validator(val: "small" | "medium" | undefined): boolean;
    };
}>>, {
    color: string;
    count: string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined;
    shape: "circle" | "round" | "ribbon" | undefined;
    size: "small" | "medium" | undefined;
    dot: boolean;
    maxCount: number;
    showZero: boolean;
}>;
export default _default;
