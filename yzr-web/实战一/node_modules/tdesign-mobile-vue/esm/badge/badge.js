/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, createCommentVNode } from 'vue';
import '../shared/index.js';
import BadgeProps from './props.js';
import config from '../config.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderContent, renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-badge");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: BadgeProps,
  setup: function setup(props) {
    var internalInstance = getCurrentInstance();
    var badgeContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var countContent = computed(function () {
      if (props.dot) {
        return "";
      }
      if (typeof props.count === "function") {
        return renderTNode(internalInstance, "count");
      }
      var count = Number(props.count);
      if (isNaN(count)) {
        return props.count;
      }
      return count > props.maxCount ? "".concat(props.maxCount, "+") : count;
    });
    var isIndependent = computed(function () {
      return badgeContent.value === void 0;
    });
    var showDot = computed(function () {
      return props.dot || props.count !== 0 || props.showZero;
    });
    var badgeClasses = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name), true), _defineProperty(_ref, "".concat(name, "__ribbon--outer"), props.shape === "ribbon"), _ref;
    });
    var badgeInnerClasses = computed(function () {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(name, "__inner"), true), _defineProperty(_ref2, "".concat(name, "--has-children"), !isIndependent.value), _defineProperty(_ref2, "".concat(name, "--").concat(props.size), props.size), _defineProperty(_ref2, "".concat(name, "--").concat(props.shape), props.shape && !props.dot), _defineProperty(_ref2, "".concat(name, "--dot"), props.dot), _ref2;
    });
    var badgeStyles = computed(function () {
      if (!props.offset) {
        return {
          background: props.color
        };
      }
      var _props$offset = _slicedToArray(props.offset, 2),
        xOffset = _props$offset[0],
        yOffset = _props$offset[1];
      xOffset = isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
      yOffset = isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
      return {
        background: props.color,
        right: xOffset,
        top: yOffset
      };
    });
    return _objectSpread(_objectSpread({
      badgeContent: badgeContent,
      showDot: showDot,
      badgeStyles: badgeStyles,
      badgeClasses: badgeClasses,
      badgeInnerClasses: badgeInnerClasses
    }, toRefs(props)), {}, {
      countContent: countContent
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.badgeClasses)
  }, [_ctx.showDot ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass(_ctx.badgeInnerClasses),
    style: normalizeStyle(_ctx.badgeStyles)
  }, [createVNode(_component_t_node, {
    content: _ctx.countContent
  }, null, 8, ["content"])], 6)) : createCommentVNode("", true), createVNode(_component_t_node, {
    content: _ctx.badgeContent
  }, null, 8, ["content"])], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=badge.js.map
