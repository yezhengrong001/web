import { h } from 'vue';
declare const _default: import("vue").DefineComponent<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: import("vue").PropType<((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down" | undefined>;
        default: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
        validator(val: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined): boolean;
    };
    lazy: BooleanConstructor;
    loading: {
        type: import("vue").PropType<((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<"circle" | "round" | "square" | undefined>;
        default: "circle" | "round" | "square" | undefined;
        validator(val: "circle" | "round" | "square" | undefined): boolean;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<(() => void) | undefined>;
    onLoad: import("vue").PropType<(() => void) | undefined>;
}, {
    imageDOM: import("vue").Ref<any>;
    statusContent: import("vue").ComputedRef<any>;
    name: string;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    imageStyles: import("vue").ComputedRef<{
        objectFit: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
        objectPosition: string;
    }>;
    loadingValue: import("vue").Ref<boolean>;
    realSrc: import("vue").Ref<string>;
    errorValue: import("vue").Ref<boolean>;
    handleImgLoadCompleted: (e: Event) => void;
    handleImgLoadError: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: import("vue").PropType<((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down" | undefined>;
        default: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
        validator(val: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined): boolean;
    };
    lazy: BooleanConstructor;
    loading: {
        type: import("vue").PropType<((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<"circle" | "round" | "square" | undefined>;
        default: "circle" | "round" | "square" | undefined;
        validator(val: "circle" | "round" | "square" | undefined): boolean;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<(() => void) | undefined>;
    onLoad: import("vue").PropType<(() => void) | undefined>;
}>>, {
    lazy: boolean;
    shape: "circle" | "round" | "square" | undefined;
    alt: string;
    position: string;
    fit: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
    src: string;
}>;
export default _default;
