/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, toRefs, computed, provide, openBlock, createElementBlock, normalizeClass, renderSlot } from 'vue';
import props from './props.js';
import config from '../config.js';
import '../shared/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-collapse");
var script = defineComponent({
  name: name,
  props: props,
  emits: ["update:value", "change"],
  setup: function setup(props2) {
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      activeValue = _useVModel2[0],
      setActiveValue = _useVModel2[1];
    var calcActiveValues = function calcActiveValues(activeValues, panelValue, expandMutex) {
      var hit = activeValues.indexOf(panelValue);
      if (hit > -1) {
        return activeValues.filter(function (item) {
          return item !== panelValue;
        });
      }
      return expandMutex ? [panelValue] : activeValues.concat(panelValue);
    };
    var onPanelChange = function onPanelChange(value2) {
      if (Array.isArray(activeValue.value)) {
        var val = calcActiveValues(activeValue.value, value2, props2.expandMutex);
        setActiveValue(val);
      }
    };
    var disabled = computed(function () {
      return props2.disabled;
    });
    var expandIcon = computed(function () {
      return props2.expandIcon;
    });
    provide("collapse", {
      activeValue: activeValue,
      disabled: disabled,
      expandIcon: expandIcon,
      onPanelChange: onPanelChange,
      defaultExpandAll: props2.defaultExpandAll
    });
    return {
      prefix: prefix,
      classPrefix: name,
      activeValue: activeValue
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classPrefix)
  }, [renderSlot(_ctx.$slots, "default")], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=collapse.js.map
