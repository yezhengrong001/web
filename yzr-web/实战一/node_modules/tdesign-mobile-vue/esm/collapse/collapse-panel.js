/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, inject, computed, ref, watch, nextTick, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createBlock, resolveDynamicComponent, createVNode } from 'vue';
import { ChevronDownIcon, ChevronUpIcon } from 'tdesign-icons-vue-next';
import props from './collapse-panel-props.js';
import config from '../config.js';
import { findIndex } from './util.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode, renderContent } from '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-collapse-panel");
var script = defineComponent({
  name: name,
  components: {
    ChevronDownIcon: ChevronDownIcon,
    ChevronUpIcon: ChevronUpIcon,
    TNode: TNodeComponent
  },
  props: props,
  setup: function setup(props2, context) {
    var internalInstance = getCurrentInstance();
    var parent = inject("collapse");
    var isTrue = function isTrue(val) {
      return typeof val === "boolean" && val;
    };
    var rightIcon = computed(function () {
      if (props2.expandIcon === false) return;
      if (isTrue(props2.expandIcon) || isTrue(parent === null || parent === void 0 ? void 0 : parent.expandIcon.value)) {
        console.log(isTrue(parent === null || parent === void 0 ? void 0 : parent.expandIcon.value));
        return isActive.value ? ChevronDownIcon : ChevronUpIcon;
      }
      return renderTNode(internalInstance, "expand-icon")[0];
    });
    var disabled = computed(function () {
      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;
    });
    var className = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name), true), _defineProperty(_ref, "".concat(name, "--active"), isActive.value), _defineProperty(_ref, "".concat(name, "--disabled"), disabled.value), _ref;
    });
    var isActive = computed(function () {
      return findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;
    });
    var updatePanelValue = function updatePanelValue() {
      if (props2.value != null) {
        parent === null || parent === void 0 ? void 0 : parent.onPanelChange(props2.value);
      }
    };
    var handleClick = function handleClick(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      if (disabled.value) {
        return;
      }
      updatePanelValue();
    };
    var panelContent = renderContent(internalInstance, "default", "content");
    var $body = ref();
    var $wrap = ref();
    var $head = ref();
    var updatePanelState = function updatePanelState() {
      if (!$wrap.value) {
        return;
      }
      var _$head$value$getBound = $head.value.getBoundingClientRect(),
        headHeight = _$head$value$getBound.height;
      if (!isActive.value) {
        $wrap.value.style.height = "".concat(headHeight, "px");
        return;
      }
      var _$body$value$getBound = $body.value.getBoundingClientRect(),
        bodyHeight = _$body$value$getBound.height;
      var height = headHeight + bodyHeight;
      $wrap.value.style.height = "".concat(height, "px");
    };
    watch(isActive, function () {
      nextTick(function () {
        updatePanelState();
      });
    });
    onMounted(function () {
      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {
        updatePanelValue();
      }
      updatePanelState();
    });
    return {
      classPrefix: name,
      rightIcon: rightIcon,
      $head: $head,
      $body: $body,
      $wrap: $wrap,
      className: className,
      handleClick: handleClick,
      panelContent: panelContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    ref: "$wrap",
    class: normalizeClass(_ctx.className)
  }, [createElementVNode("div", {
    ref: "$head",
    class: normalizeClass("".concat(_ctx.classPrefix, "__header")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    })
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.classPrefix, "__title"))
  }, [renderSlot(_ctx.$slots, "header", {}, function () {
    return [createTextVNode(toDisplayString(_ctx.header), 1)];
  })], 2), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.classPrefix, "__header-right"))
  }, [_ctx.headerRightContent || _ctx.$slots.headerRightContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.classPrefix, "__header-extra"))
  }, [renderSlot(_ctx.$slots, "headerRightContent", {}, function () {
    return [createTextVNode(toDisplayString(_ctx.headerRightContent), 1)];
  })], 2)) : createCommentVNode("", true), (openBlock(), createBlock(resolveDynamicComponent(_ctx.rightIcon), {
    class: normalizeClass("".concat(_ctx.classPrefix, "__header-icon"))
  }, null, 8, ["class"]))], 2)], 2), createElementVNode("div", {
    ref: "$body",
    class: normalizeClass("".concat(_ctx.classPrefix, "__body"))
  }, [createVNode(_component_t_node, {
    content: _ctx.panelContent
  }, null, 8, ["content"])], 2)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=collapse-panel.js.map
