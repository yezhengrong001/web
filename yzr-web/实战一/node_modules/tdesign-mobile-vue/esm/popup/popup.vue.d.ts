declare const _default: import("vue").DefineComponent<{
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    customStyle: {
        type: StringConstructor;
        default: string;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayProps: {
        type: import("vue").PropType<object | undefined>;
        default: () => {};
    };
    placement: {
        type: import("vue").PropType<"left" | "center" | "right" | "top" | "bottom" | undefined>;
        default: "left" | "center" | "right" | "top" | "bottom" | undefined;
        validator(val: "left" | "center" | "right" | "top" | "bottom" | undefined): boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    to: StringConstructor;
    transitionName: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(() => void) | undefined>;
    onClosed: import("vue").PropType<(() => void) | undefined>;
    onOpen: import("vue").PropType<(() => void) | undefined>;
    onOpened: import("vue").PropType<(() => void) | undefined>;
    onVisibleChange: import("vue").PropType<((visible: boolean, trigger: import("./type").PopupSource) => void) | undefined>;
}, {
    name: import("vue").Ref<string>;
    currentVisible: import("vue").WritableComputedRef<boolean | undefined>;
    rootClasses: import("vue").ComputedRef<string>;
    rootStyles: import("vue").ComputedRef<string | undefined>;
    contentClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    contentTransitionName: import("vue").ComputedRef<string>;
    afterEnter: () => void;
    afterLeave: () => void;
    handleOverlayClick: () => void;
    handleMove: (e: TouchEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "open" | "close" | "opened" | "closed" | "visible-change" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    customStyle: {
        type: StringConstructor;
        default: string;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayProps: {
        type: import("vue").PropType<object | undefined>;
        default: () => {};
    };
    placement: {
        type: import("vue").PropType<"left" | "center" | "right" | "top" | "bottom" | undefined>;
        default: "left" | "center" | "right" | "top" | "bottom" | undefined;
        validator(val: "left" | "center" | "right" | "top" | "bottom" | undefined): boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    to: StringConstructor;
    transitionName: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(() => void) | undefined>;
    onClosed: import("vue").PropType<(() => void) | undefined>;
    onOpen: import("vue").PropType<(() => void) | undefined>;
    onOpened: import("vue").PropType<(() => void) | undefined>;
    onVisibleChange: import("vue").PropType<((visible: boolean, trigger: import("./type").PopupSource) => void) | undefined>;
}>>, {
    modelValue: boolean;
    overlayProps: object | undefined;
    placement: "left" | "center" | "right" | "top" | "bottom" | undefined;
    showOverlay: boolean;
    visible: boolean;
    customStyle: string;
    closeOnOverlayClick: boolean;
    lockScroll: boolean;
    transitionName: string;
    defaultVisible: boolean;
}>;
export default _default;
