/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, watch, ref, resolveComponent, openBlock, createBlock, Teleport, createElementVNode, normalizeClass, normalizeStyle, createVNode, Transition, withCtx, mergeProps, withDirectives, renderSlot, vShow } from 'vue';
import popupProps from './props.js';
import Overlay from '../overlay/index.js';
import config from '../config.js';
import '../shared/index.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useDefault } from '../shared/useDefault/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../overlay/style';
import '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-popup");
var script = defineComponent({
  name: name,
  components: {
    TOverlay: Overlay
  },
  props: popupProps,
  emits: ["open", "close", "opened", "closed", "visible-change", "update:visible", "update:modelValue"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var _useDefault = useDefault(props, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      currentVisible = _useDefault2[0];
    var rootClasses = computed(function () {
      return name;
    });
    var rootStyles = computed(function () {
      return props.customStyle || props.zIndex ? (props.customStyle && "".concat(props.customStyle, ";")) + (props.zIndex && "z-index:".concat(props.zIndex, ";")) : void 0;
    });
    var contentClasses = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, "".concat(name, "--content"), true), _defineProperty(_ref, "".concat(name, "--content-").concat(props.placement), true), _ref;
    });
    var contentTransitionName = computed(function () {
      var transitionName = props.transitionName,
        placement = props.placement;
      if (transitionName) return transitionName;
      if (placement === "center") return "fade-zoom";
      return "slide-".concat(placement);
    });
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      var cls = "".concat(prefix, "-overflow-hidden");
      if (val) {
        document.body.classList.add(cls);
        emitEvent("open");
        currentVisible.value = true;
      } else {
        document.body.classList.remove(cls);
      }
    });
    var handleOverlayClick = function handleOverlayClick() {
      if (!props.closeOnOverlayClick) {
        return;
      }
      emitEvent("close");
      currentVisible.value = false;
    };
    var handleMove = function handleMove(e) {
      if (props.lockScroll) {
        e.preventDefault();
      }
    };
    var afterLeave = function afterLeave() {
      return emitEvent("closed");
    };
    var afterEnter = function afterEnter() {
      return emitEvent("opened");
    };
    return {
      name: ref(name),
      currentVisible: currentVisible,
      rootClasses: rootClasses,
      rootStyles: rootStyles,
      contentClasses: contentClasses,
      contentTransitionName: contentTransitionName,
      afterEnter: afterEnter,
      afterLeave: afterLeave,
      handleOverlayClick: handleOverlayClick,
      handleMove: handleMove
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = resolveComponent("t-overlay");
  return openBlock(), createBlock(Teleport, {
    to: _ctx.to,
    disabled: !_ctx.to
  }, [createElementVNode("div", {
    class: normalizeClass([_ctx.rootClasses, _ctx.$attrs.class]),
    style: normalizeStyle(_ctx.rootStyles),
    onTouchmove: _cache[0] || (_cache[0] = function () {
      return _ctx.handleMove && _ctx.handleMove.apply(_ctx, arguments);
    })
  }, [createVNode(Transition, {
    name: "fade"
  }, {
    default: withCtx(function () {
      return [createVNode(_component_t_overlay, mergeProps(_ctx.overlayProps, {
        visible: _ctx.currentVisible,
        transparent: !_ctx.showOverlay,
        onClick: _ctx.handleOverlayClick
      }), null, 16, ["visible", "transparent", "onClick"])];
    }),
    _: 1
  }), createVNode(Transition, {
    name: _ctx.contentTransitionName,
    onAfterEnter: _ctx.afterEnter,
    onAfterLeave: _ctx.afterLeave
  }, {
    default: withCtx(function () {
      return [withDirectives(createElementVNode("div", {
        class: normalizeClass(_ctx.contentClasses)
      }, [renderSlot(_ctx.$slots, "default")], 2), [[vShow, _ctx.currentVisible]])];
    }),
    _: 3
  }, 8, ["name", "onAfterEnter", "onAfterLeave"])], 38)], 8, ["to", "disabled"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=popup.js.map
