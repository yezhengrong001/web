import { CSSProperties } from 'vue';
import { SwiperNavigation } from '../swiper';
export declare type TriggerType = 'close-btn' | 'overlay' | 'esc';
declare const _default: import("vue").DefineComponent<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    images: {
        type: import("vue").PropType<string[] | undefined>;
        default: () => string[] | undefined;
    };
    initialIndex: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    showIndex: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: BooleanConstructor;
    onClose: import("vue").PropType<((context: {
        trigger: "close-btn" | "overlay" | "esc";
        e: MouseEvent | KeyboardEvent;
    }) => void) | undefined>;
    onIndexChange: import("vue").PropType<((index: number, context: {
        trigger: "prev" | "next";
    }) => void) | undefined>;
}, {
    visible: import("vue").WritableComputedRef<boolean | undefined>;
    handleClose: (e: Event, trigger: TriggerType) => void;
    onSwiperChange: (index: number, context: any) => void;
    onTouchStart: (event: TouchEvent) => void;
    onTouchMove: (event: TouchEvent) => void;
    onTouchEnd: (event: TouchEvent) => void;
    modelValue: import("vue").Ref<boolean | undefined>;
    defaultVisible: import("vue").Ref<boolean>;
    closeBtn: import("vue").Ref<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
    images: import("vue").Ref<string[] | undefined>;
    initialIndex: import("vue").Ref<number>;
    maxZoom: import("vue").Ref<number>;
    showIndex: import("vue").Ref<boolean>;
    name: string;
    prefix: string;
    closeBtnTNode: import("vue").ComputedRef<any>;
    navigation: import("vue").ComputedRef<SwiperNavigation>;
    imageStyle: import("vue").ComputedRef<CSSProperties>;
    lazyVisible: import("vue").Ref<boolean | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "close" | "update:visible" | "change" | "index-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    images: {
        type: import("vue").PropType<string[] | undefined>;
        default: () => string[] | undefined;
    };
    initialIndex: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    showIndex: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: BooleanConstructor;
    onClose: import("vue").PropType<((context: {
        trigger: "close-btn" | "overlay" | "esc";
        e: MouseEvent | KeyboardEvent;
    }) => void) | undefined>;
    onIndexChange: import("vue").PropType<((index: number, context: {
        trigger: "prev" | "next";
    }) => void) | undefined>;
}>>, {
    modelValue: boolean;
    visible: boolean;
    defaultVisible: boolean;
    closeBtn: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | undefined;
    images: string[] | undefined;
    initialIndex: number;
    maxZoom: number;
    showIndex: boolean;
}>;
export default _default;
