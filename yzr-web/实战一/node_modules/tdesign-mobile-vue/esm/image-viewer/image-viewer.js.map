{"version":3,"file":"image-viewer.js","sources":["../../src/image-viewer/image-viewer.vue","../../src/image-viewer/image-viewer.vue?vue&type=template&id=e7d34ef8&lang.js"],"sourcesContent":["<template>\n  <t-overlay :class=\"`${prefix}-image-viewer`\" :visible=\"visible\">\n    <template v-if=\"lazyVisible\">\n      <div :class=\"`${name}__close-icon`\" @click=\"handleClose($event, 'close-btn')\">\n        <t-node v-if=\"!(typeof closeBtnTNode === 'boolean')\" :content=\"closeBtnTNode\"></t-node>\n        <close-circle-filled-icon v-else-if=\"typeof closeBtn === 'boolean' && closeBtn\" />\n      </div>\n      <t-swiper\n        :autoplay=\"false\"\n        :class=\"`${name}__swipe`\"\n        :default-current=\"initialIndex\"\n        :navigation=\"navigation\"\n        :on-change=\"onSwiperChange\"\n      >\n        <t-swiper-item\n          v-for=\"(image, index) in images\"\n          :key=\"image + index\"\n          :class=\"`${name}__swipe-item`\"\n          @touchstart=\"onTouchStart\"\n          @touchmove=\"onTouchMove\"\n          @touchend=\"onTouchEnd\"\n        >\n          <img :src=\"image\" :style=\"imageStyle\" :class=\"`${name}__image`\" />\n        </t-swiper-item>\n      </t-swiper>\n    </template>\n  </t-overlay>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  toRefs,\n  ref,\n  defineComponent,\n  reactive,\n  watch,\n  getCurrentInstance,\n  CSSProperties,\n  SetupContext,\n} from 'vue';\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport config from '../config';\nimport ImageViewerProps from './props';\nimport { renderTNode, TNode, useEmitEvent, useDefault, useTouch } from '../shared';\nimport { TdImageViewerProps } from './type';\nimport { Swiper as TSwiper, SwiperItem as TSwiperItem, SwiperNavigation } from '../swiper';\nimport TOverlay from '../overlay';\n\nexport type TriggerType = 'close-btn' | 'overlay' | 'esc';\nconst { prefix } = config;\nconst name = `${prefix}-image-viewer`;\n\n/*\ninitialIndex, 因 swiper 不支持 defaultCurrent\n\n\nonIndexChange, 因 swiper 未提供 'prev' | 'next'， 所以没有 context\n*/\nconst getDistance = (touches: TouchList) =>\n  Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\n\nexport default defineComponent({\n  name,\n  components: {\n    CloseCircleFilledIcon,\n    TSwiper,\n    TSwiperItem,\n    TOverlay,\n    TNode,\n  },\n  props: ImageViewerProps,\n  emits: ['close', 'index-change', 'update:visible', 'update:modelValue', 'change'],\n  setup(props, context: SetupContext) {\n    const state = reactive({\n      zooming: false,\n      scale: 1,\n    });\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [visible, setVisible] = useDefault<TdImageViewerProps['visible'], TdImageViewerProps>(\n      props,\n      context.emit,\n      'visible',\n      'change',\n    );\n    // 因 Overlay 未提供lazy属性，先暂时自行实现\n    const lazyVisible = ref(visible.value);\n    const touch = useTouch();\n    const internalInstance = getCurrentInstance();\n    const closeBtnTNode = computed(() => {\n      return renderTNode(internalInstance, 'closeBtn');\n    });\n    const navigation = computed<SwiperNavigation>(() => {\n      if (props.showIndex) {\n        return { type: 'fraction' };\n      }\n      return { type: 'dots', showSlideBtn: false };\n    });\n\n    const imageStyle = computed(() => {\n      const { scale, zooming } = state;\n      const style: CSSProperties = {\n        transitionDuration: zooming ? '0s' : '.3s',\n      };\n\n      if (scale !== 1) {\n        style.transform = `scale(${scale}, ${scale})`;\n      }\n\n      return style;\n    });\n\n    const handleClose = (e: Event, trigger: TriggerType) => {\n      setVisible(false);\n      emitEvent('close', { trigger, e });\n    };\n\n    const onSwiperChange = (index: number, context: any) => {\n      emitEvent('index-change', index);\n    };\n\n    let fingerNum: number;\n    let startScale: number;\n    let startDistance: number;\n    let doubleTapTimer: number | null;\n    let touchStartTime: number;\n    const onTouchStart = (event: TouchEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const { touches } = event;\n\n      touch.start(event);\n\n      fingerNum = touches.length;\n      touchStartTime = Date.now();\n      state.zooming = fingerNum === 2;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(event.touches);\n      }\n    };\n\n    const onTouchMove = (event: TouchEvent) => {\n      const { touches } = event;\n\n      touch.move(event);\n      event.preventDefault();\n      event.stopPropagation();\n      if (state.zooming) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n      if (state.zooming && touches.length === 2) {\n        const distance = getDistance(touches);\n        const scale = (startScale * distance) / startDistance;\n\n        setScale(scale);\n      }\n    };\n\n    const setScale = (scale: number) => {\n      scale = Math.min(scale, +props.maxZoom + 1);\n\n      if (scale !== state.scale) {\n        state.scale = scale;\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n    };\n\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n\n      setScale(scale);\n    };\n\n    const checkTap = (event: Event) => {\n      if (fingerNum > 1) {\n        return;\n      }\n\n      const { offsetX, offsetY } = touch;\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      const TAP_OFFSET = 5;\n\n      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET && deltaTime < TAP_TIME) {\n        if (doubleTapTimer) {\n          clearTimeout(doubleTapTimer);\n          doubleTapTimer = null;\n          toggleScale();\n        } else {\n          doubleTapTimer = window.setTimeout(() => {\n            handleClose(event, 'overlay');\n            doubleTapTimer = null;\n          }, TAP_TIME);\n        }\n      }\n    };\n\n    const onTouchEnd = (event: TouchEvent) => {\n      // eliminate tap delay on safari\n      event.preventDefault();\n\n      if (state.zooming) {\n        event.stopPropagation();\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.zooming = false;\n          }\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          if (state.scale > props.maxZoom) {\n            state.scale = +props.maxZoom;\n          }\n        }\n      }\n\n      checkTap(event);\n      touch.reset();\n    };\n\n    watch(\n      () => visible.value,\n      (value) => {\n        if (!value) {\n          resetScale();\n        }\n        setTimeout(() => {\n          lazyVisible.value = value;\n        }, 300);\n      },\n    );\n    return {\n      name,\n      prefix,\n      closeBtnTNode,\n      navigation,\n      imageStyle,\n      lazyVisible,\n      ...toRefs(props),\n      visible,\n      handleClose,\n      onSwiperChange,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n    };\n  },\n});\n</script>\n","<template>\n  <t-overlay :class=\"`${prefix}-image-viewer`\" :visible=\"visible\">\n    <template v-if=\"lazyVisible\">\n      <div :class=\"`${name}__close-icon`\" @click=\"handleClose($event, 'close-btn')\">\n        <t-node v-if=\"!(typeof closeBtnTNode === 'boolean')\" :content=\"closeBtnTNode\"></t-node>\n        <close-circle-filled-icon v-else-if=\"typeof closeBtn === 'boolean' && closeBtn\" />\n      </div>\n      <t-swiper\n        :autoplay=\"false\"\n        :class=\"`${name}__swipe`\"\n        :default-current=\"initialIndex\"\n        :navigation=\"navigation\"\n        :on-change=\"onSwiperChange\"\n      >\n        <t-swiper-item\n          v-for=\"(image, index) in images\"\n          :key=\"image + index\"\n          :class=\"`${name}__swipe-item`\"\n          @touchstart=\"onTouchStart\"\n          @touchmove=\"onTouchMove\"\n          @touchend=\"onTouchEnd\"\n        >\n          <img :src=\"image\" :style=\"imageStyle\" :class=\"`${name}__image`\" />\n        </t-swiper-item>\n      </t-swiper>\n    </template>\n  </t-overlay>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  toRefs,\n  ref,\n  defineComponent,\n  reactive,\n  watch,\n  getCurrentInstance,\n  CSSProperties,\n  SetupContext,\n} from 'vue';\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport config from '../config';\nimport ImageViewerProps from './props';\nimport { renderTNode, TNode, useEmitEvent, useDefault, useTouch } from '../shared';\nimport { TdImageViewerProps } from './type';\nimport { Swiper as TSwiper, SwiperItem as TSwiperItem, SwiperNavigation } from '../swiper';\nimport TOverlay from '../overlay';\n\nexport type TriggerType = 'close-btn' | 'overlay' | 'esc';\nconst { prefix } = config;\nconst name = `${prefix}-image-viewer`;\n\n/*\ninitialIndex, 因 swiper 不支持 defaultCurrent\n\n\nonIndexChange, 因 swiper 未提供 'prev' | 'next'， 所以没有 context\n*/\nconst getDistance = (touches: TouchList) =>\n  Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\n\nexport default defineComponent({\n  name,\n  components: {\n    CloseCircleFilledIcon,\n    TSwiper,\n    TSwiperItem,\n    TOverlay,\n    TNode,\n  },\n  props: ImageViewerProps,\n  emits: ['close', 'index-change', 'update:visible', 'update:modelValue', 'change'],\n  setup(props, context: SetupContext) {\n    const state = reactive({\n      zooming: false,\n      scale: 1,\n    });\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [visible, setVisible] = useDefault<TdImageViewerProps['visible'], TdImageViewerProps>(\n      props,\n      context.emit,\n      'visible',\n      'change',\n    );\n    // 因 Overlay 未提供lazy属性，先暂时自行实现\n    const lazyVisible = ref(visible.value);\n    const touch = useTouch();\n    const internalInstance = getCurrentInstance();\n    const closeBtnTNode = computed(() => {\n      return renderTNode(internalInstance, 'closeBtn');\n    });\n    const navigation = computed<SwiperNavigation>(() => {\n      if (props.showIndex) {\n        return { type: 'fraction' };\n      }\n      return { type: 'dots', showSlideBtn: false };\n    });\n\n    const imageStyle = computed(() => {\n      const { scale, zooming } = state;\n      const style: CSSProperties = {\n        transitionDuration: zooming ? '0s' : '.3s',\n      };\n\n      if (scale !== 1) {\n        style.transform = `scale(${scale}, ${scale})`;\n      }\n\n      return style;\n    });\n\n    const handleClose = (e: Event, trigger: TriggerType) => {\n      setVisible(false);\n      emitEvent('close', { trigger, e });\n    };\n\n    const onSwiperChange = (index: number, context: any) => {\n      emitEvent('index-change', index);\n    };\n\n    let fingerNum: number;\n    let startScale: number;\n    let startDistance: number;\n    let doubleTapTimer: number | null;\n    let touchStartTime: number;\n    const onTouchStart = (event: TouchEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const { touches } = event;\n\n      touch.start(event);\n\n      fingerNum = touches.length;\n      touchStartTime = Date.now();\n      state.zooming = fingerNum === 2;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(event.touches);\n      }\n    };\n\n    const onTouchMove = (event: TouchEvent) => {\n      const { touches } = event;\n\n      touch.move(event);\n      event.preventDefault();\n      event.stopPropagation();\n      if (state.zooming) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n      if (state.zooming && touches.length === 2) {\n        const distance = getDistance(touches);\n        const scale = (startScale * distance) / startDistance;\n\n        setScale(scale);\n      }\n    };\n\n    const setScale = (scale: number) => {\n      scale = Math.min(scale, +props.maxZoom + 1);\n\n      if (scale !== state.scale) {\n        state.scale = scale;\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n    };\n\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n\n      setScale(scale);\n    };\n\n    const checkTap = (event: Event) => {\n      if (fingerNum > 1) {\n        return;\n      }\n\n      const { offsetX, offsetY } = touch;\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      const TAP_OFFSET = 5;\n\n      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET && deltaTime < TAP_TIME) {\n        if (doubleTapTimer) {\n          clearTimeout(doubleTapTimer);\n          doubleTapTimer = null;\n          toggleScale();\n        } else {\n          doubleTapTimer = window.setTimeout(() => {\n            handleClose(event, 'overlay');\n            doubleTapTimer = null;\n          }, TAP_TIME);\n        }\n      }\n    };\n\n    const onTouchEnd = (event: TouchEvent) => {\n      // eliminate tap delay on safari\n      event.preventDefault();\n\n      if (state.zooming) {\n        event.stopPropagation();\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.zooming = false;\n          }\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          if (state.scale > props.maxZoom) {\n            state.scale = +props.maxZoom;\n          }\n        }\n      }\n\n      checkTap(event);\n      touch.reset();\n    };\n\n    watch(\n      () => visible.value,\n      (value) => {\n        if (!value) {\n          resetScale();\n        }\n        setTimeout(() => {\n          lazyVisible.value = value;\n        }, 300);\n      },\n    );\n    return {\n      name,\n      prefix,\n      closeBtnTNode,\n      navigation,\n      imageStyle,\n      lazyVisible,\n      ...toRefs(props),\n      visible,\n      handleClose,\n      onSwiperChange,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","getDistance","touches","Math","sqrt","clientX","clientY","defineComponent","components","CloseCircleFilledIcon","TSwiper","TSwiperItem","TOverlay","TNode","props","ImageViewerProps","emits","setup","context","state","reactive","zooming","scale","emitEvent","useEmitEvent","emit","useDefault","visible","setVisible","lazyVisible","ref","value","touch","useTouch","internalInstance","getCurrentInstance","closeBtnTNode","computed","renderTNode","navigation","showIndex","type","showSlideBtn","imageStyle","style","transitionDuration","transform","handleClose","e","trigger","onSwiperChange","index","fingerNum","startScale","startDistance","doubleTapTimer","touchStartTime","onTouchStart","event","preventDefault","stopPropagation","start","length","Date","now","onTouchMove","move","distance","setScale","min","maxZoom","resetScale","toggleScale","checkTap","offsetX","offsetY","deltaTime","TAP_TIME","TAP_OFFSET","clearTimeout","window","setTimeout","onTouchEnd","reset","watch","toRefs","_createBlock","_component_t_overlay","class","_ctx","_createElementBlock","_Fragment","key","_createElementVNode","onClick","_cache","$event","_component_t_node","content","closeBtn","_component_close_circle_filled_icon","_createVNode","_component_t_swiper","autoplay","initialIndex","_openBlock","_renderList","images","image","_component_t_swiper_item","onTouchstart","onTouchmove","onTouchend","src"],"mappings":"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"}