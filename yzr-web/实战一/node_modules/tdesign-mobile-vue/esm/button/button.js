/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { h, defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createElementVNode } from 'vue';
import { LoadingIcon } from 'tdesign-icons-vue-next';
import '../shared/index.js';
import ClASSNAMES from '../shared/constants.js';
import ButtonProps from './props.js';
import config from '../config.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { renderContent, renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-button");
var loadingContent = h(LoadingIcon);
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: ButtonProps,
  emits: ["click"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var internalInstance = getCurrentInstance();
    var buttonClass = computed(function () {
      var _ref;
      return ["".concat(name), props.size ? ClASSNAMES.SIZE[props.size] : "", "".concat(name, "--").concat(props.variant), (_ref = {}, _defineProperty(_ref, "".concat(name, "--").concat(props.theme), props.theme), _defineProperty(_ref, "".concat(name, "--shape-").concat(props.shape), props.shape), _defineProperty(_ref, "".concat(name, "--ghost"), props.ghost), _defineProperty(_ref, "".concat(prefix, "-is-block"), props.block), _defineProperty(_ref, ClASSNAMES.STATUS.disabled, props.disabled), _defineProperty(_ref, ClASSNAMES.STATUS.loading, props.loading), _ref)];
    });
    var buttonContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var iconContent = computed(function () {
      return props.loading ? loadingContent : renderTNode(internalInstance, "icon");
    });
    var onClick = function onClick(e) {
      if (!props.loading && !props.disabled) {
        emitEvent("click", e);
      } else {
        e.stopPropagation();
      }
    };
    return _objectSpread(_objectSpread({
      name: name
    }, toRefs(props)), {}, {
      buttonContent: buttonContent,
      iconContent: iconContent,
      buttonClass: buttonClass,
      onClick: onClick
    });
  }
});

var _hoisted_1 = ["disabled", "aria-disabled"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("button", {
    class: normalizeClass(_ctx.buttonClass),
    disabled: _ctx.disabled,
    role: "button",
    "aria-disabled": _ctx.disabled,
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"]), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__text"))
  }, [createVNode(_component_t_node, {
    content: _ctx.buttonContent
  }, null, 8, ["content"])], 2)], 10, _hoisted_1);
}

script.render = render;

export { script as default };
//# sourceMappingURL=button.js.map
