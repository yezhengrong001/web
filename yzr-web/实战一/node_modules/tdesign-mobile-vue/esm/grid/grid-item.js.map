{"version":3,"file":"grid-item.js","sources":["../../src/grid/grid-item.vue","../../src/grid/grid-item.vue?vue&type=template&id=2e222fab&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClass\" :style=\"rootStyle\">\n    <div :class=\"`${name}__image-box`\">\n      <t-badge\n        v-if=\"badgeProps\"\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n        <template v-if=\"image\">\n          <img v-if=\"typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n          <t-node v-else :content=\"imageContent\"></t-node>\n        </template>\n      </t-badge>\n\n      <template v-else-if=\"image\">\n        <img v-if=\"typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </template>\n    </div>\n    <div :class=\"`${name}__text`\" :style=\"textStyle\">\n      <div :class=\"`${name}__title`\" :style=\"titleStyle\">\n        <t-node :content=\"textContent\"></t-node>\n      </div>\n      <div :class=\"`${name}__description`\">\n        <t-node :content=\"descContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, computed, inject } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport gridItemProps from './grid-item-props';\nimport { renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge },\n  props: gridItemProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const isHorz = props.layout === 'horizontal';\n    const { column, gutter, border, align } = inject<any>('grid');\n\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const textContent = computed(() => renderTNode(internalInstance, 'text'));\n    const descContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const rootClass = computed(() => [`${name}`, { [`${name}--bordered`]: border.value }]);\n\n    const rootStyle = computed(() => {\n      const percent = `${100 / +column.value}%`;\n      const borderStyle = {};\n      if (border.value) {\n        if (typeof border.value !== 'boolean') {\n          const { color, width, style } = border.value;\n          return {\n            borderColor: color,\n            borderWidth: width,\n            borderStyle: style,\n          };\n        }\n      }\n\n      const style = {\n        flexBasis: percent,\n        flexDirection: isHorz ? ('row' as const) : ('column' as const),\n        paddingLeft: gutter.value ? `${gutter.value}px` : 0,\n        paddingRight: gutter.value ? `${gutter.value}px` : 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: ['center', 'left'].includes(align.value) ? align.value : 'center',\n        ...borderStyle,\n      };\n      return style;\n    });\n\n    const imgStyle = computed(() => {\n      let imgSize = 32;\n      if (column.value >= 5) {\n        imgSize = 28;\n      } else if (column.value <= 3) {\n        imgSize = 48;\n      }\n      return {\n        width: `${imgSize}px`,\n        height: `${imgSize}px`,\n      };\n    });\n\n    const textStyle = computed(() => {\n      return {\n        paddingLeft: isHorz ? '12px' : 0,\n      };\n    });\n\n    const titleStyle = computed(() => {\n      return {\n        paddingTop: isHorz ? 0 : '8px',\n        marginBottom: '4px',\n      };\n    });\n\n    return {\n      name,\n      rootStyle,\n      rootClass,\n      imgStyle,\n      textStyle,\n      titleStyle,\n      imageContent,\n      textContent,\n      descContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClass\" :style=\"rootStyle\">\n    <div :class=\"`${name}__image-box`\">\n      <t-badge\n        v-if=\"badgeProps\"\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n        <template v-if=\"image\">\n          <img v-if=\"typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n          <t-node v-else :content=\"imageContent\"></t-node>\n        </template>\n      </t-badge>\n\n      <template v-else-if=\"image\">\n        <img v-if=\"typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </template>\n    </div>\n    <div :class=\"`${name}__text`\" :style=\"textStyle\">\n      <div :class=\"`${name}__title`\" :style=\"titleStyle\">\n        <t-node :content=\"textContent\"></t-node>\n      </div>\n      <div :class=\"`${name}__description`\">\n        <t-node :content=\"descContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, computed, inject } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport gridItemProps from './grid-item-props';\nimport { renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge },\n  props: gridItemProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const isHorz = props.layout === 'horizontal';\n    const { column, gutter, border, align } = inject<any>('grid');\n\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const textContent = computed(() => renderTNode(internalInstance, 'text'));\n    const descContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const rootClass = computed(() => [`${name}`, { [`${name}--bordered`]: border.value }]);\n\n    const rootStyle = computed(() => {\n      const percent = `${100 / +column.value}%`;\n      const borderStyle = {};\n      if (border.value) {\n        if (typeof border.value !== 'boolean') {\n          const { color, width, style } = border.value;\n          return {\n            borderColor: color,\n            borderWidth: width,\n            borderStyle: style,\n          };\n        }\n      }\n\n      const style = {\n        flexBasis: percent,\n        flexDirection: isHorz ? ('row' as const) : ('column' as const),\n        paddingLeft: gutter.value ? `${gutter.value}px` : 0,\n        paddingRight: gutter.value ? `${gutter.value}px` : 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: ['center', 'left'].includes(align.value) ? align.value : 'center',\n        ...borderStyle,\n      };\n      return style;\n    });\n\n    const imgStyle = computed(() => {\n      let imgSize = 32;\n      if (column.value >= 5) {\n        imgSize = 28;\n      } else if (column.value <= 3) {\n        imgSize = 48;\n      }\n      return {\n        width: `${imgSize}px`,\n        height: `${imgSize}px`,\n      };\n    });\n\n    const textStyle = computed(() => {\n      return {\n        paddingLeft: isHorz ? '12px' : 0,\n      };\n    });\n\n    const titleStyle = computed(() => {\n      return {\n        paddingTop: isHorz ? 0 : '8px',\n        marginBottom: '4px',\n      };\n    });\n\n    return {\n      name,\n      rootStyle,\n      rootClass,\n      imgStyle,\n      textStyle,\n      titleStyle,\n      imageContent,\n      textContent,\n      descContent,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TNode","TBadge","props","gridItemProps","setup","internalInstance","getCurrentInstance","isHorz","layout","inject","column","gutter","border","align","imageContent","computed","renderTNode","textContent","descContent","rootClass","value","rootStyle","percent","borderStyle","color","width","style","borderColor","borderWidth","flexBasis","flexDirection","paddingLeft","paddingRight","alignItems","justifyContent","textAlign","includes","imgStyle","imgSize","height","textStyle","titleStyle","paddingTop","marginBottom","_createElementBlock","class","_ctx","_createElementVNode","badgeProps","_createBlock","_component_t_badge","count","maxCount","dot","content","size","offset","image","_Fragment","key","src","_component_t_node","_createVNode"],"mappings":"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"}