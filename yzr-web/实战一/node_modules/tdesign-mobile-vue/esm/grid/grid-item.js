/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, inject, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createBlock, withCtx, Fragment, createCommentVNode, createVNode } from 'vue';
import _Badge from '../badge/index.js';
import config from '../config.js';
import gridItemProps from './grid-item-props.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '../badge/badge.js';
import '@babel/runtime/helpers/slicedToArray';
import '../badge/props.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '../badge/style';
import '../badge/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-grid-item");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent,
    TBadge: _Badge
  },
  props: gridItemProps,
  setup: function setup(props) {
    var internalInstance = getCurrentInstance();
    var isHorz = props.layout === "horizontal";
    var _inject = inject("grid"),
      column = _inject.column,
      gutter = _inject.gutter,
      border = _inject.border,
      align = _inject.align;
    var imageContent = computed(function () {
      return renderTNode(internalInstance, "image");
    });
    var textContent = computed(function () {
      return renderTNode(internalInstance, "text");
    });
    var descContent = computed(function () {
      return renderTNode(internalInstance, "description");
    });
    var rootClass = computed(function () {
      return ["".concat(name), _defineProperty({}, "".concat(name, "--bordered"), border.value)];
    });
    var rootStyle = computed(function () {
      var percent = "".concat(100 / +column.value, "%");
      var borderStyle = {};
      if (border.value) {
        if (typeof border.value !== "boolean") {
          var _border$value = border.value,
            color = _border$value.color,
            width = _border$value.width,
            style2 = _border$value.style;
          return {
            borderColor: color,
            borderWidth: width,
            borderStyle: style2
          };
        }
      }
      var style = _objectSpread({
        flexBasis: percent,
        flexDirection: isHorz ? "row" : "column",
        paddingLeft: gutter.value ? "".concat(gutter.value, "px") : 0,
        paddingRight: gutter.value ? "".concat(gutter.value, "px") : 0,
        alignItems: "center",
        justifyContent: "center",
        textAlign: ["center", "left"].includes(align.value) ? align.value : "center"
      }, borderStyle);
      return style;
    });
    var imgStyle = computed(function () {
      var imgSize = 32;
      if (column.value >= 5) {
        imgSize = 28;
      } else if (column.value <= 3) {
        imgSize = 48;
      }
      return {
        width: "".concat(imgSize, "px"),
        height: "".concat(imgSize, "px")
      };
    });
    var textStyle = computed(function () {
      return {
        paddingLeft: isHorz ? "12px" : 0
      };
    });
    var titleStyle = computed(function () {
      return {
        paddingTop: isHorz ? 0 : "8px",
        marginBottom: "4px"
      };
    });
    return {
      name: name,
      rootStyle: rootStyle,
      rootClass: rootClass,
      imgStyle: imgStyle,
      textStyle: textStyle,
      titleStyle: titleStyle,
      imageContent: imageContent,
      textContent: textContent,
      descContent: descContent
    };
  }
});

var _hoisted_1 = ["src"];
var _hoisted_2 = ["src"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_t_badge = resolveComponent("t-badge");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.rootClass),
    style: normalizeStyle(_ctx.rootStyle)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__image-box"))
  }, [_ctx.badgeProps ? (openBlock(), createBlock(_component_t_badge, {
    key: 0,
    count: _ctx.badgeProps.count,
    "max-count": _ctx.badgeProps.maxCount,
    dot: _ctx.badgeProps.dot,
    content: _ctx.badgeProps.content,
    size: _ctx.badgeProps.size,
    offset: _ctx.badgeProps.offset
  }, {
    default: withCtx(function () {
      return [_ctx.image ? (openBlock(), createElementBlock(Fragment, {
        key: 0
      }, [typeof _ctx.image === "string" ? (openBlock(), createElementBlock("img", {
        key: 0,
        src: _ctx.image,
        class: normalizeClass("".concat(_ctx.name, "__image")),
        style: normalizeStyle(_ctx.imgStyle)
      }, null, 14, _hoisted_1)) : (openBlock(), createBlock(_component_t_node, {
        key: 1,
        content: _ctx.imageContent
      }, null, 8, ["content"]))], 64)) : createCommentVNode("", true)];
    }),
    _: 1
  }, 8, ["count", "max-count", "dot", "content", "size", "offset"])) : _ctx.image ? (openBlock(), createElementBlock(Fragment, {
    key: 1
  }, [typeof _ctx.image === "string" ? (openBlock(), createElementBlock("img", {
    key: 0,
    src: _ctx.image,
    class: normalizeClass("".concat(_ctx.name, "__image")),
    style: normalizeStyle(_ctx.imgStyle)
  }, null, 14, _hoisted_2)) : (openBlock(), createBlock(_component_t_node, {
    key: 1,
    content: _ctx.imageContent
  }, null, 8, ["content"]))], 64)) : createCommentVNode("", true)], 2), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__text")),
    style: normalizeStyle(_ctx.textStyle)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__title")),
    style: normalizeStyle(_ctx.titleStyle)
  }, [createVNode(_component_t_node, {
    content: _ctx.textContent
  }, null, 8, ["content"])], 6), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__description"))
  }, [createVNode(_component_t_node, {
    content: _ctx.descContent
  }, null, 8, ["content"])], 2)], 6)], 6);
}

script.render = render;

export { script as default };
//# sourceMappingURL=grid-item.js.map
