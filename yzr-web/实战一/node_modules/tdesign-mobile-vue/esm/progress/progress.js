/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import { defineComponent, computed, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createVNode, createCommentVNode } from 'vue';
import '../shared/index.js';
import config from '../config.js';
import { getBackgroundColor } from './utils.js';
import progressProps from './props.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/objectWithoutProperties';

var prefix = config.prefix;
var name = "".concat(prefix, "-progress");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: progressProps,
  setup: function setup(props) {
    var progressPercent = computed(function () {
      return Math.max(0, Math.min(props.percentage, 100));
    });
    var progressStatusStyle = computed(function () {
      if (props.percentage >= 100) {
        return "success";
      }
      return props.status;
    });
    var progressBarStyle = computed(function () {
      var height = typeof props.strokeWidth === "string" ? props.strokeWidth : "".concat(props.strokeWidth, "px");
      return {
        height: height,
        backgroundColor: props.trackColor
      };
    });
    var progressBarPercenStyle = computed(function () {
      return {
        width: "".concat(progressPercent.value, "%"),
        background: props.color && getBackgroundColor(props.color)
      };
    });
    var rootClasses = computed(function () {
      return ["".concat(name), "".concat(name, "--status--").concat(progressStatusStyle.value)];
    });
    var internalInstance = getCurrentInstance();
    var progressLabelContent = computed(function () {
      return props.label && (_typeof(renderTNode(internalInstance, "label")) === "object" ? renderTNode(internalInstance, "label") : "".concat(progressPercent.value, "%"));
    });
    return {
      name: name,
      rootClasses: rootClasses,
      progressBarPercenStyle: progressBarPercenStyle,
      progressBarStyle: progressBarStyle,
      progressLabelContent: progressLabelContent
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.rootClasses)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__inner"))
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__bar")),
    style: normalizeStyle(_ctx.progressBarStyle)
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__bar-percent")),
    style: normalizeStyle(_ctx.progressBarPercenStyle)
  }, null, 6)], 6), _ctx.progressLabelContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__label"))
  }, [createVNode(_component_t_node, {
    content: _ctx.progressLabelContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 2)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=progress.js.map
