{"version":3,"file":"progress.js","sources":["../../src/progress/progress.vue","../../src/progress/progress.vue?vue&type=template&id=5f61bbee&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClasses\">\n    <div :class=\"`${name}__inner`\">\n      <div :class=\"`${name}__bar`\" :style=\"progressBarStyle\">\n        <div :class=\"`${name}__bar-percent`\" :style=\"progressBarPercenStyle\"></div>\n      </div>\n      <div v-if=\"progressLabelContent\" :class=\"`${name}__label`\">\n        <t-node :content=\"progressLabelContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport config from '../config';\nimport { getBackgroundColor } from './utils';\nimport progressProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-progress`;\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: progressProps,\n  setup(props) {\n    const progressPercent = computed(() => {\n      return Math.max(0, Math.min(props.percentage, 100));\n    });\n\n    const progressStatusStyle = computed(() => {\n      if (props.percentage >= 100) {\n        return 'success';\n      }\n      return props.status;\n    });\n\n    const progressBarStyle = computed(() => {\n      const height = typeof props.strokeWidth === 'string' ? props.strokeWidth : `${props.strokeWidth}px`;\n      return {\n        height,\n        backgroundColor: props.trackColor,\n      };\n    });\n\n    const progressBarPercenStyle = computed(() => {\n      return {\n        width: `${progressPercent.value}%`,\n        background: props.color && getBackgroundColor(props.color),\n      };\n    });\n\n    const rootClasses = computed(() => [`${name}`, `${name}--status--${progressStatusStyle.value}`]);\n    const internalInstance = getCurrentInstance();\n    const progressLabelContent = computed(\n      () =>\n        props.label &&\n        (typeof renderTNode(internalInstance, 'label') === 'object'\n          ? renderTNode(internalInstance, 'label')\n          : `${progressPercent.value}%`),\n    );\n\n    return {\n      name,\n      rootClasses,\n      progressBarPercenStyle,\n      progressBarStyle,\n      progressLabelContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClasses\">\n    <div :class=\"`${name}__inner`\">\n      <div :class=\"`${name}__bar`\" :style=\"progressBarStyle\">\n        <div :class=\"`${name}__bar-percent`\" :style=\"progressBarPercenStyle\"></div>\n      </div>\n      <div v-if=\"progressLabelContent\" :class=\"`${name}__label`\">\n        <t-node :content=\"progressLabelContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport config from '../config';\nimport { getBackgroundColor } from './utils';\nimport progressProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-progress`;\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: progressProps,\n  setup(props) {\n    const progressPercent = computed(() => {\n      return Math.max(0, Math.min(props.percentage, 100));\n    });\n\n    const progressStatusStyle = computed(() => {\n      if (props.percentage >= 100) {\n        return 'success';\n      }\n      return props.status;\n    });\n\n    const progressBarStyle = computed(() => {\n      const height = typeof props.strokeWidth === 'string' ? props.strokeWidth : `${props.strokeWidth}px`;\n      return {\n        height,\n        backgroundColor: props.trackColor,\n      };\n    });\n\n    const progressBarPercenStyle = computed(() => {\n      return {\n        width: `${progressPercent.value}%`,\n        background: props.color && getBackgroundColor(props.color),\n      };\n    });\n\n    const rootClasses = computed(() => [`${name}`, `${name}--status--${progressStatusStyle.value}`]);\n    const internalInstance = getCurrentInstance();\n    const progressLabelContent = computed(\n      () =>\n        props.label &&\n        (typeof renderTNode(internalInstance, 'label') === 'object'\n          ? renderTNode(internalInstance, 'label')\n          : `${progressPercent.value}%`),\n    );\n\n    return {\n      name,\n      rootClasses,\n      progressBarPercenStyle,\n      progressBarStyle,\n      progressLabelContent,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TNode","props","progressProps","setup","progressPercent","computed","Math","max","min","percentage","progressStatusStyle","status","progressBarStyle","height","strokeWidth","backgroundColor","trackColor","progressBarPercenStyle","width","value","background","color","getBackgroundColor","rootClasses","internalInstance","getCurrentInstance","progressLabelContent","label","renderTNode","_createElementBlock","class","_ctx","_createElementVNode","style","_createVNode","_component_t_node","content"],"mappings":"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"}