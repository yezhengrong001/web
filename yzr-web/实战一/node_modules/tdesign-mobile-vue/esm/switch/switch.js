/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, toRefs, openBlock, createElementBlock, normalizeClass, toDisplayString, createCommentVNode, createElementVNode, normalizeStyle } from 'vue';
import '../shared/index.js';
import config from '../config.js';
import SwitchProps from './props.js';
import ClASSNAMES from '../shared/constants.js';
import { useDefault } from '../shared/useDefault/index.js';
import { useToggle } from '../shared/useToggle/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-switch");
var script = defineComponent({
  name: name,
  props: SwitchProps,
  emits: ["change", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var switchValues = props.customValue || [true, false];
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      innerValue = _useDefault2[0];
    var _useToggle = useToggle(switchValues, innerValue.value),
      state = _useToggle.state,
      toggle = _useToggle.toggle;
    var classes = computed(function () {
      var _ref;
      return ["".concat(name), (_ref = {}, _defineProperty(_ref, ClASSNAMES.STATUS.checked, innerValue.value === switchValues[0]), _defineProperty(_ref, ClASSNAMES.STATUS.disabled, props.disabled), _ref)];
    });
    var backgroundColor = computed(function () {
      if (!props.disabled && props.colors) {
        return "background-color: ".concat(innerValue.value === switchValues[0] ? props.colors[0] : props.colors[1]);
      }
      return "";
    });
    function handleToggle(event) {
      event.preventDefault();
      if (props.disabled) {
        return;
      }
      toggle();
      innerValue.value = state.value;
    }
    return _objectSpread(_objectSpread({
      name: name,
      classes: classes,
      backgroundColor: backgroundColor
    }, toRefs(props)), {}, {
      handleToggle: handleToggle
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("span", {
    class: normalizeClass(_ctx.classes)
  }, [_ctx.label ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__text"))
  }, toDisplayString(_ctx.label), 3)) : createCommentVNode("", true), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__node")),
    style: normalizeStyle(_ctx.backgroundColor),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleToggle && _ctx.handleToggle.apply(_ctx, arguments);
    })
  }, null, 6)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=switch.js.map
