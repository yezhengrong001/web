{"version":3,"file":"group.js","sources":["../../src/checkbox/group.vue","../../src/checkbox/group.vue?vue&type=template&id=0c3c91c0&lang.js"],"sourcesContent":["<template>\n  <div :class=\"`${prefix}-checkbox-group`\">\n    <slot v-if=\"!(options && options.length)\" />\n    <span v-else>\n      <checkbox\n        v-for=\"(item, idx) in optionList\"\n        :key=\"idx\"\n        :name=\"item.name\"\n        :label=\"item.label\"\n        :value=\"item.value\"\n        :check-all=\"item.checkAll\"\n      />\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { SetupContext, provide, ref, computed, defineComponent, watch, toRefs, VNode, reactive, onMounted } from 'vue';\nimport config from '../config';\nimport CheckboxProps from './checkbox-group-props';\nimport Checkbox from './checkbox.vue';\nimport { CheckboxGroupValue, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { useDefault } from '../shared';\nimport { getOptions, setCheckAllStatus } from './hooks';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\n\nexport interface Child {\n  value: string | number;\n}\n\nexport default defineComponent({\n  name,\n  components: {\n    Checkbox,\n  },\n  props: CheckboxProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props: any, context: SetupContext) {\n    const { isArray } = Array;\n    const [innerValue, setinnerValue] = useDefault<CheckboxGroupValue, TdCheckboxGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const optionList = getOptions(props, context.slots);\n    const checkedSet = computed(() => {\n      if (isArray(innerValue.value)) {\n        return new Set(innerValue.value);\n      }\n      return new Set();\n    });\n    const checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);\n    const maxExceeded = computed(() => {\n      return props.max !== undefined && innerValue.value.length === props.max;\n    });\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        // TODO: need to test more\n        if (currentValue === undefined) {\n          return;\n        }\n        const val = [...innerValue.value];\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          const i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setinnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          type: data.checked ? 'check' : 'uncheck',\n        });\n      } else {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n      }\n    };\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<NonNullable<TdCheckboxProps['value']>>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.value === undefined) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value = checked ? getAllCheckboxValue() : [];\n      setinnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n      });\n    };\n\n    provide('checkboxGroup', {\n      ...toRefs(props),\n      innerValue,\n      checkAllStatus,\n      checkedSet,\n      onCheckedChange,\n    });\n    return {\n      prefix,\n      optionList,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"`${prefix}-checkbox-group`\">\n    <slot v-if=\"!(options && options.length)\" />\n    <span v-else>\n      <checkbox\n        v-for=\"(item, idx) in optionList\"\n        :key=\"idx\"\n        :name=\"item.name\"\n        :label=\"item.label\"\n        :value=\"item.value\"\n        :check-all=\"item.checkAll\"\n      />\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { SetupContext, provide, ref, computed, defineComponent, watch, toRefs, VNode, reactive, onMounted } from 'vue';\nimport config from '../config';\nimport CheckboxProps from './checkbox-group-props';\nimport Checkbox from './checkbox.vue';\nimport { CheckboxGroupValue, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { useDefault } from '../shared';\nimport { getOptions, setCheckAllStatus } from './hooks';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\n\nexport interface Child {\n  value: string | number;\n}\n\nexport default defineComponent({\n  name,\n  components: {\n    Checkbox,\n  },\n  props: CheckboxProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props: any, context: SetupContext) {\n    const { isArray } = Array;\n    const [innerValue, setinnerValue] = useDefault<CheckboxGroupValue, TdCheckboxGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const optionList = getOptions(props, context.slots);\n    const checkedSet = computed(() => {\n      if (isArray(innerValue.value)) {\n        return new Set(innerValue.value);\n      }\n      return new Set();\n    });\n    const checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);\n    const maxExceeded = computed(() => {\n      return props.max !== undefined && innerValue.value.length === props.max;\n    });\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        // TODO: need to test more\n        if (currentValue === undefined) {\n          return;\n        }\n        const val = [...innerValue.value];\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          const i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setinnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          type: data.checked ? 'check' : 'uncheck',\n        });\n      } else {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n      }\n    };\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<NonNullable<TdCheckboxProps['value']>>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.value === undefined) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value = checked ? getAllCheckboxValue() : [];\n      setinnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n      });\n    };\n\n    provide('checkboxGroup', {\n      ...toRefs(props),\n      innerValue,\n      checkAllStatus,\n      checkedSet,\n      onCheckedChange,\n    });\n    return {\n      prefix,\n      optionList,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","Checkbox","props","CheckboxProps","emits","setup","context","isArray","Array","useDefault","emit","innerValue","setinnerValue","optionList","getOptions","slots","checkedSet","computed","value","Set","checkAllStatus","setCheckAllStatus","maxExceeded","max","length","onCheckedChange","p","checked","checkAll","e","onCheckAllChange","handleCheckboxChange","data","currentValue","option","val","push","i","indexOf","splice","current","type","console","warn","getAllCheckboxValue","len","item","add","provide","toRefs","_createElementBlock","class","_ctx","options","_renderSlot","$slots","key","_hoisted_1","_openBlock","_Fragment","_renderList","idx","_createBlock","_component_checkbox","label"],"mappings":"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"}