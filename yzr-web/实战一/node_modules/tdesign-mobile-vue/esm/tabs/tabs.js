/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, ref, toRefs, Fragment, onMounted, onBeforeUnmount, nextTick, provide, readonly, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, normalizeProps, guardReactiveProps, withCtx, createElementVNode, renderList, createBlock, normalizeStyle, createCommentVNode, renderSlot } from 'vue';
import config from '../config.js';
import TabsProps from './props.js';
import script$1 from './tab-nav-item.js';
import '../shared/index.js';
import ClASSNAMES from '../shared/constants.js';
import _Sticky from '../sticky/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import './tab-panel-props.js';
import '../shared/render-tnode.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../sticky/sticky.js';
import '../sticky/props.js';
import '../sticky/style';
import '../sticky/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-tabs");
var script = defineComponent({
  name: name,
  components: {
    TabNavItem: script$1,
    TSticky: _Sticky
  },
  props: TabsProps,
  emits: ["update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var placement = computed(function () {
      return props.placement;
    });
    var showBottomLine = computed(function () {
      return props.showBottomLine;
    });
    var stickyProps = computed(function () {
      return _objectSpread({
        disabled: true
      }, props.stickyProps);
    });
    var activeClass = ClASSNAMES.STATUS.active;
    var disabledClass = ClASSNAMES.STATUS.disabled;
    var classes = computed(function () {
      return ["".concat(name), "".concat(prefix, "-is-").concat(placement.value), props.size ? ClASSNAMES.SIZE[props.size] : ""];
    });
    var navClasses = ref(["".concat(name, "__nav")]);
    var isScroll = ref(false);
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      currentValue = _useVModel2[0],
      setCurrentValue = _useVModel2[1];
    var itemProps = computed(function () {
      if (props.list) {
        return props.list;
      }
      var children = context.slots.default ? context.slots.default() : [];
      var res = [];
      var _label = [];
      children.forEach(function (child) {
        var _child$children;
        if (child.type === Fragment) {
          res.push.apply(res, _toConsumableArray(child.children));
        } else {
          res.push(child);
        }
        if ((_child$children = child.children) !== null && _child$children !== void 0 && _child$children.label) {
          _label.push(child.children.label()[0] || null);
        }
      });
      children = res.filter(function (child) {
        return child.type.name === "".concat(prefix, "-tab-panel");
      });
      return children.map(function (item, index) {
        return _objectSpread(_objectSpread({}, item.props), {}, {
          label: function label() {
            return _label[index] || item.props.label;
          }
        });
      });
    });
    var navScroll = ref(null);
    var navWrap = ref(null);
    var navLine = ref(null);
    var lineStyle = ref("");
    var moveToActiveTab = function moveToActiveTab() {
      if (navWrap.value && navLine.value && showBottomLine.value) {
        var tab = navWrap.value.querySelector(".".concat(activeClass));
        if (!tab) return;
        var line = navLine.value;
        if (placement.value === "left") {
          lineStyle.value = "transform: translateY(".concat(tab.offsetTop, "px);").concat(props.animation ? "transition-duration:".concat(props.animation.duration, "ms") : "");
        } else {
          lineStyle.value = "transform: translateX(".concat(Number(tab.offsetLeft) + Number(tab.offsetWidth) / 2 - line.offsetWidth / 2, "px);").concat(props.animation ? "transition-duration:".concat(props.animation.duration, "ms") : "");
        }
      }
    };
    onMounted(function () {
      var _navWrap$value, _navScroll$value;
      isScroll.value = (((_navWrap$value = navWrap.value) === null || _navWrap$value === void 0 ? void 0 : _navWrap$value.offsetWidth) || 0) > (((_navScroll$value = navScroll.value) === null || _navScroll$value === void 0 ? void 0 : _navScroll$value.offsetWidth) || 0);
      isScroll.value && navClasses.value.push("".concat(prefix, "-is-scrollable"));
      window.addEventListener("resize", moveToActiveTab, false);
      setTimeout(function () {
        moveToActiveTab();
      }, 300);
    });
    onBeforeUnmount(function () {
      window.removeEventListener("resize", moveToActiveTab);
    });
    var tabClick = function tabClick(event, item) {
      var value2 = item.value,
        disabled = item.disabled;
      if (disabled || currentValue.value === value2) {
        return false;
      }
      setCurrentValue(value2);
      nextTick(function () {
        moveToActiveTab();
      });
    };
    provide("currentValue", readonly(currentValue));
    return {
      name: name,
      prefix: prefix,
      classes: classes,
      navClasses: navClasses,
      activeClass: activeClass,
      disabledClass: disabledClass,
      currentValue: currentValue,
      tabClick: tabClick,
      showBottomLine: showBottomLine,
      itemProps: itemProps,
      navScroll: navScroll,
      navWrap: navWrap,
      navLine: navLine,
      lineStyle: lineStyle,
      moveToActiveTab: moveToActiveTab,
      stickyProps: stickyProps
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tab_nav_item = resolveComponent("tab-nav-item");
  var _component_t_sticky = resolveComponent("t-sticky");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [createVNode(_component_t_sticky, normalizeProps(guardReactiveProps(_ctx.stickyProps)), {
    default: withCtx(function () {
      return [createElementVNode("div", {
        class: normalizeClass(_ctx.navClasses)
      }, [createElementVNode("div", {
        ref: "navScroll",
        class: normalizeClass("".concat(_ctx.name, "__nav-container"))
      }, [createElementVNode("div", {
        ref: "navWrap",
        class: normalizeClass("".concat(_ctx.name, "__nav-wrap"))
      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.itemProps, function (item) {
        var _normalizeClass2;
        return openBlock(), createBlock(_component_tab_nav_item, {
          key: item.value,
          label: item.label,
          class: normalizeClass((_normalizeClass2 = {}, _defineProperty(_normalizeClass2, "".concat(_ctx.name, "__nav-item"), true), _defineProperty(_normalizeClass2, _ctx.activeClass, item.value === _ctx.currentValue), _defineProperty(_normalizeClass2, _ctx.disabledClass, item.disabled), _normalizeClass2)),
          onClick: function onClick(e) {
            return _ctx.tabClick(e, item);
          }
        }, null, 8, ["label", "class", "onClick"]);
      }), 128)), _ctx.showBottomLine ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref: "navLine",
        class: normalizeClass("".concat(_ctx.name, "__nav-line")),
        style: normalizeStyle(_ctx.lineStyle)
      }, null, 6)) : createCommentVNode("", true)], 2)], 2)], 2)];
    }),
    _: 1
  }, 16), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__content"))
  }, [renderSlot(_ctx.$slots, "default")], 2)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=tabs.js.map
