/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { CloseIcon } from 'tdesign-icons-vue-next';
import { defineComponent, toRefs, computed, ref, reactive, getCurrentInstance, toRaw, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createBlock, Fragment, createTextVNode, toDisplayString, createCommentVNode, createVNode, renderList, Transition, withCtx, withDirectives, mergeProps, vShow } from 'vue';
import script$2 from './steps.js';
import config from '../config.js';
import CascaderProps from './props.js';
import '../shared/index.js';
import script$1 from './cascader-item.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import { renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '@babel/runtime/helpers/typeof';
import '@babel/runtime/helpers/defineProperty';
import './cascader-item-prop.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-cascader");
var script = defineComponent({
  name: name,
  components: {
    CloseIcon: CloseIcon,
    CascaderItem: script$1,
    TNode: TNodeComponent,
    CascaderSteps: script$2
  },
  props: CascaderProps,
  emits: ["change", "cancel", "pick", "click-tab", "update:modelValue", "update:value"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      cascaderValue = _useVModel2[0],
      setCascaderValue = _useVModel2[1];
    var title = computed(function () {
      return props.title || "\u6807\u9898";
    });
    var closeIcon = computed(function () {
      return props.closeIcon || false;
    });
    var stepIndex = ref(0);
    var selectedIndexes = reactive([]);
    var items = reactive([props.options]);
    var steps = reactive(["\u9009\u62E9\u9009\u9879"]);
    var onCancel = function onCancel(e) {
      emitEvent("cancel", {
        e: e
      });
    };
    var onStepsChange = function onStepsChange(index) {
      stepIndex.value = index;
      emitEvent("click-tab", index);
    };
    var internalInstance = getCurrentInstance();
    var closeBtnTNode = computed(function () {
      return renderTNode(internalInstance, "closeIcon");
    });
    var titleTNode = computed(function () {
      return renderTNode(internalInstance, "title");
    });
    var onPick = function onPick(item, index, level, e) {
      var _item$children;
      if (item.disabled) {
        return;
      }
      selectedIndexes[level] = index;
      selectedIndexes.length = level + 1;
      steps[level] = item.label;
      emitEvent("pick", item.value, index, {
        e: e
      });
      if (item !== null && item !== void 0 && (_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        items[level + 1] = item.children;
        items.length = level + 2;
        stepIndex.value += 1;
        steps[level + 1] = "\u9009\u62E9\u9009\u9879";
        steps.length = level + 2;
      } else {
        setCascaderValue(item.value);
        emitEvent("change", item.value, items.map(function (item2, index2) {
          return toRaw(item2[selectedIndexes[index2]]);
        }), {
          e: e
        });
      }
    };
    return {
      closeBtnTNode: closeBtnTNode,
      titleTNode: titleTNode,
      stepIndex: stepIndex,
      name: name,
      title: title,
      closeIcon: closeIcon,
      cascaderValue: cascaderValue,
      steps: steps,
      selectedIndexes: selectedIndexes,
      items: items,
      setCascaderValue: setCascaderValue,
      emitEvent: emitEvent,
      onCancel: onCancel,
      onPick: onPick,
      onStepsChange: onStepsChange
    };
  }
});

var _hoisted_1 = {
  style: {
    "width": "100%"
  }
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_close_icon = resolveComponent("close-icon");
  var _component_cascader_steps = resolveComponent("cascader-steps");
  var _component_cascader_item = resolveComponent("cascader-item");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass("".concat(_ctx.name, "__wrapper"))
  }, [createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__title"))
  }, [!(typeof _ctx.titleTNode === "string") ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.titleTNode
  }, null, 8, ["content"])) : (openBlock(), createElementBlock(Fragment, {
    key: 1
  }, [createTextVNode(toDisplayString(_ctx.title), 1)], 64))], 2), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__close-btn")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onCancel && _ctx.onCancel.apply(_ctx, arguments);
    })
  }, [!(typeof _ctx.closeBtnTNode === "boolean") ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.closeBtnTNode
  }, null, 8, ["content"])) : typeof _ctx.closeIcon === "boolean" && _ctx.closeIcon ? (openBlock(), createBlock(_component_close_icon, {
    key: 1,
    size: "24"
  })) : createCommentVNode("", true)], 2), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__content"))
  }, [createVNode(_component_cascader_steps, {
    value: _ctx.stepIndex,
    items: _ctx.steps,
    "onUpdate:value": _ctx.onStepsChange
  }, null, 8, ["value", "items", "onUpdate:value"]), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__options-title"))
  }, "\u9009\u9879\u6807\u9898", 2), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__options-content"))
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, function (options, index) {
    return openBlock(), createElementBlock("div", {
      key: index,
      style: {
        "width": "100%"
      }
    }, [createVNode(Transition, {
      appear: "",
      name: "slide"
    }, {
      default: withCtx(function () {
        return [withDirectives(createElementVNode("div", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(options, function (item, idx) {
          return openBlock(), createBlock(_component_cascader_item, mergeProps({
            key: item.value
          }, item, {
            active: _ctx.selectedIndexes[index] === idx,
            onClick: function onClick($event) {
              return _ctx.onPick(item, idx, index, $event);
            }
          }), null, 16, ["active", "onClick"]);
        }), 128))], 512), [[vShow, _ctx.stepIndex === index]])];
      }),
      _: 2
    }, 1024)]);
  }), 128))], 2)], 2)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=cascader.js.map
