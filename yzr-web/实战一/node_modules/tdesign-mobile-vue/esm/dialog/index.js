/**
 * tdesign v0.12.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { ref, defineComponent, h, createApp, nextTick } from 'vue';
import script from './dialog.js';
import './style';
import '../button/index.js';
import '../button/button.js';
import 'tdesign-icons-vue-next';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../config.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useEmitEvent/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../button/props.js';
import '../button/style';
import '../button/type.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/slicedToArray';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../overlay/style';
import '../popup/style';
import '../popup/type.js';
import './props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DialogPropsDefault = {
  title: "\u6E29\u99A8\u63D0\u9192",
  content: "",
  type: "",
  confirmBtn: "\u786E\u8BA4",
  cancelBtn: "\u53D6\u6D88",
  visible: false,
  zIndex: 2500,
  showOverlay: true,
  width: "320px",
  closeOnOverlayClick: false
};
var instance;
function create(props) {
  var visible = ref(false);
  var root = document.createElement("div");
  document.body.appendChild(root);
  var propsObject = _objectSpread(_objectSpread({}, DialogPropsDefault), typeof props === "string" ? {
    content: props
  } : props);
  if (instance) {
    instance.clear();
  }
  instance = defineComponent({
    render: function render() {
      return h(script, _objectSpread(_objectSpread({}, propsObject), {}, {
        visible: visible.value,
        onConfirm: function onConfirm(context) {
          if (typeof propsObject.onConfirm === "function") {
            propsObject.onConfirm(context);
          }
          visible.value = false;
        },
        onCancel: function onCancel(context) {
          if (typeof propsObject.onCancel === "function") {
            propsObject.onCancel(context);
          }
          visible.value = false;
        },
        onOverlayClick: function onOverlayClick(context) {
          if (typeof propsObject.onOverlayClick === "function") {
            propsObject.onOverlayClick(context);
          }
          visible.value = false;
        },
        onClose: function onClose(context) {
          root.remove();
          if (typeof propsObject.onClose === "function") {
            propsObject.onClose(context);
          }
        }
      }));
    }
  });
  instance.clear = function () {
    root.remove();
  };
  createApp(instance).mount(root);
  nextTick(function () {
    visible.value = true;
  });
  return instance;
}
["show", "alert", "confirm"].forEach(function (type) {
  script[type] = function (options) {
    var props = {
      content: "",
      type: type
    };
    if (typeof options === "string") {
      props.content = options;
    } else {
      props = _objectSpread(_objectSpread({}, props), options);
    }
    return create(props);
  };
});
script.install = function (app) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  app.component(name || script.name, script);
  app.config.globalProperties.$dialog = script;
  app.provide("$dialog", script);
};
var DialogPlugin = script;

export { DialogPlugin, DialogPropsDefault, DialogPlugin as default };
//# sourceMappingURL=index.js.map
