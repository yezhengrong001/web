{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/table/tree-store.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\nimport get from 'lodash/get';\nimport { isRowSelectedDisabled } from './utils';\nimport { PrimaryTableCol, TableRowState, TableRowValue, TableRowData } from './types';\nimport log from '../log';\n\nexport type TableTreeDataMap = Map<string | number, TableRowState>;\n\nexport interface TableRowModel<T> extends TableRowState<T> {\n  setData?: (key: string | number, data: T) => void;\n}\n\nexport interface KeysType {\n  rowKey: string;\n  childrenKey: string;\n}\n\nexport interface SwapParams<T> {\n  current: T;\n  target: T;\n  currentIndex: number;\n  targetIndex: number;\n}\n\nexport const TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {\n  code: 1001,\n  reason: 'The same level of rows can not be swapped.',\n};\n\n/**\n * 表格树形结构处理器\n * Vue 和 React 可以通用\n * 关键函数有以下几个\n * @toggleExpandData 处理树形结构展开收起\n * @setData 更新当行数据\n * @getData 获取单行数据\n * @remove 移除行数据，及其子节点\n * @appendTo 追加子节点到末尾\n */\nclass TableTreeStore<T extends TableRowData = TableRowData> {\n  /** 树形结构 Map 存储 */\n  treeDataMap: TableTreeDataMap = new Map();\n\n  expandAllRowIndex: 0;\n\n  constructor() {\n    this.treeDataMap = new Map();\n  }\n\n  /**\n   * 初始化 treeDataMap，不会改变 dataSource\n   * @param dataSource 树形数据源\n   * @param columns 列配置\n   * @param keys 字段别名\n   */\n  initialTreeStore(dataSource: T[], columns: PrimaryTableCol[], keys: KeysType) {\n    this.treeDataMap?.clear();\n    this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);\n  }\n\n  /**\n   * 获取所有节点的唯一标识\n   */\n  getAllUniqueKeys(data: T[], keys: KeysType, arr: T[] = []) {\n    for (let i = 0, len = data.length; i < len; i++) {\n      const item = data[i];\n      arr.push(get(item, keys.rowKey));\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.getAllUniqueKeys(children, keys, arr);\n      }\n    }\n    return arr;\n  }\n\n  toggleExpandData(p: { rowIndex: number; row: T }, dataSource: T[], keys: KeysType) {\n    if (!p) {\n      log.error('EnhancedTable', 'the node you want to toggleExpand doest not exist in `data`');\n      return dataSource;\n    }\n    const rowValue = get(p.row, keys.rowKey);\n    if (rowValue === undefined) {\n      log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n      return [];\n    }\n    const childrenNodes = get(p.row, keys.childrenKey);\n    // childrenNodes = true，表示懒加载，直接返回，暂时不做展开处理\n    if (childrenNodes === true) return dataSource;\n    const r = this.treeDataMap.get(rowValue);\n    r.rowIndex = p.rowIndex;\n    r.expanded = !r.expanded;\n    this.treeDataMap.set(rowValue, r);\n    return this.updateExpandRow(r, dataSource, keys);\n  }\n\n  updateExpandRow(changeRow: TableRowState, dataSource: T[], keys: KeysType): T[] {\n    const { row, rowIndex, expanded } = changeRow;\n    const { treeDataMap } = this;\n    const childrenNodes = get(row, keys.childrenKey);\n    if (!row || !childrenNodes) return dataSource;\n    if (expanded) {\n      updateChildrenRowState(treeDataMap, changeRow, expanded, keys);\n      updateRowExpandLength(treeDataMap, row, childrenNodes.length, 'expand', keys);\n      // eslint-disable-next-line\n      dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));\n    } else {\n      updateChildrenRowState<T>(treeDataMap, changeRow, expanded, keys);\n      const len = changeRow.expandChildrenLength || childrenNodes.length;\n      updateRowExpandLength(treeDataMap, row, -1 * len, 'fold', keys);\n      dataSource.splice(rowIndex + 1, len);\n    }\n    // 展开或收起后，会影响后续节点的 rowIndex，需同步更新\n    updateRowIndex(treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: rowIndex + 1,\n    });\n    return dataSource;\n  }\n\n  /**\n   * 获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  getData(key: TableRowValue): TableRowState {\n    return this.treeDataMap.get(key);\n  }\n\n  /**\n   * 更新当前行数据，并返回当前行下标\n   * @param rowValue 当前行唯一标识值\n   * @param newRowData 新行数据\n   * @returns {number} rowIndex 设置的行下标\n   */\n  updateData(rowValue: TableRowValue, newRowData: T, dataSource: T[], keys: KeysType): number {\n    const newRowValue = get(newRowData, keys.rowKey);\n    const rowState = this.treeDataMap.get(rowValue);\n    // Map 没有查询到，或者查询到的 rowIndex 值为 -1，均表示当前数据不在 dataSource 列表中，未显示在页面中\n    if (!rowState || rowState.rowIndex === -1) {\n      updateRowData(dataSource, rowValue, newRowData, {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      return -1;\n    }\n\n    // 懒加载处理：children 为 true，则需清空子元素在 map 中的值，而后方便重新加载\n    if (get(newRowData, keys.childrenKey) === true) {\n      const oldChildren = get(rowState.row, keys.childrenKey);\n      if (oldChildren?.length) {\n        for (let i = 0, len = oldChildren.length; i < len; i++) {\n          const rowValue = get(oldChildren[i], keys.rowKey);\n          const state = this.treeDataMap.get(rowValue);\n          if (state) {\n            this.treeDataMap.delete(rowValue);\n          }\n        }\n      }\n    }\n\n    const currentRowIndex = rowState.rowIndex;\n    rowState.row = newRowData;\n    rowState.id = newRowValue;\n\n    // 更新父元素中存储的当前元素值\n    if (rowState.parent) {\n      // 更新直接子元素数组\n      const siblings = get(rowState.parent.row, keys.childrenKey);\n      const index = siblings.findIndex((item: T) => get(item, keys.rowKey) === rowValue);\n      siblings[index] = newRowData;\n    }\n\n    this.treeDataMap.set(newRowValue, rowState);\n    // rowValue 也发生了变化，需移除 旧 rowValue 数据\n    if (rowValue !== newRowValue) {\n      this.treeDataMap.delete(rowValue);\n    }\n    return currentRowIndex;\n  }\n\n  /**\n   * 移除指定节点\n   * @param key 行唯一标识\n   */\n  remove(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      // 移除当前节点时，展开的节点的子节点需同步移除\n      const removeNumber = (r.expandChildrenLength || 0) + 1;\n      dataSource.splice(r.rowIndex, removeNumber);\n\n      if (r.parent) {\n        const siblings = get(r.parent.row, keys.childrenKey);\n        const index = siblings.findIndex((item: TableRowData) => get(item, keys.rowKey) === key);\n        siblings.splice(index, 1);\n        updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, 'delete', keys);\n      }\n\n      this.treeDataMap.delete(key);\n\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: r.rowIndex,\n        rowKey: keys.rowKey,\n        type: 'remove',\n      });\n    } else {\n      log.warn('EnhancedTable', 'Do not remove this node, which is not appeared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点。允许添加单个或多个\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  appendTo(rowValue: string | number, newData: T | T[], dataSource: T[], keys: KeysType): T[] {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const children: T[] = get(state.row, keys.childrenKey);\n    // 子节点不存在，则表示为叶子节点\n    const isShowNewNode = state.expanded || !children?.length;\n    // 添加多个子节点时，需去除重复子节点\n    const tmpData = newData instanceof Array ? newData : [newData];\n    const newChildrenData: T[] = [];\n    const newChildrenStates: TableRowState[] = [];\n    let firstNewChildrenIndex = -1;\n    for (let i = 0, len = tmpData.length; i < len; i++) {\n      const oneData = tmpData[i];\n      const newRowValue = get(oneData, keys.rowKey);\n      const mapState = this.treeDataMap.get(newRowValue);\n      if (!this.validateDataDoubleExist(mapState, newRowValue)) {\n        log.warn('Table', `Duplicated Data \\`${newRowValue}\\` has been removed.`);\n      } else {\n        const rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;\n        if (i === 0) {\n          firstNewChildrenIndex = rowIndex;\n        }\n        const newState = {\n          id: newRowValue,\n          row: oneData,\n          rowIndex,\n          level: state.level + 1,\n          expanded: false,\n          expandChildrenLength: 0,\n          disabled: false,\n          path: [...state.path],\n          parent: state,\n        };\n        newState.path = newState.path.concat(newState);\n        newChildrenData.push(oneData);\n        newChildrenStates.push(newState);\n        this.treeDataMap.set(newRowValue, newState);\n      }\n    }\n    if (!newChildrenData.length) return dataSource;\n\n    if (children?.length) {\n      state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);\n    } else {\n      state.row[keys.childrenKey] = newChildrenData;\n      state.expanded = true;\n    }\n\n    // 如果当前节点为展开状态，则需要继续处理\n    if (isShowNewNode) {\n      dataSource.splice(firstNewChildrenIndex, 0, ...newChildrenData);\n      // 更新父元素及祖先元素展开子节点的数量\n      const newChildrenCount = newChildrenData.length || 1;\n      updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, 'insert', {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,\n        rowKey: keys.rowKey,\n        type: 'add',\n        count: 1,\n      });\n    }\n\n    return dataSource;\n  }\n\n  appendToRoot(newData: T | T[], dataSource: T[], keys: KeysType) {\n    const newDataSource = dataSource.concat(newData);\n    const tmpNewData = newData instanceof Array ? newData : [newData];\n    const dataSourceLen = dataSource.length;\n    for (let i = 0, len = tmpNewData.length; i < len; i++) {\n      const rowValue = get(tmpNewData[i], keys.rowKey);\n      if (!rowValue) {\n        log.error('Table', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        continue;\n      }\n      const state: TableRowState = {\n        id: rowValue,\n        row: tmpNewData[i],\n        rowIndex: dataSourceLen + i,\n        level: 0,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: false,\n      };\n      state.path = [state];\n      this.treeDataMap.set(rowValue, state);\n    }\n    return newDataSource;\n  }\n\n  /**\n   * 在当前节点后，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertAfter(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'after');\n  }\n\n  /**\n   * 在当前节点前，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertBefore(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'before');\n  }\n\n  insert(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType, type: 'before' | 'after') {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const newRowValue = get(newData, keys.rowKey);\n    const mapState = this.treeDataMap.get(newRowValue);\n    if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;\n    const rowIndex = type === 'after' ? state.rowIndex + 1 : state.rowIndex;\n    const newState = {\n      id: newRowValue,\n      row: newData,\n      rowIndex,\n      level: state.level,\n      expanded: false,\n      expandChildrenLength: 0,\n      disabled: false,\n      path: state.path.slice(0, -1),\n      parent: state.parent,\n    };\n    newState.path = newState.path.concat(newState);\n    const dataIndex = type === 'after' ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;\n    dataSource.splice(dataIndex, 0, newData);\n    const distance = type === 'after' ? 1 : 0;\n    if (state.parent) {\n      const childrenIndex = state.parent.row[keys.childrenKey].findIndex(\n        (t: TableRowData) => rowValue === get(t, keys.rowKey),\n      );\n      state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);\n      updateRowExpandLength(this.treeDataMap, state.parent.row, 1, 'insert', keys);\n    }\n    this.treeDataMap.set(newRowValue, newState);\n\n    // 更新 rowIndex 之后的下标\n    updateRowIndex(this.treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: state.rowIndex + 1,\n      type: 'add',\n    });\n\n    return dataSource;\n  }\n\n  /**\n   * 交换数据行\n   * @returns 交换失败返回 false\n   */\n  swapData(\n    dataSource: T[],\n    params: SwapParams<T>,\n    keys: KeysType,\n  ): { dataSource: T[]; result: boolean; code?: number; reason?: string } {\n    const startIndex = params.currentIndex;\n    const endIndex = params.targetIndex;\n    if (startIndex === endIndex) return { dataSource, result: true };\n    const startRowValue = get(params.current, keys.rowKey);\n    const endRowValue = get(params.target, keys.rowKey);\n    const startState = this.treeDataMap.get(startRowValue);\n    const endState = this.treeDataMap.get(endRowValue);\n    if (startState.level !== endState.level) {\n      return {\n        dataSource,\n        result: false,\n        code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,\n        reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason,\n      };\n    }\n    const startLastIndex = startIndex + startState.expandChildrenLength + 1;\n    const endLastIndex = endIndex + endState.expandChildrenLength + 1;\n    const startRowList = dataSource.slice(startIndex, startLastIndex);\n    const endRowList = dataSource.slice(endIndex, endLastIndex);\n    if (startIndex > endIndex) {\n      const middleRowList = dataSource.slice(endLastIndex, startIndex);\n      const allSwapList = startRowList.concat(endRowList, middleRowList);\n      dataSource.splice(endIndex, allSwapList.length);\n      dataSource.splice(endIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: endIndex,\n        maxRowIndex: startLastIndex,\n      });\n    } else {\n      const middleRowList = dataSource.slice(startLastIndex, endIndex);\n      const allSwapList = middleRowList.concat(endRowList, startRowList);\n      dataSource.splice(startIndex, allSwapList.length);\n      dataSource.splice(startIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: startIndex,\n        maxRowIndex: endLastIndex,\n      });\n    }\n\n    // 交换父元素中的两个元素位置\n    if (startState.parent) {\n      const children = startState.parent.row[keys.childrenKey];\n      let count = 0;\n      let targetIndex = -1;\n      let currentIndex = -1;\n      for (let i = 0, len = children.length; i < len; i++) {\n        if (get(children[i], keys.rowKey) === startRowValue) {\n          targetIndex = i;\n          count += 1;\n        }\n        if (get(children[i], keys.rowKey) === endRowValue) {\n          currentIndex = i;\n          count += 1;\n        }\n        if (count >= 2) break;\n      }\n      children[targetIndex] = params.target;\n      children[currentIndex] = params.current;\n    }\n\n    return { dataSource, result: true };\n  }\n\n  /**\n   * 展开所有节点\n   */\n  expandAll(dataSource: T[], keys: KeysType) {\n    this.expandAllRowIndex = 0;\n    const expandLoop = (\n      dataSource: T[],\n      keys: KeysType,\n      newData: T[] = [],\n      parentExpanded = false,\n      parent: TableRowState = null,\n    ) => {\n      for (let i = 0, len = dataSource.length; i < len; i++) {\n        const item = dataSource[i];\n        const rowValue = get(item, keys.rowKey);\n        const state = this.treeDataMap.get(rowValue);\n        const children = get(item, keys.childrenKey);\n        const originalExpanded = state.expanded;\n        state.rowIndex = this.expandAllRowIndex;\n        if (children !== true && children?.length) {\n          state.expanded = true;\n        }\n        state.expandChildrenLength = children?.length || 0;\n        this.expandAllRowIndex += 1;\n        if (!parentExpanded) {\n          newData.push(item);\n        }\n        this.treeDataMap.set(rowValue, state);\n        if (children?.length && !originalExpanded) {\n          // 同步更新父元素的展开数量\n          let tmpParent = parent;\n          while (tmpParent?.row) {\n            tmpParent.expandChildrenLength += children.length;\n            this.treeDataMap.set(tmpParent.id, tmpParent);\n            tmpParent = tmpParent.parent;\n          }\n          // 继续子元素\n          expandLoop(children, keys, newData, originalExpanded, state);\n        }\n      }\n      return newData;\n    };\n    return expandLoop(dataSource, keys);\n  }\n\n  /**\n   * 收起所有节点\n   */\n  foldAll(dataSource: T[], keys: KeysType) {\n    const newData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      state.rowIndex = state.level === 0 ? i : -1;\n      state.expanded = false;\n      state.expandChildrenLength = 0;\n      if (state.level === 0) {\n        newData.push(item);\n      }\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.foldAll(children, keys);\n      }\n    }\n    return newData;\n  }\n\n  /** 获取整个树形结构 */\n  getTreeNode(dataSource: T[], keys: KeysType): T[] {\n    // let isStarted = false;\n    const treeData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      // 只需要压入第一层数据\n      if (state.level === 0) {\n        treeData.push(item);\n      }\n    }\n    return treeData;\n  }\n\n  /**\n   * 获取展开的树形节点\n   * @param dataSource 平铺的树形结构数据\n   * @param keys 行唯一标识和子节点的字段名\n   * @param type 'unique' 标识获取展开节点的行唯一标识值，'data' 表示获取展开节点的数据，'all' 表示获取行节点包含展开状态的全部数据\n   * @returns 展开的树形节点\n   */\n  getTreeExpandedRow(dataSource: T[], keys: KeysType, type: 'unique' | 'data' | 'all' = 'data') {\n    const arr: (T | any)[] = [];\n    dataSource.forEach((item) => {\n      const rowValue = get(item, keys.rowKey);\n      const rowState = this.treeDataMap.get(rowValue);\n      if (!rowState.expanded) return;\n      if (type === 'unique') {\n        arr.push(rowValue);\n      } else if (type === 'data') {\n        arr.push(item);\n      } else {\n        arr.push(rowState);\n      }\n    });\n    return arr;\n  }\n\n  /**\n   * 初始化树形结构 Map\n   * @param treeDataMap 树形结构 Map\n   * @param dataSource 数据源\n   * @param column 树形结构列\n   * @param keys 字段映射关系\n   * @param level 层级\n   * @param parent 父元素\n   * @returns void\n   */\n  initialTreeDataMap(\n    treeDataMap: TableTreeDataMap,\n    dataSource: T[],\n    column: PrimaryTableCol,\n    keys: KeysType,\n    level = 0,\n    parent: TableRowState = null,\n  ) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (rowValue === undefined) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const children = get(item, keys.childrenKey);\n      const state: TableRowState = {\n        id: rowValue,\n        row: item,\n        rowIndex: level === 0 ? i : -1,\n        level,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: isRowSelectedDisabled(column, item, i),\n        parent,\n      };\n      state.path = parent ? parent.path.concat(state) : [state];\n      treeDataMap.set(rowValue, state);\n      if (children?.length) {\n        this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);\n      }\n    }\n  }\n\n  // column.checkProps 和 column.disabled 会影响行的禁用状态，因此当列发生变化时，需要重置禁用状态\n  updateDisabledState(dataSource: T[], column: PrimaryTableCol, keys: KeysType) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (rowValue === undefined) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const state = this.treeDataMap.get(rowValue);\n      state.disabled = isRowSelectedDisabled(column, item, i);\n      this.treeDataMap.set(rowValue, state);\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.updateDisabledState(children, column, keys);\n      }\n    }\n  }\n\n  /**\n   * 校验数据合法性\n   */\n  validateDataExist(state: TableRowState, rowValue: string | number) {\n    if (!state) {\n      log.warn('EnhancedTable', `${rowValue} does not exist.`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 校验数据是否已存在\n   */\n  validateDataDoubleExist(state: TableRowState, rowValue: string | number) {\n    if (state) {\n      log.warn('EnhancedTable', `Duplicated Key. ${rowValue} already exists.`);\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default TableTreeStore;\n\n/**\n * 更新展开的子节点数量\n * @param rowSate 行数据和状态\n * @param distance 需要调整的展开子节点长度数量，展开时增加，收起时减少。值为负数，表示减\n * @param expanded 展开/收起\n */\nexport function updateRowExpandLength(\n  treeDataMap: TableTreeDataMap,\n  row: TableRowData,\n  distance: number,\n  type: 'expand' | 'fold' | 'delete' | 'insert',\n  keys: KeysType,\n) {\n  let tmp = row;\n  while (tmp) {\n    const state = treeDataMap.get(get(tmp, keys.rowKey));\n    const expandLen = (state.expandChildrenLength || 0) + distance;\n    state.expandChildrenLength = Math.max(0, expandLen);\n    tmp = state?.parent?.row;\n  }\n  // 如果是收起状态，子节点需全部收起，清空子节点展开行数量，设置 expandChildrenLength 为 0\n  if (type === 'fold') {\n    clearRowExpandLength(treeDataMap, row, keys);\n  }\n}\n\nexport function clearRowExpandLength<T>(treeDataMap: TableTreeDataMap, row: T, keys: KeysType) {\n  const children = get(row, keys.childrenKey);\n  if (children?.length) {\n    children.forEach((item: T[]) => {\n      const state = treeDataMap.get(get(item, keys.rowKey));\n      if (!state) return;\n      state.expandChildrenLength = 0;\n      clearRowExpandLength(treeDataMap, state.row, keys);\n    });\n  }\n}\n\n/**\n * 更新子节点行状态，行数据、父节点、层级、路径等数据\n * @param rowState 行状态数据\n * @param expanded 展开或收起\n * @param keys\n */\nexport function updateChildrenRowState<T>(\n  treeDataMap: TableTreeDataMap,\n  rowState: TableRowState,\n  expanded: boolean,\n  keys: KeysType,\n) {\n  const { row, rowIndex } = rowState;\n  const childrenNodes = get(row, keys.childrenKey);\n  childrenNodes.forEach((item: T, kidRowIndex: number) => {\n    const rowValue = get(item, keys.rowKey);\n    const index = expanded ? rowIndex + 1 + kidRowIndex : -1;\n    const curState = treeDataMap.get(rowValue);\n    const newState: TableRowState = {\n      ...curState,\n      row: item,\n      rowIndex: index,\n      expanded: false,\n      parent: rowState,\n    };\n    treeDataMap.set(rowValue, newState);\n    // 父节点展开，子节点不一定展开；父节点收起，则所有子节点收起\n    if (!expanded) {\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        updateChildrenRowState(\n          treeDataMap,\n          {\n            ...newState,\n            rowIndex: -1,\n            expanded: false,\n          } as any,\n          expanded,\n          keys,\n        );\n      }\n    }\n  });\n}\n\nexport function updateRowData<T extends TableRowData = TableRowData>(\n  data: T[],\n  key: string | number,\n  newData: T,\n  keys: KeysType,\n) {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const item = data[i];\n    if (get(item, keys.rowKey) === key) {\n      // eslint-disable-next-line no-param-reassign\n      data[i] = newData;\n      return;\n    }\n    const children: T[] = get(item, keys.childrenKey) || [];\n    if (children?.length) {\n      updateRowData(children, key, newData, keys);\n    }\n  }\n}\n\nexport function updateRowIndex<T>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  extra: {\n    rowKey: string;\n    minRowIndex?: number;\n    maxRowIndex?: number;\n    type?: 'add' | 'remove';\n    count?: number;\n  },\n) {\n  const start = extra.minRowIndex || 0;\n  const end = extra.maxRowIndex || dataSource.length;\n  for (let rowIndex = start; rowIndex < end; rowIndex++) {\n    const item = dataSource[rowIndex];\n    const state = treeDataMap.get(get(item, extra.rowKey));\n    if (!state) {\n      log.warn('Table', 'tree map went wrong');\n    }\n    state.rowIndex = rowIndex + (extra?.count || 1) - 1;\n  }\n}\n\nexport type TreeDataMapType = InstanceType<typeof TableTreeStore>['treeDataMap'];\n"],"names":["TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL","code","reason","TableTreeStore","Map","treeDataMap","dataSource","columns","keys","clear","initialTreeDataMap","data","arr","i","len","length","item","push","get","rowKey","children","childrenKey","getAllUniqueKeys","p","log","error","rowValue","row","childrenNodes","r","rowIndex","expanded","set","updateExpandRow","changeRow","updateChildrenRowState","updateRowExpandLength","splice","apply","concat","expandChildrenLength","updateRowIndex","minRowIndex","key","newRowData","newRowValue","rowState","updateRowData","oldChildren","state","delete","currentRowIndex","id","parent","siblings","index","findIndex","removeNumber","type","warn","newData","validateDataExist","isShowNewNode","tmpData","Array","newChildrenData","newChildrenStates","firstNewChildrenIndex","oneData","mapState","validateDataDoubleExist","newState","level","disabled","path","newChildrenCount","count","newDataSource","tmpNewData","dataSourceLen","insert","slice","dataIndex","distance","childrenIndex","t","params","startIndex","currentIndex","endIndex","targetIndex","result","startRowValue","current","endRowValue","target","startState","endState","startLastIndex","endLastIndex","startRowList","endRowList","middleRowList","allSwapList","maxRowIndex","expandAllRowIndex","expandLoop","parentExpanded","originalExpanded","tmpParent","foldAll","treeData","forEach","column","isRowSelectedDisabled","updateDisabledState","tmp","expandLen","Math","max","clearRowExpandLength","kidRowIndex","curState","extra","start","end"],"mappings":"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"}